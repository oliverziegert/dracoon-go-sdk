/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ActiveDirectoryConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActiveDirectoryConfig{}

// ActiveDirectoryConfig Active Directory configuration
type ActiveDirectoryConfig struct {
	// ID
	Id int32 `json:"id"`
	// Unique name for an Active Directory configuration
	Alias string `json:"alias"`
	// IPv4 or IPv6 address or host name
	ServerIp string `json:"serverIp"`
	// Port
	ServerPort int32 `json:"serverPort"`
	// Distinguished Name (DN) of Active Directory administrative account
	ServerAdminName string `json:"serverAdminName"`
	// Search scope of Active Directory; only users below this node can log on.
	LdapUsersDomain string `json:"ldapUsersDomain"`
	// Name of Active Directory attribute that is used as login name.
	UserFilter string `json:"userFilter"`
	// Determines if a DRACOON account is automatically created for a new user  who successfully logs on with his / her AD / IDP account.
	UserImport bool `json:"userImport"`
	// If `userImport` is set to `true`,  the user must be member of this Active Directory group to receive a newly created DRACOON account.
	AdExportGroup string `json:"adExportGroup"`
	// Determines whether LDAPS should be used instead of plain LDAP.
	UseLdaps bool `json:"useLdaps"`
	// User group that is assigned to users who are created by automatic import.  Reset with `0`
	SdsImportGroup *int64 `json:"sdsImportGroup,omitempty"`
	// SSL finger print of Active Directory server.  Mandatory for LDAPS connections.  Format: `Algorithm/Fingerprint`
	SslFingerPrint *string `json:"sslFingerPrint,omitempty"`
	// &#128679; Deprecated since v4.10.0  DEPRECATED, will be ignored  ID of the room in which the individual rooms for users will be created.
	// Deprecated
	HomeFolderParent *int64 `json:"homeFolderParent,omitempty"`
	// &#128679; Deprecated since v4.10.0  DEPRECATED, will be ignored  Determines whether a room is created for each user that is created by automatic import (like a home folder).  Room's name will equal the user's login name.
	// Deprecated
	CreateHomeFolder *bool `json:"createHomeFolder,omitempty"`
}

type _ActiveDirectoryConfig ActiveDirectoryConfig

// NewActiveDirectoryConfig instantiates a new ActiveDirectoryConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveDirectoryConfig(id int32, alias string, serverIp string, serverPort int32, serverAdminName string, ldapUsersDomain string, userFilter string, userImport bool, adExportGroup string, useLdaps bool) *ActiveDirectoryConfig {
	this := ActiveDirectoryConfig{}
	this.Id = id
	this.Alias = alias
	this.ServerIp = serverIp
	this.ServerPort = serverPort
	this.ServerAdminName = serverAdminName
	this.LdapUsersDomain = ldapUsersDomain
	this.UserFilter = userFilter
	this.UserImport = userImport
	this.AdExportGroup = adExportGroup
	this.UseLdaps = useLdaps
	var createHomeFolder bool = false
	this.CreateHomeFolder = &createHomeFolder
	return &this
}

// NewActiveDirectoryConfigWithDefaults instantiates a new ActiveDirectoryConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveDirectoryConfigWithDefaults() *ActiveDirectoryConfig {
	this := ActiveDirectoryConfig{}
	var createHomeFolder bool = false
	this.CreateHomeFolder = &createHomeFolder
	return &this
}

// GetId returns the Id field value
func (o *ActiveDirectoryConfig) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryConfig) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ActiveDirectoryConfig) SetId(v int32) {
	o.Id = v
}

// GetAlias returns the Alias field value
func (o *ActiveDirectoryConfig) GetAlias() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Alias
}

// GetAliasOk returns a tuple with the Alias field value
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryConfig) GetAliasOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Alias, true
}

// SetAlias sets field value
func (o *ActiveDirectoryConfig) SetAlias(v string) {
	o.Alias = v
}

// GetServerIp returns the ServerIp field value
func (o *ActiveDirectoryConfig) GetServerIp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServerIp
}

// GetServerIpOk returns a tuple with the ServerIp field value
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryConfig) GetServerIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerIp, true
}

// SetServerIp sets field value
func (o *ActiveDirectoryConfig) SetServerIp(v string) {
	o.ServerIp = v
}

// GetServerPort returns the ServerPort field value
func (o *ActiveDirectoryConfig) GetServerPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ServerPort
}

// GetServerPortOk returns a tuple with the ServerPort field value
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryConfig) GetServerPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerPort, true
}

// SetServerPort sets field value
func (o *ActiveDirectoryConfig) SetServerPort(v int32) {
	o.ServerPort = v
}

// GetServerAdminName returns the ServerAdminName field value
func (o *ActiveDirectoryConfig) GetServerAdminName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServerAdminName
}

// GetServerAdminNameOk returns a tuple with the ServerAdminName field value
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryConfig) GetServerAdminNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerAdminName, true
}

// SetServerAdminName sets field value
func (o *ActiveDirectoryConfig) SetServerAdminName(v string) {
	o.ServerAdminName = v
}

// GetLdapUsersDomain returns the LdapUsersDomain field value
func (o *ActiveDirectoryConfig) GetLdapUsersDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LdapUsersDomain
}

// GetLdapUsersDomainOk returns a tuple with the LdapUsersDomain field value
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryConfig) GetLdapUsersDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LdapUsersDomain, true
}

// SetLdapUsersDomain sets field value
func (o *ActiveDirectoryConfig) SetLdapUsersDomain(v string) {
	o.LdapUsersDomain = v
}

// GetUserFilter returns the UserFilter field value
func (o *ActiveDirectoryConfig) GetUserFilter() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserFilter
}

// GetUserFilterOk returns a tuple with the UserFilter field value
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryConfig) GetUserFilterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserFilter, true
}

// SetUserFilter sets field value
func (o *ActiveDirectoryConfig) SetUserFilter(v string) {
	o.UserFilter = v
}

// GetUserImport returns the UserImport field value
func (o *ActiveDirectoryConfig) GetUserImport() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.UserImport
}

// GetUserImportOk returns a tuple with the UserImport field value
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryConfig) GetUserImportOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserImport, true
}

// SetUserImport sets field value
func (o *ActiveDirectoryConfig) SetUserImport(v bool) {
	o.UserImport = v
}

// GetAdExportGroup returns the AdExportGroup field value
func (o *ActiveDirectoryConfig) GetAdExportGroup() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AdExportGroup
}

// GetAdExportGroupOk returns a tuple with the AdExportGroup field value
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryConfig) GetAdExportGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AdExportGroup, true
}

// SetAdExportGroup sets field value
func (o *ActiveDirectoryConfig) SetAdExportGroup(v string) {
	o.AdExportGroup = v
}

// GetUseLdaps returns the UseLdaps field value
func (o *ActiveDirectoryConfig) GetUseLdaps() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.UseLdaps
}

// GetUseLdapsOk returns a tuple with the UseLdaps field value
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryConfig) GetUseLdapsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UseLdaps, true
}

// SetUseLdaps sets field value
func (o *ActiveDirectoryConfig) SetUseLdaps(v bool) {
	o.UseLdaps = v
}

// GetSdsImportGroup returns the SdsImportGroup field value if set, zero value otherwise.
func (o *ActiveDirectoryConfig) GetSdsImportGroup() int64 {
	if o == nil || IsNil(o.SdsImportGroup) {
		var ret int64
		return ret
	}
	return *o.SdsImportGroup
}

// GetSdsImportGroupOk returns a tuple with the SdsImportGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryConfig) GetSdsImportGroupOk() (*int64, bool) {
	if o == nil || IsNil(o.SdsImportGroup) {
		return nil, false
	}
	return o.SdsImportGroup, true
}

// HasSdsImportGroup returns a boolean if a field has been set.
func (o *ActiveDirectoryConfig) HasSdsImportGroup() bool {
	if o != nil && !IsNil(o.SdsImportGroup) {
		return true
	}

	return false
}

// SetSdsImportGroup gets a reference to the given int64 and assigns it to the SdsImportGroup field.
func (o *ActiveDirectoryConfig) SetSdsImportGroup(v int64) {
	o.SdsImportGroup = &v
}

// GetSslFingerPrint returns the SslFingerPrint field value if set, zero value otherwise.
func (o *ActiveDirectoryConfig) GetSslFingerPrint() string {
	if o == nil || IsNil(o.SslFingerPrint) {
		var ret string
		return ret
	}
	return *o.SslFingerPrint
}

// GetSslFingerPrintOk returns a tuple with the SslFingerPrint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryConfig) GetSslFingerPrintOk() (*string, bool) {
	if o == nil || IsNil(o.SslFingerPrint) {
		return nil, false
	}
	return o.SslFingerPrint, true
}

// HasSslFingerPrint returns a boolean if a field has been set.
func (o *ActiveDirectoryConfig) HasSslFingerPrint() bool {
	if o != nil && !IsNil(o.SslFingerPrint) {
		return true
	}

	return false
}

// SetSslFingerPrint gets a reference to the given string and assigns it to the SslFingerPrint field.
func (o *ActiveDirectoryConfig) SetSslFingerPrint(v string) {
	o.SslFingerPrint = &v
}

// GetHomeFolderParent returns the HomeFolderParent field value if set, zero value otherwise.
// Deprecated
func (o *ActiveDirectoryConfig) GetHomeFolderParent() int64 {
	if o == nil || IsNil(o.HomeFolderParent) {
		var ret int64
		return ret
	}
	return *o.HomeFolderParent
}

// GetHomeFolderParentOk returns a tuple with the HomeFolderParent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *ActiveDirectoryConfig) GetHomeFolderParentOk() (*int64, bool) {
	if o == nil || IsNil(o.HomeFolderParent) {
		return nil, false
	}
	return o.HomeFolderParent, true
}

// HasHomeFolderParent returns a boolean if a field has been set.
func (o *ActiveDirectoryConfig) HasHomeFolderParent() bool {
	if o != nil && !IsNil(o.HomeFolderParent) {
		return true
	}

	return false
}

// SetHomeFolderParent gets a reference to the given int64 and assigns it to the HomeFolderParent field.
// Deprecated
func (o *ActiveDirectoryConfig) SetHomeFolderParent(v int64) {
	o.HomeFolderParent = &v
}

// GetCreateHomeFolder returns the CreateHomeFolder field value if set, zero value otherwise.
// Deprecated
func (o *ActiveDirectoryConfig) GetCreateHomeFolder() bool {
	if o == nil || IsNil(o.CreateHomeFolder) {
		var ret bool
		return ret
	}
	return *o.CreateHomeFolder
}

// GetCreateHomeFolderOk returns a tuple with the CreateHomeFolder field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *ActiveDirectoryConfig) GetCreateHomeFolderOk() (*bool, bool) {
	if o == nil || IsNil(o.CreateHomeFolder) {
		return nil, false
	}
	return o.CreateHomeFolder, true
}

// HasCreateHomeFolder returns a boolean if a field has been set.
func (o *ActiveDirectoryConfig) HasCreateHomeFolder() bool {
	if o != nil && !IsNil(o.CreateHomeFolder) {
		return true
	}

	return false
}

// SetCreateHomeFolder gets a reference to the given bool and assigns it to the CreateHomeFolder field.
// Deprecated
func (o *ActiveDirectoryConfig) SetCreateHomeFolder(v bool) {
	o.CreateHomeFolder = &v
}

func (o ActiveDirectoryConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActiveDirectoryConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["alias"] = o.Alias
	toSerialize["serverIp"] = o.ServerIp
	toSerialize["serverPort"] = o.ServerPort
	toSerialize["serverAdminName"] = o.ServerAdminName
	toSerialize["ldapUsersDomain"] = o.LdapUsersDomain
	toSerialize["userFilter"] = o.UserFilter
	toSerialize["userImport"] = o.UserImport
	toSerialize["adExportGroup"] = o.AdExportGroup
	toSerialize["useLdaps"] = o.UseLdaps
	if !IsNil(o.SdsImportGroup) {
		toSerialize["sdsImportGroup"] = o.SdsImportGroup
	}
	if !IsNil(o.SslFingerPrint) {
		toSerialize["sslFingerPrint"] = o.SslFingerPrint
	}
	if !IsNil(o.HomeFolderParent) {
		toSerialize["homeFolderParent"] = o.HomeFolderParent
	}
	if !IsNil(o.CreateHomeFolder) {
		toSerialize["createHomeFolder"] = o.CreateHomeFolder
	}
	return toSerialize, nil
}

func (o *ActiveDirectoryConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"alias",
		"serverIp",
		"serverPort",
		"serverAdminName",
		"ldapUsersDomain",
		"userFilter",
		"userImport",
		"adExportGroup",
		"useLdaps",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varActiveDirectoryConfig := _ActiveDirectoryConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varActiveDirectoryConfig)

	if err != nil {
		return err
	}

	*o = ActiveDirectoryConfig(varActiveDirectoryConfig)

	return err
}

type NullableActiveDirectoryConfig struct {
	value *ActiveDirectoryConfig
	isSet bool
}

func (v NullableActiveDirectoryConfig) Get() *ActiveDirectoryConfig {
	return v.value
}

func (v *NullableActiveDirectoryConfig) Set(val *ActiveDirectoryConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveDirectoryConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveDirectoryConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveDirectoryConfig(val *ActiveDirectoryConfig) *NullableActiveDirectoryConfig {
	return &NullableActiveDirectoryConfig{value: val, isSet: true}
}

func (v NullableActiveDirectoryConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveDirectoryConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
