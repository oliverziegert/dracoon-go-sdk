/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateActiveDirectoryConfigRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateActiveDirectoryConfigRequest{}

// UpdateActiveDirectoryConfigRequest Request model for updating an Active Directory configuration
type UpdateActiveDirectoryConfigRequest struct {
	// Unique name for an Active Directory configuration
	Alias *string `json:"alias,omitempty"`
	// IPv4 or IPv6 address or host name
	ServerIp *string `json:"serverIp,omitempty"`
	// Port
	ServerPort *int32 `json:"serverPort,omitempty"`
	// Distinguished Name (DN) of Active Directory administrative account
	ServerAdminName *string `json:"serverAdminName,omitempty"`
	// Password of Active Directory administrative account
	ServerAdminPassword *string `json:"serverAdminPassword,omitempty"`
	// Search scope of Active Directory; only users below this node can log on.
	LdapUsersDomain *string `json:"ldapUsersDomain,omitempty"`
	// Name of Active Directory attribute that is used as login name.
	UserFilter *string `json:"userFilter,omitempty"`
	// Determines if a DRACOON account is automatically created for a new user  who successfully logs on with his / her AD / IDP account.
	UserImport *bool `json:"userImport,omitempty"`
	// If `userImport` is set to `true`,  the user must be member of this Active Directory group to receive a newly created DRACOON account.
	AdExportGroup *string `json:"adExportGroup,omitempty"`
	// User group that is assigned to users who are created by automatic import.  Reset with `0`
	SdsImportGroup *int64 `json:"sdsImportGroup,omitempty"`
	// DEPRECATED, will be ignored  Determines whether a room is created for each user that is created by automatic import (like a home folder).  Room's name will equal the user's login name.
	CreateHomeFolder *bool `json:"createHomeFolder,omitempty"`
	// DEPRECATED, will be ignored  ID of the room in which the individual rooms for users will be created.
	HomeFolderParent *int64 `json:"homeFolderParent,omitempty"`
	// Determines whether LDAPS should be used instead of plain LDAP.
	UseLdaps *bool `json:"useLdaps,omitempty"`
	// SSL finger print of Active Directory server.  Mandatory for LDAPS connections.  Format: `Algorithm/Fingerprint`
	SslFingerPrint *string `json:"sslFingerPrint,omitempty"`
}

// NewUpdateActiveDirectoryConfigRequest instantiates a new UpdateActiveDirectoryConfigRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateActiveDirectoryConfigRequest() *UpdateActiveDirectoryConfigRequest {
	this := UpdateActiveDirectoryConfigRequest{}
	var createHomeFolder bool = false
	this.CreateHomeFolder = &createHomeFolder
	return &this
}

// NewUpdateActiveDirectoryConfigRequestWithDefaults instantiates a new UpdateActiveDirectoryConfigRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateActiveDirectoryConfigRequestWithDefaults() *UpdateActiveDirectoryConfigRequest {
	this := UpdateActiveDirectoryConfigRequest{}
	var createHomeFolder bool = false
	this.CreateHomeFolder = &createHomeFolder
	return &this
}

// GetAlias returns the Alias field value if set, zero value otherwise.
func (o *UpdateActiveDirectoryConfigRequest) GetAlias() string {
	if o == nil || IsNil(o.Alias) {
		var ret string
		return ret
	}
	return *o.Alias
}

// GetAliasOk returns a tuple with the Alias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateActiveDirectoryConfigRequest) GetAliasOk() (*string, bool) {
	if o == nil || IsNil(o.Alias) {
		return nil, false
	}
	return o.Alias, true
}

// HasAlias returns a boolean if a field has been set.
func (o *UpdateActiveDirectoryConfigRequest) HasAlias() bool {
	if o != nil && !IsNil(o.Alias) {
		return true
	}

	return false
}

// SetAlias gets a reference to the given string and assigns it to the Alias field.
func (o *UpdateActiveDirectoryConfigRequest) SetAlias(v string) {
	o.Alias = &v
}

// GetServerIp returns the ServerIp field value if set, zero value otherwise.
func (o *UpdateActiveDirectoryConfigRequest) GetServerIp() string {
	if o == nil || IsNil(o.ServerIp) {
		var ret string
		return ret
	}
	return *o.ServerIp
}

// GetServerIpOk returns a tuple with the ServerIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateActiveDirectoryConfigRequest) GetServerIpOk() (*string, bool) {
	if o == nil || IsNil(o.ServerIp) {
		return nil, false
	}
	return o.ServerIp, true
}

// HasServerIp returns a boolean if a field has been set.
func (o *UpdateActiveDirectoryConfigRequest) HasServerIp() bool {
	if o != nil && !IsNil(o.ServerIp) {
		return true
	}

	return false
}

// SetServerIp gets a reference to the given string and assigns it to the ServerIp field.
func (o *UpdateActiveDirectoryConfigRequest) SetServerIp(v string) {
	o.ServerIp = &v
}

// GetServerPort returns the ServerPort field value if set, zero value otherwise.
func (o *UpdateActiveDirectoryConfigRequest) GetServerPort() int32 {
	if o == nil || IsNil(o.ServerPort) {
		var ret int32
		return ret
	}
	return *o.ServerPort
}

// GetServerPortOk returns a tuple with the ServerPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateActiveDirectoryConfigRequest) GetServerPortOk() (*int32, bool) {
	if o == nil || IsNil(o.ServerPort) {
		return nil, false
	}
	return o.ServerPort, true
}

// HasServerPort returns a boolean if a field has been set.
func (o *UpdateActiveDirectoryConfigRequest) HasServerPort() bool {
	if o != nil && !IsNil(o.ServerPort) {
		return true
	}

	return false
}

// SetServerPort gets a reference to the given int32 and assigns it to the ServerPort field.
func (o *UpdateActiveDirectoryConfigRequest) SetServerPort(v int32) {
	o.ServerPort = &v
}

// GetServerAdminName returns the ServerAdminName field value if set, zero value otherwise.
func (o *UpdateActiveDirectoryConfigRequest) GetServerAdminName() string {
	if o == nil || IsNil(o.ServerAdminName) {
		var ret string
		return ret
	}
	return *o.ServerAdminName
}

// GetServerAdminNameOk returns a tuple with the ServerAdminName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateActiveDirectoryConfigRequest) GetServerAdminNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServerAdminName) {
		return nil, false
	}
	return o.ServerAdminName, true
}

// HasServerAdminName returns a boolean if a field has been set.
func (o *UpdateActiveDirectoryConfigRequest) HasServerAdminName() bool {
	if o != nil && !IsNil(o.ServerAdminName) {
		return true
	}

	return false
}

// SetServerAdminName gets a reference to the given string and assigns it to the ServerAdminName field.
func (o *UpdateActiveDirectoryConfigRequest) SetServerAdminName(v string) {
	o.ServerAdminName = &v
}

// GetServerAdminPassword returns the ServerAdminPassword field value if set, zero value otherwise.
func (o *UpdateActiveDirectoryConfigRequest) GetServerAdminPassword() string {
	if o == nil || IsNil(o.ServerAdminPassword) {
		var ret string
		return ret
	}
	return *o.ServerAdminPassword
}

// GetServerAdminPasswordOk returns a tuple with the ServerAdminPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateActiveDirectoryConfigRequest) GetServerAdminPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.ServerAdminPassword) {
		return nil, false
	}
	return o.ServerAdminPassword, true
}

// HasServerAdminPassword returns a boolean if a field has been set.
func (o *UpdateActiveDirectoryConfigRequest) HasServerAdminPassword() bool {
	if o != nil && !IsNil(o.ServerAdminPassword) {
		return true
	}

	return false
}

// SetServerAdminPassword gets a reference to the given string and assigns it to the ServerAdminPassword field.
func (o *UpdateActiveDirectoryConfigRequest) SetServerAdminPassword(v string) {
	o.ServerAdminPassword = &v
}

// GetLdapUsersDomain returns the LdapUsersDomain field value if set, zero value otherwise.
func (o *UpdateActiveDirectoryConfigRequest) GetLdapUsersDomain() string {
	if o == nil || IsNil(o.LdapUsersDomain) {
		var ret string
		return ret
	}
	return *o.LdapUsersDomain
}

// GetLdapUsersDomainOk returns a tuple with the LdapUsersDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateActiveDirectoryConfigRequest) GetLdapUsersDomainOk() (*string, bool) {
	if o == nil || IsNil(o.LdapUsersDomain) {
		return nil, false
	}
	return o.LdapUsersDomain, true
}

// HasLdapUsersDomain returns a boolean if a field has been set.
func (o *UpdateActiveDirectoryConfigRequest) HasLdapUsersDomain() bool {
	if o != nil && !IsNil(o.LdapUsersDomain) {
		return true
	}

	return false
}

// SetLdapUsersDomain gets a reference to the given string and assigns it to the LdapUsersDomain field.
func (o *UpdateActiveDirectoryConfigRequest) SetLdapUsersDomain(v string) {
	o.LdapUsersDomain = &v
}

// GetUserFilter returns the UserFilter field value if set, zero value otherwise.
func (o *UpdateActiveDirectoryConfigRequest) GetUserFilter() string {
	if o == nil || IsNil(o.UserFilter) {
		var ret string
		return ret
	}
	return *o.UserFilter
}

// GetUserFilterOk returns a tuple with the UserFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateActiveDirectoryConfigRequest) GetUserFilterOk() (*string, bool) {
	if o == nil || IsNil(o.UserFilter) {
		return nil, false
	}
	return o.UserFilter, true
}

// HasUserFilter returns a boolean if a field has been set.
func (o *UpdateActiveDirectoryConfigRequest) HasUserFilter() bool {
	if o != nil && !IsNil(o.UserFilter) {
		return true
	}

	return false
}

// SetUserFilter gets a reference to the given string and assigns it to the UserFilter field.
func (o *UpdateActiveDirectoryConfigRequest) SetUserFilter(v string) {
	o.UserFilter = &v
}

// GetUserImport returns the UserImport field value if set, zero value otherwise.
func (o *UpdateActiveDirectoryConfigRequest) GetUserImport() bool {
	if o == nil || IsNil(o.UserImport) {
		var ret bool
		return ret
	}
	return *o.UserImport
}

// GetUserImportOk returns a tuple with the UserImport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateActiveDirectoryConfigRequest) GetUserImportOk() (*bool, bool) {
	if o == nil || IsNil(o.UserImport) {
		return nil, false
	}
	return o.UserImport, true
}

// HasUserImport returns a boolean if a field has been set.
func (o *UpdateActiveDirectoryConfigRequest) HasUserImport() bool {
	if o != nil && !IsNil(o.UserImport) {
		return true
	}

	return false
}

// SetUserImport gets a reference to the given bool and assigns it to the UserImport field.
func (o *UpdateActiveDirectoryConfigRequest) SetUserImport(v bool) {
	o.UserImport = &v
}

// GetAdExportGroup returns the AdExportGroup field value if set, zero value otherwise.
func (o *UpdateActiveDirectoryConfigRequest) GetAdExportGroup() string {
	if o == nil || IsNil(o.AdExportGroup) {
		var ret string
		return ret
	}
	return *o.AdExportGroup
}

// GetAdExportGroupOk returns a tuple with the AdExportGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateActiveDirectoryConfigRequest) GetAdExportGroupOk() (*string, bool) {
	if o == nil || IsNil(o.AdExportGroup) {
		return nil, false
	}
	return o.AdExportGroup, true
}

// HasAdExportGroup returns a boolean if a field has been set.
func (o *UpdateActiveDirectoryConfigRequest) HasAdExportGroup() bool {
	if o != nil && !IsNil(o.AdExportGroup) {
		return true
	}

	return false
}

// SetAdExportGroup gets a reference to the given string and assigns it to the AdExportGroup field.
func (o *UpdateActiveDirectoryConfigRequest) SetAdExportGroup(v string) {
	o.AdExportGroup = &v
}

// GetSdsImportGroup returns the SdsImportGroup field value if set, zero value otherwise.
func (o *UpdateActiveDirectoryConfigRequest) GetSdsImportGroup() int64 {
	if o == nil || IsNil(o.SdsImportGroup) {
		var ret int64
		return ret
	}
	return *o.SdsImportGroup
}

// GetSdsImportGroupOk returns a tuple with the SdsImportGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateActiveDirectoryConfigRequest) GetSdsImportGroupOk() (*int64, bool) {
	if o == nil || IsNil(o.SdsImportGroup) {
		return nil, false
	}
	return o.SdsImportGroup, true
}

// HasSdsImportGroup returns a boolean if a field has been set.
func (o *UpdateActiveDirectoryConfigRequest) HasSdsImportGroup() bool {
	if o != nil && !IsNil(o.SdsImportGroup) {
		return true
	}

	return false
}

// SetSdsImportGroup gets a reference to the given int64 and assigns it to the SdsImportGroup field.
func (o *UpdateActiveDirectoryConfigRequest) SetSdsImportGroup(v int64) {
	o.SdsImportGroup = &v
}

// GetCreateHomeFolder returns the CreateHomeFolder field value if set, zero value otherwise.
func (o *UpdateActiveDirectoryConfigRequest) GetCreateHomeFolder() bool {
	if o == nil || IsNil(o.CreateHomeFolder) {
		var ret bool
		return ret
	}
	return *o.CreateHomeFolder
}

// GetCreateHomeFolderOk returns a tuple with the CreateHomeFolder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateActiveDirectoryConfigRequest) GetCreateHomeFolderOk() (*bool, bool) {
	if o == nil || IsNil(o.CreateHomeFolder) {
		return nil, false
	}
	return o.CreateHomeFolder, true
}

// HasCreateHomeFolder returns a boolean if a field has been set.
func (o *UpdateActiveDirectoryConfigRequest) HasCreateHomeFolder() bool {
	if o != nil && !IsNil(o.CreateHomeFolder) {
		return true
	}

	return false
}

// SetCreateHomeFolder gets a reference to the given bool and assigns it to the CreateHomeFolder field.
func (o *UpdateActiveDirectoryConfigRequest) SetCreateHomeFolder(v bool) {
	o.CreateHomeFolder = &v
}

// GetHomeFolderParent returns the HomeFolderParent field value if set, zero value otherwise.
func (o *UpdateActiveDirectoryConfigRequest) GetHomeFolderParent() int64 {
	if o == nil || IsNil(o.HomeFolderParent) {
		var ret int64
		return ret
	}
	return *o.HomeFolderParent
}

// GetHomeFolderParentOk returns a tuple with the HomeFolderParent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateActiveDirectoryConfigRequest) GetHomeFolderParentOk() (*int64, bool) {
	if o == nil || IsNil(o.HomeFolderParent) {
		return nil, false
	}
	return o.HomeFolderParent, true
}

// HasHomeFolderParent returns a boolean if a field has been set.
func (o *UpdateActiveDirectoryConfigRequest) HasHomeFolderParent() bool {
	if o != nil && !IsNil(o.HomeFolderParent) {
		return true
	}

	return false
}

// SetHomeFolderParent gets a reference to the given int64 and assigns it to the HomeFolderParent field.
func (o *UpdateActiveDirectoryConfigRequest) SetHomeFolderParent(v int64) {
	o.HomeFolderParent = &v
}

// GetUseLdaps returns the UseLdaps field value if set, zero value otherwise.
func (o *UpdateActiveDirectoryConfigRequest) GetUseLdaps() bool {
	if o == nil || IsNil(o.UseLdaps) {
		var ret bool
		return ret
	}
	return *o.UseLdaps
}

// GetUseLdapsOk returns a tuple with the UseLdaps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateActiveDirectoryConfigRequest) GetUseLdapsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseLdaps) {
		return nil, false
	}
	return o.UseLdaps, true
}

// HasUseLdaps returns a boolean if a field has been set.
func (o *UpdateActiveDirectoryConfigRequest) HasUseLdaps() bool {
	if o != nil && !IsNil(o.UseLdaps) {
		return true
	}

	return false
}

// SetUseLdaps gets a reference to the given bool and assigns it to the UseLdaps field.
func (o *UpdateActiveDirectoryConfigRequest) SetUseLdaps(v bool) {
	o.UseLdaps = &v
}

// GetSslFingerPrint returns the SslFingerPrint field value if set, zero value otherwise.
func (o *UpdateActiveDirectoryConfigRequest) GetSslFingerPrint() string {
	if o == nil || IsNil(o.SslFingerPrint) {
		var ret string
		return ret
	}
	return *o.SslFingerPrint
}

// GetSslFingerPrintOk returns a tuple with the SslFingerPrint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateActiveDirectoryConfigRequest) GetSslFingerPrintOk() (*string, bool) {
	if o == nil || IsNil(o.SslFingerPrint) {
		return nil, false
	}
	return o.SslFingerPrint, true
}

// HasSslFingerPrint returns a boolean if a field has been set.
func (o *UpdateActiveDirectoryConfigRequest) HasSslFingerPrint() bool {
	if o != nil && !IsNil(o.SslFingerPrint) {
		return true
	}

	return false
}

// SetSslFingerPrint gets a reference to the given string and assigns it to the SslFingerPrint field.
func (o *UpdateActiveDirectoryConfigRequest) SetSslFingerPrint(v string) {
	o.SslFingerPrint = &v
}

func (o UpdateActiveDirectoryConfigRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateActiveDirectoryConfigRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Alias) {
		toSerialize["alias"] = o.Alias
	}
	if !IsNil(o.ServerIp) {
		toSerialize["serverIp"] = o.ServerIp
	}
	if !IsNil(o.ServerPort) {
		toSerialize["serverPort"] = o.ServerPort
	}
	if !IsNil(o.ServerAdminName) {
		toSerialize["serverAdminName"] = o.ServerAdminName
	}
	if !IsNil(o.ServerAdminPassword) {
		toSerialize["serverAdminPassword"] = o.ServerAdminPassword
	}
	if !IsNil(o.LdapUsersDomain) {
		toSerialize["ldapUsersDomain"] = o.LdapUsersDomain
	}
	if !IsNil(o.UserFilter) {
		toSerialize["userFilter"] = o.UserFilter
	}
	if !IsNil(o.UserImport) {
		toSerialize["userImport"] = o.UserImport
	}
	if !IsNil(o.AdExportGroup) {
		toSerialize["adExportGroup"] = o.AdExportGroup
	}
	if !IsNil(o.SdsImportGroup) {
		toSerialize["sdsImportGroup"] = o.SdsImportGroup
	}
	if !IsNil(o.CreateHomeFolder) {
		toSerialize["createHomeFolder"] = o.CreateHomeFolder
	}
	if !IsNil(o.HomeFolderParent) {
		toSerialize["homeFolderParent"] = o.HomeFolderParent
	}
	if !IsNil(o.UseLdaps) {
		toSerialize["useLdaps"] = o.UseLdaps
	}
	if !IsNil(o.SslFingerPrint) {
		toSerialize["sslFingerPrint"] = o.SslFingerPrint
	}
	return toSerialize, nil
}

type NullableUpdateActiveDirectoryConfigRequest struct {
	value *UpdateActiveDirectoryConfigRequest
	isSet bool
}

func (v NullableUpdateActiveDirectoryConfigRequest) Get() *UpdateActiveDirectoryConfigRequest {
	return v.value
}

func (v *NullableUpdateActiveDirectoryConfigRequest) Set(val *UpdateActiveDirectoryConfigRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateActiveDirectoryConfigRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateActiveDirectoryConfigRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateActiveDirectoryConfigRequest(val *UpdateActiveDirectoryConfigRequest) *NullableUpdateActiveDirectoryConfigRequest {
	return &NullableUpdateActiveDirectoryConfigRequest{value: val, isSet: true}
}

func (v NullableUpdateActiveDirectoryConfigRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateActiveDirectoryConfigRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
