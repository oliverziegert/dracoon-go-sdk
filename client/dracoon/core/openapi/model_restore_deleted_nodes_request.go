/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the RestoreDeletedNodesRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestoreDeletedNodesRequest{}

// RestoreDeletedNodesRequest Request model for restoring deleted nodes
type RestoreDeletedNodesRequest struct {
	// List of deleted node IDs
	DeletedNodeIds []int64 `json:"deletedNodeIds"`
	// Node conflict resolution strategy:  * `autorename`  * `overwrite`  * `fail`
	ResolutionStrategy *string `json:"resolutionStrategy,omitempty"`
	// Preserve Download Share Links and point them to the new node.
	KeepShareLinks *bool `json:"keepShareLinks,omitempty"`
	// Node parent ID  (default: previous parent ID)
	ParentId *int64 `json:"parentId,omitempty"`
}

type _RestoreDeletedNodesRequest RestoreDeletedNodesRequest

// NewRestoreDeletedNodesRequest instantiates a new RestoreDeletedNodesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestoreDeletedNodesRequest(deletedNodeIds []int64) *RestoreDeletedNodesRequest {
	this := RestoreDeletedNodesRequest{}
	this.DeletedNodeIds = deletedNodeIds
	var resolutionStrategy string = "autorename"
	this.ResolutionStrategy = &resolutionStrategy
	var keepShareLinks bool = false
	this.KeepShareLinks = &keepShareLinks
	return &this
}

// NewRestoreDeletedNodesRequestWithDefaults instantiates a new RestoreDeletedNodesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestoreDeletedNodesRequestWithDefaults() *RestoreDeletedNodesRequest {
	this := RestoreDeletedNodesRequest{}
	var resolutionStrategy string = "autorename"
	this.ResolutionStrategy = &resolutionStrategy
	var keepShareLinks bool = false
	this.KeepShareLinks = &keepShareLinks
	return &this
}

// GetDeletedNodeIds returns the DeletedNodeIds field value
func (o *RestoreDeletedNodesRequest) GetDeletedNodeIds() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}

	return o.DeletedNodeIds
}

// GetDeletedNodeIdsOk returns a tuple with the DeletedNodeIds field value
// and a boolean to check if the value has been set.
func (o *RestoreDeletedNodesRequest) GetDeletedNodeIdsOk() ([]int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeletedNodeIds, true
}

// SetDeletedNodeIds sets field value
func (o *RestoreDeletedNodesRequest) SetDeletedNodeIds(v []int64) {
	o.DeletedNodeIds = v
}

// GetResolutionStrategy returns the ResolutionStrategy field value if set, zero value otherwise.
func (o *RestoreDeletedNodesRequest) GetResolutionStrategy() string {
	if o == nil || IsNil(o.ResolutionStrategy) {
		var ret string
		return ret
	}
	return *o.ResolutionStrategy
}

// GetResolutionStrategyOk returns a tuple with the ResolutionStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreDeletedNodesRequest) GetResolutionStrategyOk() (*string, bool) {
	if o == nil || IsNil(o.ResolutionStrategy) {
		return nil, false
	}
	return o.ResolutionStrategy, true
}

// HasResolutionStrategy returns a boolean if a field has been set.
func (o *RestoreDeletedNodesRequest) HasResolutionStrategy() bool {
	if o != nil && !IsNil(o.ResolutionStrategy) {
		return true
	}

	return false
}

// SetResolutionStrategy gets a reference to the given string and assigns it to the ResolutionStrategy field.
func (o *RestoreDeletedNodesRequest) SetResolutionStrategy(v string) {
	o.ResolutionStrategy = &v
}

// GetKeepShareLinks returns the KeepShareLinks field value if set, zero value otherwise.
func (o *RestoreDeletedNodesRequest) GetKeepShareLinks() bool {
	if o == nil || IsNil(o.KeepShareLinks) {
		var ret bool
		return ret
	}
	return *o.KeepShareLinks
}

// GetKeepShareLinksOk returns a tuple with the KeepShareLinks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreDeletedNodesRequest) GetKeepShareLinksOk() (*bool, bool) {
	if o == nil || IsNil(o.KeepShareLinks) {
		return nil, false
	}
	return o.KeepShareLinks, true
}

// HasKeepShareLinks returns a boolean if a field has been set.
func (o *RestoreDeletedNodesRequest) HasKeepShareLinks() bool {
	if o != nil && !IsNil(o.KeepShareLinks) {
		return true
	}

	return false
}

// SetKeepShareLinks gets a reference to the given bool and assigns it to the KeepShareLinks field.
func (o *RestoreDeletedNodesRequest) SetKeepShareLinks(v bool) {
	o.KeepShareLinks = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *RestoreDeletedNodesRequest) GetParentId() int64 {
	if o == nil || IsNil(o.ParentId) {
		var ret int64
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreDeletedNodesRequest) GetParentIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ParentId) {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *RestoreDeletedNodesRequest) HasParentId() bool {
	if o != nil && !IsNil(o.ParentId) {
		return true
	}

	return false
}

// SetParentId gets a reference to the given int64 and assigns it to the ParentId field.
func (o *RestoreDeletedNodesRequest) SetParentId(v int64) {
	o.ParentId = &v
}

func (o RestoreDeletedNodesRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestoreDeletedNodesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["deletedNodeIds"] = o.DeletedNodeIds
	if !IsNil(o.ResolutionStrategy) {
		toSerialize["resolutionStrategy"] = o.ResolutionStrategy
	}
	if !IsNil(o.KeepShareLinks) {
		toSerialize["keepShareLinks"] = o.KeepShareLinks
	}
	if !IsNil(o.ParentId) {
		toSerialize["parentId"] = o.ParentId
	}
	return toSerialize, nil
}

func (o *RestoreDeletedNodesRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"deletedNodeIds",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRestoreDeletedNodesRequest := _RestoreDeletedNodesRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRestoreDeletedNodesRequest)

	if err != nil {
		return err
	}

	*o = RestoreDeletedNodesRequest(varRestoreDeletedNodesRequest)

	return err
}

type NullableRestoreDeletedNodesRequest struct {
	value *RestoreDeletedNodesRequest
	isSet bool
}

func (v NullableRestoreDeletedNodesRequest) Get() *RestoreDeletedNodesRequest {
	return v.value
}

func (v *NullableRestoreDeletedNodesRequest) Set(val *RestoreDeletedNodesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRestoreDeletedNodesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRestoreDeletedNodesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestoreDeletedNodesRequest(val *RestoreDeletedNodesRequest) *NullableRestoreDeletedNodesRequest {
	return &NullableRestoreDeletedNodesRequest{value: val, isSet: true}
}

func (v NullableRestoreDeletedNodesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestoreDeletedNodesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
