/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateWebhookRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateWebhookRequest{}

// UpdateWebhookRequest Request model for updating a webhook
type UpdateWebhookRequest struct {
	// Name
	Name *string `json:"name,omitempty"`
	// List of names of event types
	EventTypeNames []string `json:"eventTypeNames,omitempty"`
	// URL (must begin with the `HTTPS` scheme)
	Url *string `json:"url,omitempty"`
	// Secret; used for event message signatures
	Secret *string `json:"secret,omitempty"`
	// Is enabled
	IsEnabled *bool `json:"isEnabled,omitempty"`
	// If set to true, an example event is being created
	TriggerExampleEvent *bool `json:"triggerExampleEvent,omitempty"`
}

// NewUpdateWebhookRequest instantiates a new UpdateWebhookRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateWebhookRequest() *UpdateWebhookRequest {
	this := UpdateWebhookRequest{}
	return &this
}

// NewUpdateWebhookRequestWithDefaults instantiates a new UpdateWebhookRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateWebhookRequestWithDefaults() *UpdateWebhookRequest {
	this := UpdateWebhookRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateWebhookRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWebhookRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateWebhookRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateWebhookRequest) SetName(v string) {
	o.Name = &v
}

// GetEventTypeNames returns the EventTypeNames field value if set, zero value otherwise.
func (o *UpdateWebhookRequest) GetEventTypeNames() []string {
	if o == nil || IsNil(o.EventTypeNames) {
		var ret []string
		return ret
	}
	return o.EventTypeNames
}

// GetEventTypeNamesOk returns a tuple with the EventTypeNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWebhookRequest) GetEventTypeNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.EventTypeNames) {
		return nil, false
	}
	return o.EventTypeNames, true
}

// HasEventTypeNames returns a boolean if a field has been set.
func (o *UpdateWebhookRequest) HasEventTypeNames() bool {
	if o != nil && !IsNil(o.EventTypeNames) {
		return true
	}

	return false
}

// SetEventTypeNames gets a reference to the given []string and assigns it to the EventTypeNames field.
func (o *UpdateWebhookRequest) SetEventTypeNames(v []string) {
	o.EventTypeNames = v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *UpdateWebhookRequest) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWebhookRequest) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *UpdateWebhookRequest) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *UpdateWebhookRequest) SetUrl(v string) {
	o.Url = &v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *UpdateWebhookRequest) GetSecret() string {
	if o == nil || IsNil(o.Secret) {
		var ret string
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWebhookRequest) GetSecretOk() (*string, bool) {
	if o == nil || IsNil(o.Secret) {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *UpdateWebhookRequest) HasSecret() bool {
	if o != nil && !IsNil(o.Secret) {
		return true
	}

	return false
}

// SetSecret gets a reference to the given string and assigns it to the Secret field.
func (o *UpdateWebhookRequest) SetSecret(v string) {
	o.Secret = &v
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise.
func (o *UpdateWebhookRequest) GetIsEnabled() bool {
	if o == nil || IsNil(o.IsEnabled) {
		var ret bool
		return ret
	}
	return *o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWebhookRequest) GetIsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEnabled) {
		return nil, false
	}
	return o.IsEnabled, true
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *UpdateWebhookRequest) HasIsEnabled() bool {
	if o != nil && !IsNil(o.IsEnabled) {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given bool and assigns it to the IsEnabled field.
func (o *UpdateWebhookRequest) SetIsEnabled(v bool) {
	o.IsEnabled = &v
}

// GetTriggerExampleEvent returns the TriggerExampleEvent field value if set, zero value otherwise.
func (o *UpdateWebhookRequest) GetTriggerExampleEvent() bool {
	if o == nil || IsNil(o.TriggerExampleEvent) {
		var ret bool
		return ret
	}
	return *o.TriggerExampleEvent
}

// GetTriggerExampleEventOk returns a tuple with the TriggerExampleEvent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWebhookRequest) GetTriggerExampleEventOk() (*bool, bool) {
	if o == nil || IsNil(o.TriggerExampleEvent) {
		return nil, false
	}
	return o.TriggerExampleEvent, true
}

// HasTriggerExampleEvent returns a boolean if a field has been set.
func (o *UpdateWebhookRequest) HasTriggerExampleEvent() bool {
	if o != nil && !IsNil(o.TriggerExampleEvent) {
		return true
	}

	return false
}

// SetTriggerExampleEvent gets a reference to the given bool and assigns it to the TriggerExampleEvent field.
func (o *UpdateWebhookRequest) SetTriggerExampleEvent(v bool) {
	o.TriggerExampleEvent = &v
}

func (o UpdateWebhookRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateWebhookRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.EventTypeNames) {
		toSerialize["eventTypeNames"] = o.EventTypeNames
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Secret) {
		toSerialize["secret"] = o.Secret
	}
	if !IsNil(o.IsEnabled) {
		toSerialize["isEnabled"] = o.IsEnabled
	}
	if !IsNil(o.TriggerExampleEvent) {
		toSerialize["triggerExampleEvent"] = o.TriggerExampleEvent
	}
	return toSerialize, nil
}

type NullableUpdateWebhookRequest struct {
	value *UpdateWebhookRequest
	isSet bool
}

func (v NullableUpdateWebhookRequest) Get() *UpdateWebhookRequest {
	return v.value
}

func (v *NullableUpdateWebhookRequest) Set(val *UpdateWebhookRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateWebhookRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateWebhookRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateWebhookRequest(val *UpdateWebhookRequest) *NullableUpdateWebhookRequest {
	return &NullableUpdateWebhookRequest{value: val, isSet: true}
}

func (v NullableUpdateWebhookRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateWebhookRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
