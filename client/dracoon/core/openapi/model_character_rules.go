/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CharacterRules type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CharacterRules{}

// CharacterRules Password character rules
type CharacterRules struct {
	// Characters which a password must contain:  * `alpha` - at least one alphabetical character (`uppercase` OR `lowercase`)  * `uppercase` - at least one uppercase character  * `lowercase` - at least one lowercase character  * `numeric` - at least one numeric character  * `special` - at least one special character (letters and digits excluded)  * `all` - combination of `uppercase`, `lowercase`, `numeric` and `special` (available only in request models)  * `none` - none of the above
	MustContainCharacters []string `json:"mustContainCharacters"`
	// Number of characteristics to enforce  e.g. from `[\"uppercase\", \"lowercase\", \"numeric\", \"special\"]`  all 4 character sets can be enforced; but also only 2 of them
	NumberOfCharacteristicsToEnforce int32 `json:"numberOfCharacteristicsToEnforce"`
}

type _CharacterRules CharacterRules

// NewCharacterRules instantiates a new CharacterRules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCharacterRules(mustContainCharacters []string, numberOfCharacteristicsToEnforce int32) *CharacterRules {
	this := CharacterRules{}
	this.MustContainCharacters = mustContainCharacters
	this.NumberOfCharacteristicsToEnforce = numberOfCharacteristicsToEnforce
	return &this
}

// NewCharacterRulesWithDefaults instantiates a new CharacterRules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCharacterRulesWithDefaults() *CharacterRules {
	this := CharacterRules{}
	return &this
}

// GetMustContainCharacters returns the MustContainCharacters field value
func (o *CharacterRules) GetMustContainCharacters() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.MustContainCharacters
}

// GetMustContainCharactersOk returns a tuple with the MustContainCharacters field value
// and a boolean to check if the value has been set.
func (o *CharacterRules) GetMustContainCharactersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MustContainCharacters, true
}

// SetMustContainCharacters sets field value
func (o *CharacterRules) SetMustContainCharacters(v []string) {
	o.MustContainCharacters = v
}

// GetNumberOfCharacteristicsToEnforce returns the NumberOfCharacteristicsToEnforce field value
func (o *CharacterRules) GetNumberOfCharacteristicsToEnforce() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumberOfCharacteristicsToEnforce
}

// GetNumberOfCharacteristicsToEnforceOk returns a tuple with the NumberOfCharacteristicsToEnforce field value
// and a boolean to check if the value has been set.
func (o *CharacterRules) GetNumberOfCharacteristicsToEnforceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumberOfCharacteristicsToEnforce, true
}

// SetNumberOfCharacteristicsToEnforce sets field value
func (o *CharacterRules) SetNumberOfCharacteristicsToEnforce(v int32) {
	o.NumberOfCharacteristicsToEnforce = v
}

func (o CharacterRules) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CharacterRules) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["mustContainCharacters"] = o.MustContainCharacters
	toSerialize["numberOfCharacteristicsToEnforce"] = o.NumberOfCharacteristicsToEnforce
	return toSerialize, nil
}

func (o *CharacterRules) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mustContainCharacters",
		"numberOfCharacteristicsToEnforce",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCharacterRules := _CharacterRules{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCharacterRules)

	if err != nil {
		return err
	}

	*o = CharacterRules(varCharacterRules)

	return err
}

type NullableCharacterRules struct {
	value *CharacterRules
	isSet bool
}

func (v NullableCharacterRules) Get() *CharacterRules {
	return v.value
}

func (v *NullableCharacterRules) Set(val *CharacterRules) {
	v.value = val
	v.isSet = true
}

func (v NullableCharacterRules) IsSet() bool {
	return v.isSet
}

func (v *NullableCharacterRules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCharacterRules(val *CharacterRules) *NullableCharacterRules {
	return &NullableCharacterRules{value: val, isSet: true}
}

func (v NullableCharacterRules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCharacterRules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
