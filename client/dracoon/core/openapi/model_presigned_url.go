/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PresignedUrl type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PresignedUrl{}

// PresignedUrl Presigned URL information
type PresignedUrl struct {
	// S3 presigned URL
	Url string `json:"url"`
	// Corresponding part number
	PartNumber int32 `json:"partNumber"`
}

type _PresignedUrl PresignedUrl

// NewPresignedUrl instantiates a new PresignedUrl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPresignedUrl(url string, partNumber int32) *PresignedUrl {
	this := PresignedUrl{}
	this.Url = url
	this.PartNumber = partNumber
	return &this
}

// NewPresignedUrlWithDefaults instantiates a new PresignedUrl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPresignedUrlWithDefaults() *PresignedUrl {
	this := PresignedUrl{}
	return &this
}

// GetUrl returns the Url field value
func (o *PresignedUrl) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *PresignedUrl) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *PresignedUrl) SetUrl(v string) {
	o.Url = v
}

// GetPartNumber returns the PartNumber field value
func (o *PresignedUrl) GetPartNumber() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PartNumber
}

// GetPartNumberOk returns a tuple with the PartNumber field value
// and a boolean to check if the value has been set.
func (o *PresignedUrl) GetPartNumberOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PartNumber, true
}

// SetPartNumber sets field value
func (o *PresignedUrl) SetPartNumber(v int32) {
	o.PartNumber = v
}

func (o PresignedUrl) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PresignedUrl) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["url"] = o.Url
	toSerialize["partNumber"] = o.PartNumber
	return toSerialize, nil
}

func (o *PresignedUrl) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"url",
		"partNumber",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPresignedUrl := _PresignedUrl{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPresignedUrl)

	if err != nil {
		return err
	}

	*o = PresignedUrl(varPresignedUrl)

	return err
}

type NullablePresignedUrl struct {
	value *PresignedUrl
	isSet bool
}

func (v NullablePresignedUrl) Get() *PresignedUrl {
	return v.value
}

func (v *NullablePresignedUrl) Set(val *PresignedUrl) {
	v.value = val
	v.isSet = true
}

func (v NullablePresignedUrl) IsSet() bool {
	return v.isSet
}

func (v *NullablePresignedUrl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePresignedUrl(val *PresignedUrl) *NullablePresignedUrl {
	return &NullablePresignedUrl{value: val, isSet: true}
}

func (v NullablePresignedUrl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePresignedUrl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
