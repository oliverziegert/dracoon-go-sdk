/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserIdFileIdItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserIdFileIdItem{}

// UserIdFileIdItem User ID and file ID mapping
type UserIdFileIdItem struct {
	// Unique identifier for the user
	UserId *int64 `json:"userId,omitempty"`
	// File ID
	FileId *int64 `json:"fileId,omitempty"`
}

// NewUserIdFileIdItem instantiates a new UserIdFileIdItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserIdFileIdItem() *UserIdFileIdItem {
	this := UserIdFileIdItem{}
	return &this
}

// NewUserIdFileIdItemWithDefaults instantiates a new UserIdFileIdItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserIdFileIdItemWithDefaults() *UserIdFileIdItem {
	this := UserIdFileIdItem{}
	return &this
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *UserIdFileIdItem) GetUserId() int64 {
	if o == nil || IsNil(o.UserId) {
		var ret int64
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserIdFileIdItem) GetUserIdOk() (*int64, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *UserIdFileIdItem) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int64 and assigns it to the UserId field.
func (o *UserIdFileIdItem) SetUserId(v int64) {
	o.UserId = &v
}

// GetFileId returns the FileId field value if set, zero value otherwise.
func (o *UserIdFileIdItem) GetFileId() int64 {
	if o == nil || IsNil(o.FileId) {
		var ret int64
		return ret
	}
	return *o.FileId
}

// GetFileIdOk returns a tuple with the FileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserIdFileIdItem) GetFileIdOk() (*int64, bool) {
	if o == nil || IsNil(o.FileId) {
		return nil, false
	}
	return o.FileId, true
}

// HasFileId returns a boolean if a field has been set.
func (o *UserIdFileIdItem) HasFileId() bool {
	if o != nil && !IsNil(o.FileId) {
		return true
	}

	return false
}

// SetFileId gets a reference to the given int64 and assigns it to the FileId field.
func (o *UserIdFileIdItem) SetFileId(v int64) {
	o.FileId = &v
}

func (o UserIdFileIdItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserIdFileIdItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	if !IsNil(o.FileId) {
		toSerialize["fileId"] = o.FileId
	}
	return toSerialize, nil
}

type NullableUserIdFileIdItem struct {
	value *UserIdFileIdItem
	isSet bool
}

func (v NullableUserIdFileIdItem) Get() *UserIdFileIdItem {
	return v.value
}

func (v *NullableUserIdFileIdItem) Set(val *UserIdFileIdItem) {
	v.value = val
	v.isSet = true
}

func (v NullableUserIdFileIdItem) IsSet() bool {
	return v.isSet
}

func (v *NullableUserIdFileIdItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserIdFileIdItem(val *UserIdFileIdItem) *NullableUserIdFileIdItem {
	return &NullableUserIdFileIdItem{value: val, isSet: true}
}

func (v NullableUserIdFileIdItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserIdFileIdItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
