/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FileFileKeys type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileFileKeys{}

// FileFileKeys File key information
type FileFileKeys struct {
	// File ID
	Id               *int64            `json:"id,omitempty"`
	FileKeyContainer *FileKeyContainer `json:"fileKeyContainer,omitempty"`
}

// NewFileFileKeys instantiates a new FileFileKeys object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileFileKeys() *FileFileKeys {
	this := FileFileKeys{}
	return &this
}

// NewFileFileKeysWithDefaults instantiates a new FileFileKeys object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileFileKeysWithDefaults() *FileFileKeys {
	this := FileFileKeys{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FileFileKeys) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileFileKeys) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FileFileKeys) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *FileFileKeys) SetId(v int64) {
	o.Id = &v
}

// GetFileKeyContainer returns the FileKeyContainer field value if set, zero value otherwise.
func (o *FileFileKeys) GetFileKeyContainer() FileKeyContainer {
	if o == nil || IsNil(o.FileKeyContainer) {
		var ret FileKeyContainer
		return ret
	}
	return *o.FileKeyContainer
}

// GetFileKeyContainerOk returns a tuple with the FileKeyContainer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileFileKeys) GetFileKeyContainerOk() (*FileKeyContainer, bool) {
	if o == nil || IsNil(o.FileKeyContainer) {
		return nil, false
	}
	return o.FileKeyContainer, true
}

// HasFileKeyContainer returns a boolean if a field has been set.
func (o *FileFileKeys) HasFileKeyContainer() bool {
	if o != nil && !IsNil(o.FileKeyContainer) {
		return true
	}

	return false
}

// SetFileKeyContainer gets a reference to the given FileKeyContainer and assigns it to the FileKeyContainer field.
func (o *FileFileKeys) SetFileKeyContainer(v FileKeyContainer) {
	o.FileKeyContainer = &v
}

func (o FileFileKeys) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileFileKeys) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.FileKeyContainer) {
		toSerialize["fileKeyContainer"] = o.FileKeyContainer
	}
	return toSerialize, nil
}

type NullableFileFileKeys struct {
	value *FileFileKeys
	isSet bool
}

func (v NullableFileFileKeys) Get() *FileFileKeys {
	return v.value
}

func (v *NullableFileFileKeys) Set(val *FileFileKeys) {
	v.value = val
	v.isSet = true
}

func (v NullableFileFileKeys) IsSet() bool {
	return v.isSet
}

func (v *NullableFileFileKeys) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileFileKeys(val *FileFileKeys) *NullableFileFileKeys {
	return &NullableFileFileKeys{value: val, isSet: true}
}

func (v NullableFileFileKeys) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileFileKeys) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
