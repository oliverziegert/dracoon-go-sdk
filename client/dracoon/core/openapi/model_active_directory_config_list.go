/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ActiveDirectoryConfigList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActiveDirectoryConfigList{}

// ActiveDirectoryConfigList List of Active Directory configurations
type ActiveDirectoryConfigList struct {
	// List of Active Directory configurations
	Items []ActiveDirectoryConfig `json:"items"`
}

type _ActiveDirectoryConfigList ActiveDirectoryConfigList

// NewActiveDirectoryConfigList instantiates a new ActiveDirectoryConfigList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveDirectoryConfigList(items []ActiveDirectoryConfig) *ActiveDirectoryConfigList {
	this := ActiveDirectoryConfigList{}
	this.Items = items
	return &this
}

// NewActiveDirectoryConfigListWithDefaults instantiates a new ActiveDirectoryConfigList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveDirectoryConfigListWithDefaults() *ActiveDirectoryConfigList {
	this := ActiveDirectoryConfigList{}
	return &this
}

// GetItems returns the Items field value
func (o *ActiveDirectoryConfigList) GetItems() []ActiveDirectoryConfig {
	if o == nil {
		var ret []ActiveDirectoryConfig
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryConfigList) GetItemsOk() ([]ActiveDirectoryConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *ActiveDirectoryConfigList) SetItems(v []ActiveDirectoryConfig) {
	o.Items = v
}

func (o ActiveDirectoryConfigList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActiveDirectoryConfigList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["items"] = o.Items
	return toSerialize, nil
}

func (o *ActiveDirectoryConfigList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"items",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varActiveDirectoryConfigList := _ActiveDirectoryConfigList{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varActiveDirectoryConfigList)

	if err != nil {
		return err
	}

	*o = ActiveDirectoryConfigList(varActiveDirectoryConfigList)

	return err
}

type NullableActiveDirectoryConfigList struct {
	value *ActiveDirectoryConfigList
	isSet bool
}

func (v NullableActiveDirectoryConfigList) Get() *ActiveDirectoryConfigList {
	return v.value
}

func (v *NullableActiveDirectoryConfigList) Set(val *ActiveDirectoryConfigList) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveDirectoryConfigList) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveDirectoryConfigList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveDirectoryConfigList(val *ActiveDirectoryConfigList) *NullableActiveDirectoryConfigList {
	return &NullableActiveDirectoryConfigList{value: val, isSet: true}
}

func (v NullableActiveDirectoryConfigList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveDirectoryConfigList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
