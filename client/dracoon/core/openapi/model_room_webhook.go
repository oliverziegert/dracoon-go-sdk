/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the RoomWebhook type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomWebhook{}

// RoomWebhook Webhook information
type RoomWebhook struct {
	// Determines whether webhook is assigned to the room.
	IsAssigned bool    `json:"isAssigned"`
	Webhook    Webhook `json:"webhook"`
}

type _RoomWebhook RoomWebhook

// NewRoomWebhook instantiates a new RoomWebhook object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomWebhook(isAssigned bool, webhook Webhook) *RoomWebhook {
	this := RoomWebhook{}
	this.IsAssigned = isAssigned
	this.Webhook = webhook
	return &this
}

// NewRoomWebhookWithDefaults instantiates a new RoomWebhook object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomWebhookWithDefaults() *RoomWebhook {
	this := RoomWebhook{}
	return &this
}

// GetIsAssigned returns the IsAssigned field value
func (o *RoomWebhook) GetIsAssigned() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsAssigned
}

// GetIsAssignedOk returns a tuple with the IsAssigned field value
// and a boolean to check if the value has been set.
func (o *RoomWebhook) GetIsAssignedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsAssigned, true
}

// SetIsAssigned sets field value
func (o *RoomWebhook) SetIsAssigned(v bool) {
	o.IsAssigned = v
}

// GetWebhook returns the Webhook field value
func (o *RoomWebhook) GetWebhook() Webhook {
	if o == nil {
		var ret Webhook
		return ret
	}

	return o.Webhook
}

// GetWebhookOk returns a tuple with the Webhook field value
// and a boolean to check if the value has been set.
func (o *RoomWebhook) GetWebhookOk() (*Webhook, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Webhook, true
}

// SetWebhook sets field value
func (o *RoomWebhook) SetWebhook(v Webhook) {
	o.Webhook = v
}

func (o RoomWebhook) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomWebhook) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["isAssigned"] = o.IsAssigned
	toSerialize["webhook"] = o.Webhook
	return toSerialize, nil
}

func (o *RoomWebhook) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"isAssigned",
		"webhook",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRoomWebhook := _RoomWebhook{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRoomWebhook)

	if err != nil {
		return err
	}

	*o = RoomWebhook(varRoomWebhook)

	return err
}

type NullableRoomWebhook struct {
	value *RoomWebhook
	isSet bool
}

func (v NullableRoomWebhook) Get() *RoomWebhook {
	return v.value
}

func (v *NullableRoomWebhook) Set(val *RoomWebhook) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomWebhook) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomWebhook) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomWebhook(val *RoomWebhook) *NullableRoomWebhook {
	return &NullableRoomWebhook{value: val, isSet: true}
}

func (v NullableRoomWebhook) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomWebhook) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
