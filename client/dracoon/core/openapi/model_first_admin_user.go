/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the FirstAdminUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FirstAdminUser{}

// FirstAdminUser First administrator user
type FirstAdminUser struct {
	// User first name
	FirstName string `json:"firstName"`
	// User last name
	LastName string `json:"lastName"`
	// &#128640; Since v4.13.0  Username
	UserName *string       `json:"userName,omitempty"`
	AuthData *UserAuthData `json:"authData,omitempty"`
	// IETF language tag
	ReceiverLanguage *string `json:"receiverLanguage,omitempty"`
	// Notify user about his new account  * default: `true` for `basic` auth type  * default: `false` for `active_directory`, `openid` auth types
	NotifyUser *bool `json:"notifyUser,omitempty"`
	// Email
	Email *string `json:"email,omitempty"`
	// Phone number
	Phone *string `json:"phone,omitempty"`
	// &#128679; Deprecated since v4.18.0  Job title
	// Deprecated
	Title *string `json:"title,omitempty"`
	// &#128679; Deprecated since v4.7.0  Language ID or ISO 639-1 code
	// Deprecated
	Language *string `json:"language,omitempty"`
	// &#128679; Deprecated since v4.13.0  Authentication methods:  * `sql`  * `active_directory`  * `openid`  use `authData` instead
	// Deprecated
	AuthMethods []UserAuthMethod `json:"authMethods,omitempty"`
	// &#128679; Deprecated since v4.13.0  If `true`, the user must change the `userName` at the first login.
	// Deprecated
	NeedsToChangeUserName *bool `json:"needsToChangeUserName,omitempty"`
	// &#128679; Deprecated since v4.13.0  An initial password may be preset  use `authData` instead
	// Deprecated
	Password *string `json:"password,omitempty"`
	// &#128679; Deprecated since v4.13.0  Determines whether user has to change his / her initial password.  use `authDate.mustChangePassword` instead
	// Deprecated
	NeedsToChangePassword *bool `json:"needsToChangePassword,omitempty"`
	// &#128679; Deprecated since v4.13.0  User login name
	// Deprecated
	Login *string `json:"login,omitempty"`
	// &#128679; Deprecated since v4.12.0  Gender
	// Deprecated
	Gender *string `json:"gender,omitempty"`
}

type _FirstAdminUser FirstAdminUser

// NewFirstAdminUser instantiates a new FirstAdminUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFirstAdminUser(firstName string, lastName string) *FirstAdminUser {
	this := FirstAdminUser{}
	this.FirstName = firstName
	this.LastName = lastName
	var needsToChangeUserName bool = false
	this.NeedsToChangeUserName = &needsToChangeUserName
	var gender string = "n"
	this.Gender = &gender
	return &this
}

// NewFirstAdminUserWithDefaults instantiates a new FirstAdminUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFirstAdminUserWithDefaults() *FirstAdminUser {
	this := FirstAdminUser{}
	var needsToChangeUserName bool = false
	this.NeedsToChangeUserName = &needsToChangeUserName
	var gender string = "n"
	this.Gender = &gender
	return &this
}

// GetFirstName returns the FirstName field value
func (o *FirstAdminUser) GetFirstName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value
// and a boolean to check if the value has been set.
func (o *FirstAdminUser) GetFirstNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstName, true
}

// SetFirstName sets field value
func (o *FirstAdminUser) SetFirstName(v string) {
	o.FirstName = v
}

// GetLastName returns the LastName field value
func (o *FirstAdminUser) GetLastName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value
// and a boolean to check if the value has been set.
func (o *FirstAdminUser) GetLastNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastName, true
}

// SetLastName sets field value
func (o *FirstAdminUser) SetLastName(v string) {
	o.LastName = v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *FirstAdminUser) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirstAdminUser) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *FirstAdminUser) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *FirstAdminUser) SetUserName(v string) {
	o.UserName = &v
}

// GetAuthData returns the AuthData field value if set, zero value otherwise.
func (o *FirstAdminUser) GetAuthData() UserAuthData {
	if o == nil || IsNil(o.AuthData) {
		var ret UserAuthData
		return ret
	}
	return *o.AuthData
}

// GetAuthDataOk returns a tuple with the AuthData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirstAdminUser) GetAuthDataOk() (*UserAuthData, bool) {
	if o == nil || IsNil(o.AuthData) {
		return nil, false
	}
	return o.AuthData, true
}

// HasAuthData returns a boolean if a field has been set.
func (o *FirstAdminUser) HasAuthData() bool {
	if o != nil && !IsNil(o.AuthData) {
		return true
	}

	return false
}

// SetAuthData gets a reference to the given UserAuthData and assigns it to the AuthData field.
func (o *FirstAdminUser) SetAuthData(v UserAuthData) {
	o.AuthData = &v
}

// GetReceiverLanguage returns the ReceiverLanguage field value if set, zero value otherwise.
func (o *FirstAdminUser) GetReceiverLanguage() string {
	if o == nil || IsNil(o.ReceiverLanguage) {
		var ret string
		return ret
	}
	return *o.ReceiverLanguage
}

// GetReceiverLanguageOk returns a tuple with the ReceiverLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirstAdminUser) GetReceiverLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.ReceiverLanguage) {
		return nil, false
	}
	return o.ReceiverLanguage, true
}

// HasReceiverLanguage returns a boolean if a field has been set.
func (o *FirstAdminUser) HasReceiverLanguage() bool {
	if o != nil && !IsNil(o.ReceiverLanguage) {
		return true
	}

	return false
}

// SetReceiverLanguage gets a reference to the given string and assigns it to the ReceiverLanguage field.
func (o *FirstAdminUser) SetReceiverLanguage(v string) {
	o.ReceiverLanguage = &v
}

// GetNotifyUser returns the NotifyUser field value if set, zero value otherwise.
func (o *FirstAdminUser) GetNotifyUser() bool {
	if o == nil || IsNil(o.NotifyUser) {
		var ret bool
		return ret
	}
	return *o.NotifyUser
}

// GetNotifyUserOk returns a tuple with the NotifyUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirstAdminUser) GetNotifyUserOk() (*bool, bool) {
	if o == nil || IsNil(o.NotifyUser) {
		return nil, false
	}
	return o.NotifyUser, true
}

// HasNotifyUser returns a boolean if a field has been set.
func (o *FirstAdminUser) HasNotifyUser() bool {
	if o != nil && !IsNil(o.NotifyUser) {
		return true
	}

	return false
}

// SetNotifyUser gets a reference to the given bool and assigns it to the NotifyUser field.
func (o *FirstAdminUser) SetNotifyUser(v bool) {
	o.NotifyUser = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *FirstAdminUser) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirstAdminUser) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *FirstAdminUser) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *FirstAdminUser) SetEmail(v string) {
	o.Email = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *FirstAdminUser) GetPhone() string {
	if o == nil || IsNil(o.Phone) {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirstAdminUser) GetPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.Phone) {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *FirstAdminUser) HasPhone() bool {
	if o != nil && !IsNil(o.Phone) {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *FirstAdminUser) SetPhone(v string) {
	o.Phone = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
// Deprecated
func (o *FirstAdminUser) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *FirstAdminUser) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *FirstAdminUser) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
// Deprecated
func (o *FirstAdminUser) SetTitle(v string) {
	o.Title = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
// Deprecated
func (o *FirstAdminUser) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *FirstAdminUser) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *FirstAdminUser) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
// Deprecated
func (o *FirstAdminUser) SetLanguage(v string) {
	o.Language = &v
}

// GetAuthMethods returns the AuthMethods field value if set, zero value otherwise.
// Deprecated
func (o *FirstAdminUser) GetAuthMethods() []UserAuthMethod {
	if o == nil || IsNil(o.AuthMethods) {
		var ret []UserAuthMethod
		return ret
	}
	return o.AuthMethods
}

// GetAuthMethodsOk returns a tuple with the AuthMethods field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *FirstAdminUser) GetAuthMethodsOk() ([]UserAuthMethod, bool) {
	if o == nil || IsNil(o.AuthMethods) {
		return nil, false
	}
	return o.AuthMethods, true
}

// HasAuthMethods returns a boolean if a field has been set.
func (o *FirstAdminUser) HasAuthMethods() bool {
	if o != nil && !IsNil(o.AuthMethods) {
		return true
	}

	return false
}

// SetAuthMethods gets a reference to the given []UserAuthMethod and assigns it to the AuthMethods field.
// Deprecated
func (o *FirstAdminUser) SetAuthMethods(v []UserAuthMethod) {
	o.AuthMethods = v
}

// GetNeedsToChangeUserName returns the NeedsToChangeUserName field value if set, zero value otherwise.
// Deprecated
func (o *FirstAdminUser) GetNeedsToChangeUserName() bool {
	if o == nil || IsNil(o.NeedsToChangeUserName) {
		var ret bool
		return ret
	}
	return *o.NeedsToChangeUserName
}

// GetNeedsToChangeUserNameOk returns a tuple with the NeedsToChangeUserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *FirstAdminUser) GetNeedsToChangeUserNameOk() (*bool, bool) {
	if o == nil || IsNil(o.NeedsToChangeUserName) {
		return nil, false
	}
	return o.NeedsToChangeUserName, true
}

// HasNeedsToChangeUserName returns a boolean if a field has been set.
func (o *FirstAdminUser) HasNeedsToChangeUserName() bool {
	if o != nil && !IsNil(o.NeedsToChangeUserName) {
		return true
	}

	return false
}

// SetNeedsToChangeUserName gets a reference to the given bool and assigns it to the NeedsToChangeUserName field.
// Deprecated
func (o *FirstAdminUser) SetNeedsToChangeUserName(v bool) {
	o.NeedsToChangeUserName = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
// Deprecated
func (o *FirstAdminUser) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *FirstAdminUser) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *FirstAdminUser) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
// Deprecated
func (o *FirstAdminUser) SetPassword(v string) {
	o.Password = &v
}

// GetNeedsToChangePassword returns the NeedsToChangePassword field value if set, zero value otherwise.
// Deprecated
func (o *FirstAdminUser) GetNeedsToChangePassword() bool {
	if o == nil || IsNil(o.NeedsToChangePassword) {
		var ret bool
		return ret
	}
	return *o.NeedsToChangePassword
}

// GetNeedsToChangePasswordOk returns a tuple with the NeedsToChangePassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *FirstAdminUser) GetNeedsToChangePasswordOk() (*bool, bool) {
	if o == nil || IsNil(o.NeedsToChangePassword) {
		return nil, false
	}
	return o.NeedsToChangePassword, true
}

// HasNeedsToChangePassword returns a boolean if a field has been set.
func (o *FirstAdminUser) HasNeedsToChangePassword() bool {
	if o != nil && !IsNil(o.NeedsToChangePassword) {
		return true
	}

	return false
}

// SetNeedsToChangePassword gets a reference to the given bool and assigns it to the NeedsToChangePassword field.
// Deprecated
func (o *FirstAdminUser) SetNeedsToChangePassword(v bool) {
	o.NeedsToChangePassword = &v
}

// GetLogin returns the Login field value if set, zero value otherwise.
// Deprecated
func (o *FirstAdminUser) GetLogin() string {
	if o == nil || IsNil(o.Login) {
		var ret string
		return ret
	}
	return *o.Login
}

// GetLoginOk returns a tuple with the Login field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *FirstAdminUser) GetLoginOk() (*string, bool) {
	if o == nil || IsNil(o.Login) {
		return nil, false
	}
	return o.Login, true
}

// HasLogin returns a boolean if a field has been set.
func (o *FirstAdminUser) HasLogin() bool {
	if o != nil && !IsNil(o.Login) {
		return true
	}

	return false
}

// SetLogin gets a reference to the given string and assigns it to the Login field.
// Deprecated
func (o *FirstAdminUser) SetLogin(v string) {
	o.Login = &v
}

// GetGender returns the Gender field value if set, zero value otherwise.
// Deprecated
func (o *FirstAdminUser) GetGender() string {
	if o == nil || IsNil(o.Gender) {
		var ret string
		return ret
	}
	return *o.Gender
}

// GetGenderOk returns a tuple with the Gender field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *FirstAdminUser) GetGenderOk() (*string, bool) {
	if o == nil || IsNil(o.Gender) {
		return nil, false
	}
	return o.Gender, true
}

// HasGender returns a boolean if a field has been set.
func (o *FirstAdminUser) HasGender() bool {
	if o != nil && !IsNil(o.Gender) {
		return true
	}

	return false
}

// SetGender gets a reference to the given string and assigns it to the Gender field.
// Deprecated
func (o *FirstAdminUser) SetGender(v string) {
	o.Gender = &v
}

func (o FirstAdminUser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FirstAdminUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["firstName"] = o.FirstName
	toSerialize["lastName"] = o.LastName
	if !IsNil(o.UserName) {
		toSerialize["userName"] = o.UserName
	}
	if !IsNil(o.AuthData) {
		toSerialize["authData"] = o.AuthData
	}
	if !IsNil(o.ReceiverLanguage) {
		toSerialize["receiverLanguage"] = o.ReceiverLanguage
	}
	if !IsNil(o.NotifyUser) {
		toSerialize["notifyUser"] = o.NotifyUser
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Phone) {
		toSerialize["phone"] = o.Phone
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.AuthMethods) {
		toSerialize["authMethods"] = o.AuthMethods
	}
	if !IsNil(o.NeedsToChangeUserName) {
		toSerialize["needsToChangeUserName"] = o.NeedsToChangeUserName
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.NeedsToChangePassword) {
		toSerialize["needsToChangePassword"] = o.NeedsToChangePassword
	}
	if !IsNil(o.Login) {
		toSerialize["login"] = o.Login
	}
	if !IsNil(o.Gender) {
		toSerialize["gender"] = o.Gender
	}
	return toSerialize, nil
}

func (o *FirstAdminUser) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"firstName",
		"lastName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFirstAdminUser := _FirstAdminUser{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFirstAdminUser)

	if err != nil {
		return err
	}

	*o = FirstAdminUser(varFirstAdminUser)

	return err
}

type NullableFirstAdminUser struct {
	value *FirstAdminUser
	isSet bool
}

func (v NullableFirstAdminUser) Get() *FirstAdminUser {
	return v.value
}

func (v *NullableFirstAdminUser) Set(val *FirstAdminUser) {
	v.value = val
	v.isSet = true
}

func (v NullableFirstAdminUser) IsSet() bool {
	return v.isSet
}

func (v *NullableFirstAdminUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirstAdminUser(val *FirstAdminUser) *NullableFirstAdminUser {
	return &NullableFirstAdminUser{value: val, isSet: true}
}

func (v NullableFirstAdminUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirstAdminUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
