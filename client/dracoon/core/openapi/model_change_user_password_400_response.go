/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ChangeUserPassword400Response - struct for ChangeUserPassword400Response
type ChangeUserPassword400Response struct {
	ErrorResponse                   *ErrorResponse
	PasswordPolicyViolationResponse *PasswordPolicyViolationResponse
}

// ErrorResponseAsChangeUserPassword400Response is a convenience function that returns ErrorResponse wrapped in ChangeUserPassword400Response
func ErrorResponseAsChangeUserPassword400Response(v *ErrorResponse) ChangeUserPassword400Response {
	return ChangeUserPassword400Response{
		ErrorResponse: v,
	}
}

// PasswordPolicyViolationResponseAsChangeUserPassword400Response is a convenience function that returns PasswordPolicyViolationResponse wrapped in ChangeUserPassword400Response
func PasswordPolicyViolationResponseAsChangeUserPassword400Response(v *PasswordPolicyViolationResponse) ChangeUserPassword400Response {
	return ChangeUserPassword400Response{
		PasswordPolicyViolationResponse: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ChangeUserPassword400Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ErrorResponse
	err = newStrictDecoder(data).Decode(&dst.ErrorResponse)
	if err == nil {
		jsonErrorResponse, _ := json.Marshal(dst.ErrorResponse)
		if string(jsonErrorResponse) == "{}" { // empty struct
			dst.ErrorResponse = nil
		} else {
			match++
		}
	} else {
		dst.ErrorResponse = nil
	}

	// try to unmarshal data into PasswordPolicyViolationResponse
	err = newStrictDecoder(data).Decode(&dst.PasswordPolicyViolationResponse)
	if err == nil {
		jsonPasswordPolicyViolationResponse, _ := json.Marshal(dst.PasswordPolicyViolationResponse)
		if string(jsonPasswordPolicyViolationResponse) == "{}" { // empty struct
			dst.PasswordPolicyViolationResponse = nil
		} else {
			match++
		}
	} else {
		dst.PasswordPolicyViolationResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ErrorResponse = nil
		dst.PasswordPolicyViolationResponse = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ChangeUserPassword400Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ChangeUserPassword400Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ChangeUserPassword400Response) MarshalJSON() ([]byte, error) {
	if src.ErrorResponse != nil {
		return json.Marshal(&src.ErrorResponse)
	}

	if src.PasswordPolicyViolationResponse != nil {
		return json.Marshal(&src.PasswordPolicyViolationResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ChangeUserPassword400Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ErrorResponse != nil {
		return obj.ErrorResponse
	}

	if obj.PasswordPolicyViolationResponse != nil {
		return obj.PasswordPolicyViolationResponse
	}

	// all schemas are nil
	return nil
}

type NullableChangeUserPassword400Response struct {
	value *ChangeUserPassword400Response
	isSet bool
}

func (v NullableChangeUserPassword400Response) Get() *ChangeUserPassword400Response {
	return v.value
}

func (v *NullableChangeUserPassword400Response) Set(val *ChangeUserPassword400Response) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeUserPassword400Response) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeUserPassword400Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeUserPassword400Response(val *ChangeUserPassword400Response) *NullableChangeUserPassword400Response {
	return &NullableChangeUserPassword400Response{value: val, isSet: true}
}

func (v NullableChangeUserPassword400Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeUserPassword400Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
