/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the OAuthApproval type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OAuthApproval{}

// OAuthApproval OAuth client approval information
type OAuthApproval struct {
	// ID of the OAuth client
	ClientId string `json:"clientId"`
	// Name, which is shown at the client configuration and authorization.
	ClientName string `json:"clientName"`
	// Expiration date of the approval
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`
}

type _OAuthApproval OAuthApproval

// NewOAuthApproval instantiates a new OAuthApproval object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOAuthApproval(clientId string, clientName string) *OAuthApproval {
	this := OAuthApproval{}
	this.ClientId = clientId
	this.ClientName = clientName
	return &this
}

// NewOAuthApprovalWithDefaults instantiates a new OAuthApproval object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOAuthApprovalWithDefaults() *OAuthApproval {
	this := OAuthApproval{}
	return &this
}

// GetClientId returns the ClientId field value
func (o *OAuthApproval) GetClientId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value
// and a boolean to check if the value has been set.
func (o *OAuthApproval) GetClientIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientId, true
}

// SetClientId sets field value
func (o *OAuthApproval) SetClientId(v string) {
	o.ClientId = v
}

// GetClientName returns the ClientName field value
func (o *OAuthApproval) GetClientName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientName
}

// GetClientNameOk returns a tuple with the ClientName field value
// and a boolean to check if the value has been set.
func (o *OAuthApproval) GetClientNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientName, true
}

// SetClientName sets field value
func (o *OAuthApproval) SetClientName(v string) {
	o.ClientName = v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *OAuthApproval) GetExpiresAt() time.Time {
	if o == nil || IsNil(o.ExpiresAt) {
		var ret time.Time
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthApproval) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpiresAt) {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *OAuthApproval) HasExpiresAt() bool {
	if o != nil && !IsNil(o.ExpiresAt) {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given time.Time and assigns it to the ExpiresAt field.
func (o *OAuthApproval) SetExpiresAt(v time.Time) {
	o.ExpiresAt = &v
}

func (o OAuthApproval) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OAuthApproval) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["clientId"] = o.ClientId
	toSerialize["clientName"] = o.ClientName
	if !IsNil(o.ExpiresAt) {
		toSerialize["expiresAt"] = o.ExpiresAt
	}
	return toSerialize, nil
}

func (o *OAuthApproval) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"clientId",
		"clientName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOAuthApproval := _OAuthApproval{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOAuthApproval)

	if err != nil {
		return err
	}

	*o = OAuthApproval(varOAuthApproval)

	return err
}

type NullableOAuthApproval struct {
	value *OAuthApproval
	isSet bool
}

func (v NullableOAuthApproval) Get() *OAuthApproval {
	return v.value
}

func (v *NullableOAuthApproval) Set(val *OAuthApproval) {
	v.value = val
	v.isSet = true
}

func (v NullableOAuthApproval) IsSet() bool {
	return v.isSet
}

func (v *NullableOAuthApproval) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOAuthApproval(val *OAuthApproval) *NullableOAuthApproval {
	return &NullableOAuthApproval{value: val, isSet: true}
}

func (v NullableOAuthApproval) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOAuthApproval) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
