/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the UploadShare type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UploadShare{}

// UploadShare Upload Share information
type UploadShare struct {
	// Share ID
	Id int64 `json:"id"`
	// Alias name
	Name string `json:"name"`
	// Target room or folder ID
	TargetId int64 `json:"targetId"`
	// Is share protected by password
	IsProtected bool `json:"isProtected"`
	// Share access key to generate secure link
	AccessKey string `json:"accessKey"`
	// Creation date
	CreatedAt time.Time `json:"createdAt"`
	CreatedBy UserInfo  `json:"createdBy"`
	// Modification date
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	UpdatedBy *UserInfo  `json:"updatedBy,omitempty"`
	// Expiration date
	ExpireAt *time.Time `json:"expireAt,omitempty"`
	// Path to shared upload node
	TargetPath *string `json:"targetPath,omitempty"`
	// Encryption state
	IsEncrypted *bool `json:"isEncrypted,omitempty"`
	// User notes
	Notes *string `json:"notes,omitempty"`
	// &#128640; Since v4.11.0  Internal notes
	InternalNotes *string `json:"internalNotes,omitempty"`
	// Number of days after which uploaded files expire
	FilesExpiryPeriod *int32 `json:"filesExpiryPeriod,omitempty"`
	// Total amount of existing files uploaded with this share.
	CntFiles *int32 `json:"cntFiles,omitempty"`
	// Total amount of uploads conducted with this share.
	CntUploads *int32 `json:"cntUploads,omitempty"`
	// Allow display of already uploaded files
	ShowUploadedFiles *bool `json:"showUploadedFiles,omitempty"`
	// Upload Share URL
	DataUrl *string `json:"dataUrl,omitempty"`
	// Maximal amount of files to upload
	MaxSlots *int32 `json:"maxSlots,omitempty"`
	// Maximal total size of uploaded files (in bytes)
	MaxSize *int64 `json:"maxSize,omitempty"`
	// Node type
	TargetType *string `json:"targetType,omitempty"`
	// &#128640; Since v4.11.0  Show creator first and last name.
	ShowCreatorName *bool `json:"showCreatorName,omitempty"`
	// &#128640; Since v4.11.0  Show creator email address.
	ShowCreatorUsername *bool `json:"showCreatorUsername,omitempty"`
	// &#128679; Deprecated since v4.20.0  Notify creator on every upload.
	// Deprecated
	NotifyCreator bool `json:"notifyCreator"`
	// &#128679; Deprecated since v4.11.0  CSV string of recipient email addresses
	// Deprecated
	Recipients *string `json:"recipients,omitempty"`
	// &#128679; Deprecated since v4.11.0  CSV string of recipient MSISDNs
	// Deprecated
	SmsRecipients *string `json:"smsRecipients,omitempty"`
}

type _UploadShare UploadShare

// NewUploadShare instantiates a new UploadShare object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadShare(id int64, name string, targetId int64, isProtected bool, accessKey string, createdAt time.Time, createdBy UserInfo, notifyCreator bool) *UploadShare {
	this := UploadShare{}
	this.Id = id
	this.Name = name
	this.TargetId = targetId
	this.IsProtected = isProtected
	this.AccessKey = accessKey
	this.CreatedAt = createdAt
	this.CreatedBy = createdBy
	this.NotifyCreator = notifyCreator
	return &this
}

// NewUploadShareWithDefaults instantiates a new UploadShare object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadShareWithDefaults() *UploadShare {
	this := UploadShare{}
	return &this
}

// GetId returns the Id field value
func (o *UploadShare) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UploadShare) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UploadShare) SetId(v int64) {
	o.Id = v
}

// GetName returns the Name field value
func (o *UploadShare) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UploadShare) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UploadShare) SetName(v string) {
	o.Name = v
}

// GetTargetId returns the TargetId field value
func (o *UploadShare) GetTargetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TargetId
}

// GetTargetIdOk returns a tuple with the TargetId field value
// and a boolean to check if the value has been set.
func (o *UploadShare) GetTargetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetId, true
}

// SetTargetId sets field value
func (o *UploadShare) SetTargetId(v int64) {
	o.TargetId = v
}

// GetIsProtected returns the IsProtected field value
func (o *UploadShare) GetIsProtected() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsProtected
}

// GetIsProtectedOk returns a tuple with the IsProtected field value
// and a boolean to check if the value has been set.
func (o *UploadShare) GetIsProtectedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsProtected, true
}

// SetIsProtected sets field value
func (o *UploadShare) SetIsProtected(v bool) {
	o.IsProtected = v
}

// GetAccessKey returns the AccessKey field value
func (o *UploadShare) GetAccessKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessKey
}

// GetAccessKeyOk returns a tuple with the AccessKey field value
// and a boolean to check if the value has been set.
func (o *UploadShare) GetAccessKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessKey, true
}

// SetAccessKey sets field value
func (o *UploadShare) SetAccessKey(v string) {
	o.AccessKey = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *UploadShare) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *UploadShare) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *UploadShare) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetCreatedBy returns the CreatedBy field value
func (o *UploadShare) GetCreatedBy() UserInfo {
	if o == nil {
		var ret UserInfo
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *UploadShare) GetCreatedByOk() (*UserInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *UploadShare) SetCreatedBy(v UserInfo) {
	o.CreatedBy = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *UploadShare) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadShare) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *UploadShare) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *UploadShare) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *UploadShare) GetUpdatedBy() UserInfo {
	if o == nil || IsNil(o.UpdatedBy) {
		var ret UserInfo
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadShare) GetUpdatedByOk() (*UserInfo, bool) {
	if o == nil || IsNil(o.UpdatedBy) {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *UploadShare) HasUpdatedBy() bool {
	if o != nil && !IsNil(o.UpdatedBy) {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given UserInfo and assigns it to the UpdatedBy field.
func (o *UploadShare) SetUpdatedBy(v UserInfo) {
	o.UpdatedBy = &v
}

// GetExpireAt returns the ExpireAt field value if set, zero value otherwise.
func (o *UploadShare) GetExpireAt() time.Time {
	if o == nil || IsNil(o.ExpireAt) {
		var ret time.Time
		return ret
	}
	return *o.ExpireAt
}

// GetExpireAtOk returns a tuple with the ExpireAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadShare) GetExpireAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpireAt) {
		return nil, false
	}
	return o.ExpireAt, true
}

// HasExpireAt returns a boolean if a field has been set.
func (o *UploadShare) HasExpireAt() bool {
	if o != nil && !IsNil(o.ExpireAt) {
		return true
	}

	return false
}

// SetExpireAt gets a reference to the given time.Time and assigns it to the ExpireAt field.
func (o *UploadShare) SetExpireAt(v time.Time) {
	o.ExpireAt = &v
}

// GetTargetPath returns the TargetPath field value if set, zero value otherwise.
func (o *UploadShare) GetTargetPath() string {
	if o == nil || IsNil(o.TargetPath) {
		var ret string
		return ret
	}
	return *o.TargetPath
}

// GetTargetPathOk returns a tuple with the TargetPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadShare) GetTargetPathOk() (*string, bool) {
	if o == nil || IsNil(o.TargetPath) {
		return nil, false
	}
	return o.TargetPath, true
}

// HasTargetPath returns a boolean if a field has been set.
func (o *UploadShare) HasTargetPath() bool {
	if o != nil && !IsNil(o.TargetPath) {
		return true
	}

	return false
}

// SetTargetPath gets a reference to the given string and assigns it to the TargetPath field.
func (o *UploadShare) SetTargetPath(v string) {
	o.TargetPath = &v
}

// GetIsEncrypted returns the IsEncrypted field value if set, zero value otherwise.
func (o *UploadShare) GetIsEncrypted() bool {
	if o == nil || IsNil(o.IsEncrypted) {
		var ret bool
		return ret
	}
	return *o.IsEncrypted
}

// GetIsEncryptedOk returns a tuple with the IsEncrypted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadShare) GetIsEncryptedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEncrypted) {
		return nil, false
	}
	return o.IsEncrypted, true
}

// HasIsEncrypted returns a boolean if a field has been set.
func (o *UploadShare) HasIsEncrypted() bool {
	if o != nil && !IsNil(o.IsEncrypted) {
		return true
	}

	return false
}

// SetIsEncrypted gets a reference to the given bool and assigns it to the IsEncrypted field.
func (o *UploadShare) SetIsEncrypted(v bool) {
	o.IsEncrypted = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *UploadShare) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadShare) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *UploadShare) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *UploadShare) SetNotes(v string) {
	o.Notes = &v
}

// GetInternalNotes returns the InternalNotes field value if set, zero value otherwise.
func (o *UploadShare) GetInternalNotes() string {
	if o == nil || IsNil(o.InternalNotes) {
		var ret string
		return ret
	}
	return *o.InternalNotes
}

// GetInternalNotesOk returns a tuple with the InternalNotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadShare) GetInternalNotesOk() (*string, bool) {
	if o == nil || IsNil(o.InternalNotes) {
		return nil, false
	}
	return o.InternalNotes, true
}

// HasInternalNotes returns a boolean if a field has been set.
func (o *UploadShare) HasInternalNotes() bool {
	if o != nil && !IsNil(o.InternalNotes) {
		return true
	}

	return false
}

// SetInternalNotes gets a reference to the given string and assigns it to the InternalNotes field.
func (o *UploadShare) SetInternalNotes(v string) {
	o.InternalNotes = &v
}

// GetFilesExpiryPeriod returns the FilesExpiryPeriod field value if set, zero value otherwise.
func (o *UploadShare) GetFilesExpiryPeriod() int32 {
	if o == nil || IsNil(o.FilesExpiryPeriod) {
		var ret int32
		return ret
	}
	return *o.FilesExpiryPeriod
}

// GetFilesExpiryPeriodOk returns a tuple with the FilesExpiryPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadShare) GetFilesExpiryPeriodOk() (*int32, bool) {
	if o == nil || IsNil(o.FilesExpiryPeriod) {
		return nil, false
	}
	return o.FilesExpiryPeriod, true
}

// HasFilesExpiryPeriod returns a boolean if a field has been set.
func (o *UploadShare) HasFilesExpiryPeriod() bool {
	if o != nil && !IsNil(o.FilesExpiryPeriod) {
		return true
	}

	return false
}

// SetFilesExpiryPeriod gets a reference to the given int32 and assigns it to the FilesExpiryPeriod field.
func (o *UploadShare) SetFilesExpiryPeriod(v int32) {
	o.FilesExpiryPeriod = &v
}

// GetCntFiles returns the CntFiles field value if set, zero value otherwise.
func (o *UploadShare) GetCntFiles() int32 {
	if o == nil || IsNil(o.CntFiles) {
		var ret int32
		return ret
	}
	return *o.CntFiles
}

// GetCntFilesOk returns a tuple with the CntFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadShare) GetCntFilesOk() (*int32, bool) {
	if o == nil || IsNil(o.CntFiles) {
		return nil, false
	}
	return o.CntFiles, true
}

// HasCntFiles returns a boolean if a field has been set.
func (o *UploadShare) HasCntFiles() bool {
	if o != nil && !IsNil(o.CntFiles) {
		return true
	}

	return false
}

// SetCntFiles gets a reference to the given int32 and assigns it to the CntFiles field.
func (o *UploadShare) SetCntFiles(v int32) {
	o.CntFiles = &v
}

// GetCntUploads returns the CntUploads field value if set, zero value otherwise.
func (o *UploadShare) GetCntUploads() int32 {
	if o == nil || IsNil(o.CntUploads) {
		var ret int32
		return ret
	}
	return *o.CntUploads
}

// GetCntUploadsOk returns a tuple with the CntUploads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadShare) GetCntUploadsOk() (*int32, bool) {
	if o == nil || IsNil(o.CntUploads) {
		return nil, false
	}
	return o.CntUploads, true
}

// HasCntUploads returns a boolean if a field has been set.
func (o *UploadShare) HasCntUploads() bool {
	if o != nil && !IsNil(o.CntUploads) {
		return true
	}

	return false
}

// SetCntUploads gets a reference to the given int32 and assigns it to the CntUploads field.
func (o *UploadShare) SetCntUploads(v int32) {
	o.CntUploads = &v
}

// GetShowUploadedFiles returns the ShowUploadedFiles field value if set, zero value otherwise.
func (o *UploadShare) GetShowUploadedFiles() bool {
	if o == nil || IsNil(o.ShowUploadedFiles) {
		var ret bool
		return ret
	}
	return *o.ShowUploadedFiles
}

// GetShowUploadedFilesOk returns a tuple with the ShowUploadedFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadShare) GetShowUploadedFilesOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowUploadedFiles) {
		return nil, false
	}
	return o.ShowUploadedFiles, true
}

// HasShowUploadedFiles returns a boolean if a field has been set.
func (o *UploadShare) HasShowUploadedFiles() bool {
	if o != nil && !IsNil(o.ShowUploadedFiles) {
		return true
	}

	return false
}

// SetShowUploadedFiles gets a reference to the given bool and assigns it to the ShowUploadedFiles field.
func (o *UploadShare) SetShowUploadedFiles(v bool) {
	o.ShowUploadedFiles = &v
}

// GetDataUrl returns the DataUrl field value if set, zero value otherwise.
func (o *UploadShare) GetDataUrl() string {
	if o == nil || IsNil(o.DataUrl) {
		var ret string
		return ret
	}
	return *o.DataUrl
}

// GetDataUrlOk returns a tuple with the DataUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadShare) GetDataUrlOk() (*string, bool) {
	if o == nil || IsNil(o.DataUrl) {
		return nil, false
	}
	return o.DataUrl, true
}

// HasDataUrl returns a boolean if a field has been set.
func (o *UploadShare) HasDataUrl() bool {
	if o != nil && !IsNil(o.DataUrl) {
		return true
	}

	return false
}

// SetDataUrl gets a reference to the given string and assigns it to the DataUrl field.
func (o *UploadShare) SetDataUrl(v string) {
	o.DataUrl = &v
}

// GetMaxSlots returns the MaxSlots field value if set, zero value otherwise.
func (o *UploadShare) GetMaxSlots() int32 {
	if o == nil || IsNil(o.MaxSlots) {
		var ret int32
		return ret
	}
	return *o.MaxSlots
}

// GetMaxSlotsOk returns a tuple with the MaxSlots field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadShare) GetMaxSlotsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxSlots) {
		return nil, false
	}
	return o.MaxSlots, true
}

// HasMaxSlots returns a boolean if a field has been set.
func (o *UploadShare) HasMaxSlots() bool {
	if o != nil && !IsNil(o.MaxSlots) {
		return true
	}

	return false
}

// SetMaxSlots gets a reference to the given int32 and assigns it to the MaxSlots field.
func (o *UploadShare) SetMaxSlots(v int32) {
	o.MaxSlots = &v
}

// GetMaxSize returns the MaxSize field value if set, zero value otherwise.
func (o *UploadShare) GetMaxSize() int64 {
	if o == nil || IsNil(o.MaxSize) {
		var ret int64
		return ret
	}
	return *o.MaxSize
}

// GetMaxSizeOk returns a tuple with the MaxSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadShare) GetMaxSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxSize) {
		return nil, false
	}
	return o.MaxSize, true
}

// HasMaxSize returns a boolean if a field has been set.
func (o *UploadShare) HasMaxSize() bool {
	if o != nil && !IsNil(o.MaxSize) {
		return true
	}

	return false
}

// SetMaxSize gets a reference to the given int64 and assigns it to the MaxSize field.
func (o *UploadShare) SetMaxSize(v int64) {
	o.MaxSize = &v
}

// GetTargetType returns the TargetType field value if set, zero value otherwise.
func (o *UploadShare) GetTargetType() string {
	if o == nil || IsNil(o.TargetType) {
		var ret string
		return ret
	}
	return *o.TargetType
}

// GetTargetTypeOk returns a tuple with the TargetType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadShare) GetTargetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TargetType) {
		return nil, false
	}
	return o.TargetType, true
}

// HasTargetType returns a boolean if a field has been set.
func (o *UploadShare) HasTargetType() bool {
	if o != nil && !IsNil(o.TargetType) {
		return true
	}

	return false
}

// SetTargetType gets a reference to the given string and assigns it to the TargetType field.
func (o *UploadShare) SetTargetType(v string) {
	o.TargetType = &v
}

// GetShowCreatorName returns the ShowCreatorName field value if set, zero value otherwise.
func (o *UploadShare) GetShowCreatorName() bool {
	if o == nil || IsNil(o.ShowCreatorName) {
		var ret bool
		return ret
	}
	return *o.ShowCreatorName
}

// GetShowCreatorNameOk returns a tuple with the ShowCreatorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadShare) GetShowCreatorNameOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowCreatorName) {
		return nil, false
	}
	return o.ShowCreatorName, true
}

// HasShowCreatorName returns a boolean if a field has been set.
func (o *UploadShare) HasShowCreatorName() bool {
	if o != nil && !IsNil(o.ShowCreatorName) {
		return true
	}

	return false
}

// SetShowCreatorName gets a reference to the given bool and assigns it to the ShowCreatorName field.
func (o *UploadShare) SetShowCreatorName(v bool) {
	o.ShowCreatorName = &v
}

// GetShowCreatorUsername returns the ShowCreatorUsername field value if set, zero value otherwise.
func (o *UploadShare) GetShowCreatorUsername() bool {
	if o == nil || IsNil(o.ShowCreatorUsername) {
		var ret bool
		return ret
	}
	return *o.ShowCreatorUsername
}

// GetShowCreatorUsernameOk returns a tuple with the ShowCreatorUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadShare) GetShowCreatorUsernameOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowCreatorUsername) {
		return nil, false
	}
	return o.ShowCreatorUsername, true
}

// HasShowCreatorUsername returns a boolean if a field has been set.
func (o *UploadShare) HasShowCreatorUsername() bool {
	if o != nil && !IsNil(o.ShowCreatorUsername) {
		return true
	}

	return false
}

// SetShowCreatorUsername gets a reference to the given bool and assigns it to the ShowCreatorUsername field.
func (o *UploadShare) SetShowCreatorUsername(v bool) {
	o.ShowCreatorUsername = &v
}

// GetNotifyCreator returns the NotifyCreator field value
// Deprecated
func (o *UploadShare) GetNotifyCreator() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.NotifyCreator
}

// GetNotifyCreatorOk returns a tuple with the NotifyCreator field value
// and a boolean to check if the value has been set.
// Deprecated
func (o *UploadShare) GetNotifyCreatorOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotifyCreator, true
}

// SetNotifyCreator sets field value
// Deprecated
func (o *UploadShare) SetNotifyCreator(v bool) {
	o.NotifyCreator = v
}

// GetRecipients returns the Recipients field value if set, zero value otherwise.
// Deprecated
func (o *UploadShare) GetRecipients() string {
	if o == nil || IsNil(o.Recipients) {
		var ret string
		return ret
	}
	return *o.Recipients
}

// GetRecipientsOk returns a tuple with the Recipients field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *UploadShare) GetRecipientsOk() (*string, bool) {
	if o == nil || IsNil(o.Recipients) {
		return nil, false
	}
	return o.Recipients, true
}

// HasRecipients returns a boolean if a field has been set.
func (o *UploadShare) HasRecipients() bool {
	if o != nil && !IsNil(o.Recipients) {
		return true
	}

	return false
}

// SetRecipients gets a reference to the given string and assigns it to the Recipients field.
// Deprecated
func (o *UploadShare) SetRecipients(v string) {
	o.Recipients = &v
}

// GetSmsRecipients returns the SmsRecipients field value if set, zero value otherwise.
// Deprecated
func (o *UploadShare) GetSmsRecipients() string {
	if o == nil || IsNil(o.SmsRecipients) {
		var ret string
		return ret
	}
	return *o.SmsRecipients
}

// GetSmsRecipientsOk returns a tuple with the SmsRecipients field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *UploadShare) GetSmsRecipientsOk() (*string, bool) {
	if o == nil || IsNil(o.SmsRecipients) {
		return nil, false
	}
	return o.SmsRecipients, true
}

// HasSmsRecipients returns a boolean if a field has been set.
func (o *UploadShare) HasSmsRecipients() bool {
	if o != nil && !IsNil(o.SmsRecipients) {
		return true
	}

	return false
}

// SetSmsRecipients gets a reference to the given string and assigns it to the SmsRecipients field.
// Deprecated
func (o *UploadShare) SetSmsRecipients(v string) {
	o.SmsRecipients = &v
}

func (o UploadShare) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UploadShare) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["targetId"] = o.TargetId
	toSerialize["isProtected"] = o.IsProtected
	toSerialize["accessKey"] = o.AccessKey
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["createdBy"] = o.CreatedBy
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !IsNil(o.UpdatedBy) {
		toSerialize["updatedBy"] = o.UpdatedBy
	}
	if !IsNil(o.ExpireAt) {
		toSerialize["expireAt"] = o.ExpireAt
	}
	if !IsNil(o.TargetPath) {
		toSerialize["targetPath"] = o.TargetPath
	}
	if !IsNil(o.IsEncrypted) {
		toSerialize["isEncrypted"] = o.IsEncrypted
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.InternalNotes) {
		toSerialize["internalNotes"] = o.InternalNotes
	}
	if !IsNil(o.FilesExpiryPeriod) {
		toSerialize["filesExpiryPeriod"] = o.FilesExpiryPeriod
	}
	if !IsNil(o.CntFiles) {
		toSerialize["cntFiles"] = o.CntFiles
	}
	if !IsNil(o.CntUploads) {
		toSerialize["cntUploads"] = o.CntUploads
	}
	if !IsNil(o.ShowUploadedFiles) {
		toSerialize["showUploadedFiles"] = o.ShowUploadedFiles
	}
	if !IsNil(o.DataUrl) {
		toSerialize["dataUrl"] = o.DataUrl
	}
	if !IsNil(o.MaxSlots) {
		toSerialize["maxSlots"] = o.MaxSlots
	}
	if !IsNil(o.MaxSize) {
		toSerialize["maxSize"] = o.MaxSize
	}
	if !IsNil(o.TargetType) {
		toSerialize["targetType"] = o.TargetType
	}
	if !IsNil(o.ShowCreatorName) {
		toSerialize["showCreatorName"] = o.ShowCreatorName
	}
	if !IsNil(o.ShowCreatorUsername) {
		toSerialize["showCreatorUsername"] = o.ShowCreatorUsername
	}
	toSerialize["notifyCreator"] = o.NotifyCreator
	if !IsNil(o.Recipients) {
		toSerialize["recipients"] = o.Recipients
	}
	if !IsNil(o.SmsRecipients) {
		toSerialize["smsRecipients"] = o.SmsRecipients
	}
	return toSerialize, nil
}

func (o *UploadShare) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"targetId",
		"isProtected",
		"accessKey",
		"createdAt",
		"createdBy",
		"notifyCreator",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUploadShare := _UploadShare{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUploadShare)

	if err != nil {
		return err
	}

	*o = UploadShare(varUploadShare)

	return err
}

type NullableUploadShare struct {
	value *UploadShare
	isSet bool
}

func (v NullableUploadShare) Get() *UploadShare {
	return v.value
}

func (v *NullableUploadShare) Set(val *UploadShare) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadShare) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadShare) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadShare(val *UploadShare) *NullableUploadShare {
	return &NullableUploadShare{value: val, isSet: true}
}

func (v NullableUploadShare) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadShare) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
