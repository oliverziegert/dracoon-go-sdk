/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the EncryptRoomRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EncryptRoomRequest{}

// EncryptRoomRequest Request model for handling encryption settings for a room
type EncryptRoomRequest struct {
	// Encryption state
	IsEncrypted bool `json:"isEncrypted"`
	// Use system emergency password (rescue key) for files in this room
	UseDataSpaceRescueKey *bool                 `json:"useDataSpaceRescueKey,omitempty"`
	DataRoomRescueKey     *UserKeyPairContainer `json:"dataRoomRescueKey,omitempty"`
}

type _EncryptRoomRequest EncryptRoomRequest

// NewEncryptRoomRequest instantiates a new EncryptRoomRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEncryptRoomRequest(isEncrypted bool) *EncryptRoomRequest {
	this := EncryptRoomRequest{}
	this.IsEncrypted = isEncrypted
	return &this
}

// NewEncryptRoomRequestWithDefaults instantiates a new EncryptRoomRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEncryptRoomRequestWithDefaults() *EncryptRoomRequest {
	this := EncryptRoomRequest{}
	return &this
}

// GetIsEncrypted returns the IsEncrypted field value
func (o *EncryptRoomRequest) GetIsEncrypted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsEncrypted
}

// GetIsEncryptedOk returns a tuple with the IsEncrypted field value
// and a boolean to check if the value has been set.
func (o *EncryptRoomRequest) GetIsEncryptedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsEncrypted, true
}

// SetIsEncrypted sets field value
func (o *EncryptRoomRequest) SetIsEncrypted(v bool) {
	o.IsEncrypted = v
}

// GetUseDataSpaceRescueKey returns the UseDataSpaceRescueKey field value if set, zero value otherwise.
func (o *EncryptRoomRequest) GetUseDataSpaceRescueKey() bool {
	if o == nil || IsNil(o.UseDataSpaceRescueKey) {
		var ret bool
		return ret
	}
	return *o.UseDataSpaceRescueKey
}

// GetUseDataSpaceRescueKeyOk returns a tuple with the UseDataSpaceRescueKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EncryptRoomRequest) GetUseDataSpaceRescueKeyOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDataSpaceRescueKey) {
		return nil, false
	}
	return o.UseDataSpaceRescueKey, true
}

// HasUseDataSpaceRescueKey returns a boolean if a field has been set.
func (o *EncryptRoomRequest) HasUseDataSpaceRescueKey() bool {
	if o != nil && !IsNil(o.UseDataSpaceRescueKey) {
		return true
	}

	return false
}

// SetUseDataSpaceRescueKey gets a reference to the given bool and assigns it to the UseDataSpaceRescueKey field.
func (o *EncryptRoomRequest) SetUseDataSpaceRescueKey(v bool) {
	o.UseDataSpaceRescueKey = &v
}

// GetDataRoomRescueKey returns the DataRoomRescueKey field value if set, zero value otherwise.
func (o *EncryptRoomRequest) GetDataRoomRescueKey() UserKeyPairContainer {
	if o == nil || IsNil(o.DataRoomRescueKey) {
		var ret UserKeyPairContainer
		return ret
	}
	return *o.DataRoomRescueKey
}

// GetDataRoomRescueKeyOk returns a tuple with the DataRoomRescueKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EncryptRoomRequest) GetDataRoomRescueKeyOk() (*UserKeyPairContainer, bool) {
	if o == nil || IsNil(o.DataRoomRescueKey) {
		return nil, false
	}
	return o.DataRoomRescueKey, true
}

// HasDataRoomRescueKey returns a boolean if a field has been set.
func (o *EncryptRoomRequest) HasDataRoomRescueKey() bool {
	if o != nil && !IsNil(o.DataRoomRescueKey) {
		return true
	}

	return false
}

// SetDataRoomRescueKey gets a reference to the given UserKeyPairContainer and assigns it to the DataRoomRescueKey field.
func (o *EncryptRoomRequest) SetDataRoomRescueKey(v UserKeyPairContainer) {
	o.DataRoomRescueKey = &v
}

func (o EncryptRoomRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EncryptRoomRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["isEncrypted"] = o.IsEncrypted
	if !IsNil(o.UseDataSpaceRescueKey) {
		toSerialize["useDataSpaceRescueKey"] = o.UseDataSpaceRescueKey
	}
	if !IsNil(o.DataRoomRescueKey) {
		toSerialize["dataRoomRescueKey"] = o.DataRoomRescueKey
	}
	return toSerialize, nil
}

func (o *EncryptRoomRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"isEncrypted",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEncryptRoomRequest := _EncryptRoomRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEncryptRoomRequest)

	if err != nil {
		return err
	}

	*o = EncryptRoomRequest(varEncryptRoomRequest)

	return err
}

type NullableEncryptRoomRequest struct {
	value *EncryptRoomRequest
	isSet bool
}

func (v NullableEncryptRoomRequest) Get() *EncryptRoomRequest {
	return v.value
}

func (v *NullableEncryptRoomRequest) Set(val *EncryptRoomRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEncryptRoomRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEncryptRoomRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEncryptRoomRequest(val *EncryptRoomRequest) *NullableEncryptRoomRequest {
	return &NullableEncryptRoomRequest{value: val, isSet: true}
}

func (v NullableEncryptRoomRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEncryptRoomRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
