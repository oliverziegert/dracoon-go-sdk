/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UserFileKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserFileKey{}

// UserFileKey User file key
type UserFileKey struct {
	// Unique identifier for the user
	UserId  int64   `json:"userId"`
	FileKey FileKey `json:"fileKey"`
}

type _UserFileKey UserFileKey

// NewUserFileKey instantiates a new UserFileKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserFileKey(userId int64, fileKey FileKey) *UserFileKey {
	this := UserFileKey{}
	this.UserId = userId
	this.FileKey = fileKey
	return &this
}

// NewUserFileKeyWithDefaults instantiates a new UserFileKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserFileKeyWithDefaults() *UserFileKey {
	this := UserFileKey{}
	return &this
}

// GetUserId returns the UserId field value
func (o *UserFileKey) GetUserId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *UserFileKey) GetUserIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *UserFileKey) SetUserId(v int64) {
	o.UserId = v
}

// GetFileKey returns the FileKey field value
func (o *UserFileKey) GetFileKey() FileKey {
	if o == nil {
		var ret FileKey
		return ret
	}

	return o.FileKey
}

// GetFileKeyOk returns a tuple with the FileKey field value
// and a boolean to check if the value has been set.
func (o *UserFileKey) GetFileKeyOk() (*FileKey, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileKey, true
}

// SetFileKey sets field value
func (o *UserFileKey) SetFileKey(v FileKey) {
	o.FileKey = v
}

func (o UserFileKey) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserFileKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["userId"] = o.UserId
	toSerialize["fileKey"] = o.FileKey
	return toSerialize, nil
}

func (o *UserFileKey) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"userId",
		"fileKey",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserFileKey := _UserFileKey{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserFileKey)

	if err != nil {
		return err
	}

	*o = UserFileKey(varUserFileKey)

	return err
}

type NullableUserFileKey struct {
	value *UserFileKey
	isSet bool
}

func (v NullableUserFileKey) Get() *UserFileKey {
	return v.value
}

func (v *NullableUserFileKey) Set(val *UserFileKey) {
	v.value = val
	v.isSet = true
}

func (v NullableUserFileKey) IsSet() bool {
	return v.isSet
}

func (v *NullableUserFileKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserFileKey(val *UserFileKey) *NullableUserFileKey {
	return &NullableUserFileKey{value: val, isSet: true}
}

func (v NullableUserFileKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserFileKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
