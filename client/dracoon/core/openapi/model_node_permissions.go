/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the NodePermissions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodePermissions{}

// NodePermissions Node permissions
type NodePermissions struct {
	// User / Group may grant all of the above permissions to other users and groups independently,  may update room metadata and create / update / delete subordinary rooms, has all permissions.
	Manage bool `json:"manage"`
	// User / Group may see all rooms, files and folders in the room and download everything, copy files from this room.
	Read bool `json:"read"`
	// User / Group may upload files, create folders and copy / move files to this room, overwriting is not possible.
	Create bool `json:"create"`
	// User / Group may update metadata of nodes: rename files and folders, change classification, etc.
	Change bool `json:"change"`
	// User / Group may overwrite and remove files / folders, move files from this room.
	Delete bool `json:"delete"`
	// User / Group may create Download Shares for files and containers view all previously created Download Shares in this room.
	ManageDownloadShare bool `json:"manageDownloadShare"`
	// User / Group may create Upload Shares for containers, view all previously created Upload Shares in this room.
	ManageUploadShare bool `json:"manageUploadShare"`
	// User / Group may look up files / folders in the recycle bin.
	ReadRecycleBin bool `json:"readRecycleBin"`
	// User / Group may restore files / folders from recycle bin - room permissions required.
	RestoreRecycleBin bool `json:"restoreRecycleBin"`
	// User / Group may permanently remove files / folders from the recycle bin.
	DeleteRecycleBin bool `json:"deleteRecycleBin"`
}

type _NodePermissions NodePermissions

// NewNodePermissions instantiates a new NodePermissions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodePermissions(manage bool, read bool, create bool, change bool, delete bool, manageDownloadShare bool, manageUploadShare bool, readRecycleBin bool, restoreRecycleBin bool, deleteRecycleBin bool) *NodePermissions {
	this := NodePermissions{}
	this.Manage = manage
	this.Read = read
	this.Create = create
	this.Change = change
	this.Delete = delete
	this.ManageDownloadShare = manageDownloadShare
	this.ManageUploadShare = manageUploadShare
	this.ReadRecycleBin = readRecycleBin
	this.RestoreRecycleBin = restoreRecycleBin
	this.DeleteRecycleBin = deleteRecycleBin
	return &this
}

// NewNodePermissionsWithDefaults instantiates a new NodePermissions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodePermissionsWithDefaults() *NodePermissions {
	this := NodePermissions{}
	return &this
}

// GetManage returns the Manage field value
func (o *NodePermissions) GetManage() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Manage
}

// GetManageOk returns a tuple with the Manage field value
// and a boolean to check if the value has been set.
func (o *NodePermissions) GetManageOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Manage, true
}

// SetManage sets field value
func (o *NodePermissions) SetManage(v bool) {
	o.Manage = v
}

// GetRead returns the Read field value
func (o *NodePermissions) GetRead() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Read
}

// GetReadOk returns a tuple with the Read field value
// and a boolean to check if the value has been set.
func (o *NodePermissions) GetReadOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Read, true
}

// SetRead sets field value
func (o *NodePermissions) SetRead(v bool) {
	o.Read = v
}

// GetCreate returns the Create field value
func (o *NodePermissions) GetCreate() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Create
}

// GetCreateOk returns a tuple with the Create field value
// and a boolean to check if the value has been set.
func (o *NodePermissions) GetCreateOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Create, true
}

// SetCreate sets field value
func (o *NodePermissions) SetCreate(v bool) {
	o.Create = v
}

// GetChange returns the Change field value
func (o *NodePermissions) GetChange() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Change
}

// GetChangeOk returns a tuple with the Change field value
// and a boolean to check if the value has been set.
func (o *NodePermissions) GetChangeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Change, true
}

// SetChange sets field value
func (o *NodePermissions) SetChange(v bool) {
	o.Change = v
}

// GetDelete returns the Delete field value
func (o *NodePermissions) GetDelete() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Delete
}

// GetDeleteOk returns a tuple with the Delete field value
// and a boolean to check if the value has been set.
func (o *NodePermissions) GetDeleteOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Delete, true
}

// SetDelete sets field value
func (o *NodePermissions) SetDelete(v bool) {
	o.Delete = v
}

// GetManageDownloadShare returns the ManageDownloadShare field value
func (o *NodePermissions) GetManageDownloadShare() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ManageDownloadShare
}

// GetManageDownloadShareOk returns a tuple with the ManageDownloadShare field value
// and a boolean to check if the value has been set.
func (o *NodePermissions) GetManageDownloadShareOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ManageDownloadShare, true
}

// SetManageDownloadShare sets field value
func (o *NodePermissions) SetManageDownloadShare(v bool) {
	o.ManageDownloadShare = v
}

// GetManageUploadShare returns the ManageUploadShare field value
func (o *NodePermissions) GetManageUploadShare() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ManageUploadShare
}

// GetManageUploadShareOk returns a tuple with the ManageUploadShare field value
// and a boolean to check if the value has been set.
func (o *NodePermissions) GetManageUploadShareOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ManageUploadShare, true
}

// SetManageUploadShare sets field value
func (o *NodePermissions) SetManageUploadShare(v bool) {
	o.ManageUploadShare = v
}

// GetReadRecycleBin returns the ReadRecycleBin field value
func (o *NodePermissions) GetReadRecycleBin() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ReadRecycleBin
}

// GetReadRecycleBinOk returns a tuple with the ReadRecycleBin field value
// and a boolean to check if the value has been set.
func (o *NodePermissions) GetReadRecycleBinOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReadRecycleBin, true
}

// SetReadRecycleBin sets field value
func (o *NodePermissions) SetReadRecycleBin(v bool) {
	o.ReadRecycleBin = v
}

// GetRestoreRecycleBin returns the RestoreRecycleBin field value
func (o *NodePermissions) GetRestoreRecycleBin() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RestoreRecycleBin
}

// GetRestoreRecycleBinOk returns a tuple with the RestoreRecycleBin field value
// and a boolean to check if the value has been set.
func (o *NodePermissions) GetRestoreRecycleBinOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RestoreRecycleBin, true
}

// SetRestoreRecycleBin sets field value
func (o *NodePermissions) SetRestoreRecycleBin(v bool) {
	o.RestoreRecycleBin = v
}

// GetDeleteRecycleBin returns the DeleteRecycleBin field value
func (o *NodePermissions) GetDeleteRecycleBin() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DeleteRecycleBin
}

// GetDeleteRecycleBinOk returns a tuple with the DeleteRecycleBin field value
// and a boolean to check if the value has been set.
func (o *NodePermissions) GetDeleteRecycleBinOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeleteRecycleBin, true
}

// SetDeleteRecycleBin sets field value
func (o *NodePermissions) SetDeleteRecycleBin(v bool) {
	o.DeleteRecycleBin = v
}

func (o NodePermissions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodePermissions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["manage"] = o.Manage
	toSerialize["read"] = o.Read
	toSerialize["create"] = o.Create
	toSerialize["change"] = o.Change
	toSerialize["delete"] = o.Delete
	toSerialize["manageDownloadShare"] = o.ManageDownloadShare
	toSerialize["manageUploadShare"] = o.ManageUploadShare
	toSerialize["readRecycleBin"] = o.ReadRecycleBin
	toSerialize["restoreRecycleBin"] = o.RestoreRecycleBin
	toSerialize["deleteRecycleBin"] = o.DeleteRecycleBin
	return toSerialize, nil
}

func (o *NodePermissions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"manage",
		"read",
		"create",
		"change",
		"delete",
		"manageDownloadShare",
		"manageUploadShare",
		"readRecycleBin",
		"restoreRecycleBin",
		"deleteRecycleBin",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNodePermissions := _NodePermissions{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNodePermissions)

	if err != nil {
		return err
	}

	*o = NodePermissions(varNodePermissions)

	return err
}

type NullableNodePermissions struct {
	value *NodePermissions
	isSet bool
}

func (v NullableNodePermissions) Get() *NodePermissions {
	return v.value
}

func (v *NullableNodePermissions) Set(val *NodePermissions) {
	v.value = val
	v.isSet = true
}

func (v NullableNodePermissions) IsSet() bool {
	return v.isSet
}

func (v *NullableNodePermissions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodePermissions(val *NodePermissions) *NullableNodePermissions {
	return &NullableNodePermissions{value: val, isSet: true}
}

func (v NullableNodePermissions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodePermissions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
