/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the OpenIdProvider type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OpenIdProvider{}

// OpenIdProvider OpenID Connect provider information
type OpenIdProvider struct {
	// ID
	Id int32 `json:"id"`
	// Name of the IDP
	Name string `json:"name"`
	// Issuer identifier of the IDP  The value is a case sensitive URL.
	Issuer string `json:"issuer"`
	// Name of the claim which is used for the user mapping.
	MappingClaim string `json:"mappingClaim"`
	// Is available for all customers
	IsGlobalAvailable bool `json:"isGlobalAvailable"`
	// URL of the user management UI.  Use empty string to remove.
	UserManagementUrl *string `json:"userManagementUrl,omitempty"`
}

type _OpenIdProvider OpenIdProvider

// NewOpenIdProvider instantiates a new OpenIdProvider object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpenIdProvider(id int32, name string, issuer string, mappingClaim string, isGlobalAvailable bool) *OpenIdProvider {
	this := OpenIdProvider{}
	this.Id = id
	this.Name = name
	this.Issuer = issuer
	this.MappingClaim = mappingClaim
	this.IsGlobalAvailable = isGlobalAvailable
	return &this
}

// NewOpenIdProviderWithDefaults instantiates a new OpenIdProvider object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpenIdProviderWithDefaults() *OpenIdProvider {
	this := OpenIdProvider{}
	return &this
}

// GetId returns the Id field value
func (o *OpenIdProvider) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *OpenIdProvider) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *OpenIdProvider) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *OpenIdProvider) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *OpenIdProvider) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *OpenIdProvider) SetName(v string) {
	o.Name = v
}

// GetIssuer returns the Issuer field value
func (o *OpenIdProvider) GetIssuer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Issuer
}

// GetIssuerOk returns a tuple with the Issuer field value
// and a boolean to check if the value has been set.
func (o *OpenIdProvider) GetIssuerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Issuer, true
}

// SetIssuer sets field value
func (o *OpenIdProvider) SetIssuer(v string) {
	o.Issuer = v
}

// GetMappingClaim returns the MappingClaim field value
func (o *OpenIdProvider) GetMappingClaim() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MappingClaim
}

// GetMappingClaimOk returns a tuple with the MappingClaim field value
// and a boolean to check if the value has been set.
func (o *OpenIdProvider) GetMappingClaimOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MappingClaim, true
}

// SetMappingClaim sets field value
func (o *OpenIdProvider) SetMappingClaim(v string) {
	o.MappingClaim = v
}

// GetIsGlobalAvailable returns the IsGlobalAvailable field value
func (o *OpenIdProvider) GetIsGlobalAvailable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsGlobalAvailable
}

// GetIsGlobalAvailableOk returns a tuple with the IsGlobalAvailable field value
// and a boolean to check if the value has been set.
func (o *OpenIdProvider) GetIsGlobalAvailableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsGlobalAvailable, true
}

// SetIsGlobalAvailable sets field value
func (o *OpenIdProvider) SetIsGlobalAvailable(v bool) {
	o.IsGlobalAvailable = v
}

// GetUserManagementUrl returns the UserManagementUrl field value if set, zero value otherwise.
func (o *OpenIdProvider) GetUserManagementUrl() string {
	if o == nil || IsNil(o.UserManagementUrl) {
		var ret string
		return ret
	}
	return *o.UserManagementUrl
}

// GetUserManagementUrlOk returns a tuple with the UserManagementUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenIdProvider) GetUserManagementUrlOk() (*string, bool) {
	if o == nil || IsNil(o.UserManagementUrl) {
		return nil, false
	}
	return o.UserManagementUrl, true
}

// HasUserManagementUrl returns a boolean if a field has been set.
func (o *OpenIdProvider) HasUserManagementUrl() bool {
	if o != nil && !IsNil(o.UserManagementUrl) {
		return true
	}

	return false
}

// SetUserManagementUrl gets a reference to the given string and assigns it to the UserManagementUrl field.
func (o *OpenIdProvider) SetUserManagementUrl(v string) {
	o.UserManagementUrl = &v
}

func (o OpenIdProvider) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OpenIdProvider) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["issuer"] = o.Issuer
	toSerialize["mappingClaim"] = o.MappingClaim
	toSerialize["isGlobalAvailable"] = o.IsGlobalAvailable
	if !IsNil(o.UserManagementUrl) {
		toSerialize["userManagementUrl"] = o.UserManagementUrl
	}
	return toSerialize, nil
}

func (o *OpenIdProvider) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"issuer",
		"mappingClaim",
		"isGlobalAvailable",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOpenIdProvider := _OpenIdProvider{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOpenIdProvider)

	if err != nil {
		return err
	}

	*o = OpenIdProvider(varOpenIdProvider)

	return err
}

type NullableOpenIdProvider struct {
	value *OpenIdProvider
	isSet bool
}

func (v NullableOpenIdProvider) Get() *OpenIdProvider {
	return v.value
}

func (v *NullableOpenIdProvider) Set(val *OpenIdProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenIdProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenIdProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenIdProvider(val *OpenIdProvider) *NullableOpenIdProvider {
	return &NullableOpenIdProvider{value: val, isSet: true}
}

func (v NullableOpenIdProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenIdProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
