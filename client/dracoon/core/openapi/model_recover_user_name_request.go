/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the RecoverUserNameRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecoverUserNameRequest{}

// RecoverUserNameRequest Recover usernames for email
type RecoverUserNameRequest struct {
	// Email
	Email string `json:"email"`
	// IETF language tag
	CreatorLanguage *string `json:"creatorLanguage,omitempty"`
}

type _RecoverUserNameRequest RecoverUserNameRequest

// NewRecoverUserNameRequest instantiates a new RecoverUserNameRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverUserNameRequest(email string) *RecoverUserNameRequest {
	this := RecoverUserNameRequest{}
	this.Email = email
	return &this
}

// NewRecoverUserNameRequestWithDefaults instantiates a new RecoverUserNameRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverUserNameRequestWithDefaults() *RecoverUserNameRequest {
	this := RecoverUserNameRequest{}
	return &this
}

// GetEmail returns the Email field value
func (o *RecoverUserNameRequest) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *RecoverUserNameRequest) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *RecoverUserNameRequest) SetEmail(v string) {
	o.Email = v
}

// GetCreatorLanguage returns the CreatorLanguage field value if set, zero value otherwise.
func (o *RecoverUserNameRequest) GetCreatorLanguage() string {
	if o == nil || IsNil(o.CreatorLanguage) {
		var ret string
		return ret
	}
	return *o.CreatorLanguage
}

// GetCreatorLanguageOk returns a tuple with the CreatorLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecoverUserNameRequest) GetCreatorLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.CreatorLanguage) {
		return nil, false
	}
	return o.CreatorLanguage, true
}

// HasCreatorLanguage returns a boolean if a field has been set.
func (o *RecoverUserNameRequest) HasCreatorLanguage() bool {
	if o != nil && !IsNil(o.CreatorLanguage) {
		return true
	}

	return false
}

// SetCreatorLanguage gets a reference to the given string and assigns it to the CreatorLanguage field.
func (o *RecoverUserNameRequest) SetCreatorLanguage(v string) {
	o.CreatorLanguage = &v
}

func (o RecoverUserNameRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecoverUserNameRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["email"] = o.Email
	if !IsNil(o.CreatorLanguage) {
		toSerialize["creatorLanguage"] = o.CreatorLanguage
	}
	return toSerialize, nil
}

func (o *RecoverUserNameRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"email",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecoverUserNameRequest := _RecoverUserNameRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecoverUserNameRequest)

	if err != nil {
		return err
	}

	*o = RecoverUserNameRequest(varRecoverUserNameRequest)

	return err
}

type NullableRecoverUserNameRequest struct {
	value *RecoverUserNameRequest
	isSet bool
}

func (v NullableRecoverUserNameRequest) Get() *RecoverUserNameRequest {
	return v.value
}

func (v *NullableRecoverUserNameRequest) Set(val *RecoverUserNameRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverUserNameRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverUserNameRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverUserNameRequest(val *RecoverUserNameRequest) *NullableRecoverUserNameRequest {
	return &NullableRecoverUserNameRequest{value: val, isSet: true}
}

func (v NullableRecoverUserNameRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverUserNameRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
