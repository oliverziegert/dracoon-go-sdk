/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the PublicDownloadShare type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicDownloadShare{}

// PublicDownloadShare Download Share information
type PublicDownloadShare struct {
	// Is share protected by password
	IsProtected bool `json:"isProtected"`
	// File name
	FileName string `json:"fileName"`
	// File size or container size not compressed (in bytes)
	Size int64 `json:"size"`
	// Downloads limit reached
	LimitReached bool `json:"limitReached"`
	// Creator name
	CreatorName string `json:"creatorName"`
	// Creation date
	CreatedAt time.Time `json:"createdAt"`
	// &#128640; Since v4.11.0  Determines whether Download Share has a limit for amount of downloads
	HasDownloadLimit bool `json:"hasDownloadLimit"`
	// &#128640; Since v4.11.0  * `application/zip` (for folders and rooms)  * actual file media type (for files only)
	MediaType string `json:"mediaType"`
	// Share display name (alias name)
	Name *string `json:"name,omitempty"`
	// Creator username
	CreatorUsername *string `json:"creatorUsername,omitempty"`
	// Expiration date
	ExpireAt *time.Time `json:"expireAt,omitempty"`
	// User notes
	Notes *string `json:"notes,omitempty"`
	// Encryption state
	IsEncrypted         *bool                `json:"isEncrypted,omitempty"`
	FileKey             *FileKey             `json:"fileKey,omitempty"`
	PrivateKeyContainer *PrivateKeyContainer `json:"privateKeyContainer,omitempty"`
	VirusProtectionInfo *VirusProtectionInfo `json:"virusProtectionInfo,omitempty"`
}

type _PublicDownloadShare PublicDownloadShare

// NewPublicDownloadShare instantiates a new PublicDownloadShare object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicDownloadShare(isProtected bool, fileName string, size int64, limitReached bool, creatorName string, createdAt time.Time, hasDownloadLimit bool, mediaType string) *PublicDownloadShare {
	this := PublicDownloadShare{}
	this.IsProtected = isProtected
	this.FileName = fileName
	this.Size = size
	this.LimitReached = limitReached
	this.CreatorName = creatorName
	this.CreatedAt = createdAt
	this.HasDownloadLimit = hasDownloadLimit
	this.MediaType = mediaType
	return &this
}

// NewPublicDownloadShareWithDefaults instantiates a new PublicDownloadShare object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicDownloadShareWithDefaults() *PublicDownloadShare {
	this := PublicDownloadShare{}
	return &this
}

// GetIsProtected returns the IsProtected field value
func (o *PublicDownloadShare) GetIsProtected() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsProtected
}

// GetIsProtectedOk returns a tuple with the IsProtected field value
// and a boolean to check if the value has been set.
func (o *PublicDownloadShare) GetIsProtectedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsProtected, true
}

// SetIsProtected sets field value
func (o *PublicDownloadShare) SetIsProtected(v bool) {
	o.IsProtected = v
}

// GetFileName returns the FileName field value
func (o *PublicDownloadShare) GetFileName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value
// and a boolean to check if the value has been set.
func (o *PublicDownloadShare) GetFileNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileName, true
}

// SetFileName sets field value
func (o *PublicDownloadShare) SetFileName(v string) {
	o.FileName = v
}

// GetSize returns the Size field value
func (o *PublicDownloadShare) GetSize() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *PublicDownloadShare) GetSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *PublicDownloadShare) SetSize(v int64) {
	o.Size = v
}

// GetLimitReached returns the LimitReached field value
func (o *PublicDownloadShare) GetLimitReached() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.LimitReached
}

// GetLimitReachedOk returns a tuple with the LimitReached field value
// and a boolean to check if the value has been set.
func (o *PublicDownloadShare) GetLimitReachedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LimitReached, true
}

// SetLimitReached sets field value
func (o *PublicDownloadShare) SetLimitReached(v bool) {
	o.LimitReached = v
}

// GetCreatorName returns the CreatorName field value
func (o *PublicDownloadShare) GetCreatorName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatorName
}

// GetCreatorNameOk returns a tuple with the CreatorName field value
// and a boolean to check if the value has been set.
func (o *PublicDownloadShare) GetCreatorNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatorName, true
}

// SetCreatorName sets field value
func (o *PublicDownloadShare) SetCreatorName(v string) {
	o.CreatorName = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *PublicDownloadShare) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *PublicDownloadShare) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *PublicDownloadShare) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetHasDownloadLimit returns the HasDownloadLimit field value
func (o *PublicDownloadShare) GetHasDownloadLimit() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasDownloadLimit
}

// GetHasDownloadLimitOk returns a tuple with the HasDownloadLimit field value
// and a boolean to check if the value has been set.
func (o *PublicDownloadShare) GetHasDownloadLimitOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasDownloadLimit, true
}

// SetHasDownloadLimit sets field value
func (o *PublicDownloadShare) SetHasDownloadLimit(v bool) {
	o.HasDownloadLimit = v
}

// GetMediaType returns the MediaType field value
func (o *PublicDownloadShare) GetMediaType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MediaType
}

// GetMediaTypeOk returns a tuple with the MediaType field value
// and a boolean to check if the value has been set.
func (o *PublicDownloadShare) GetMediaTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MediaType, true
}

// SetMediaType sets field value
func (o *PublicDownloadShare) SetMediaType(v string) {
	o.MediaType = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PublicDownloadShare) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicDownloadShare) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PublicDownloadShare) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PublicDownloadShare) SetName(v string) {
	o.Name = &v
}

// GetCreatorUsername returns the CreatorUsername field value if set, zero value otherwise.
func (o *PublicDownloadShare) GetCreatorUsername() string {
	if o == nil || IsNil(o.CreatorUsername) {
		var ret string
		return ret
	}
	return *o.CreatorUsername
}

// GetCreatorUsernameOk returns a tuple with the CreatorUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicDownloadShare) GetCreatorUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.CreatorUsername) {
		return nil, false
	}
	return o.CreatorUsername, true
}

// HasCreatorUsername returns a boolean if a field has been set.
func (o *PublicDownloadShare) HasCreatorUsername() bool {
	if o != nil && !IsNil(o.CreatorUsername) {
		return true
	}

	return false
}

// SetCreatorUsername gets a reference to the given string and assigns it to the CreatorUsername field.
func (o *PublicDownloadShare) SetCreatorUsername(v string) {
	o.CreatorUsername = &v
}

// GetExpireAt returns the ExpireAt field value if set, zero value otherwise.
func (o *PublicDownloadShare) GetExpireAt() time.Time {
	if o == nil || IsNil(o.ExpireAt) {
		var ret time.Time
		return ret
	}
	return *o.ExpireAt
}

// GetExpireAtOk returns a tuple with the ExpireAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicDownloadShare) GetExpireAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpireAt) {
		return nil, false
	}
	return o.ExpireAt, true
}

// HasExpireAt returns a boolean if a field has been set.
func (o *PublicDownloadShare) HasExpireAt() bool {
	if o != nil && !IsNil(o.ExpireAt) {
		return true
	}

	return false
}

// SetExpireAt gets a reference to the given time.Time and assigns it to the ExpireAt field.
func (o *PublicDownloadShare) SetExpireAt(v time.Time) {
	o.ExpireAt = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *PublicDownloadShare) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicDownloadShare) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *PublicDownloadShare) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *PublicDownloadShare) SetNotes(v string) {
	o.Notes = &v
}

// GetIsEncrypted returns the IsEncrypted field value if set, zero value otherwise.
func (o *PublicDownloadShare) GetIsEncrypted() bool {
	if o == nil || IsNil(o.IsEncrypted) {
		var ret bool
		return ret
	}
	return *o.IsEncrypted
}

// GetIsEncryptedOk returns a tuple with the IsEncrypted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicDownloadShare) GetIsEncryptedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEncrypted) {
		return nil, false
	}
	return o.IsEncrypted, true
}

// HasIsEncrypted returns a boolean if a field has been set.
func (o *PublicDownloadShare) HasIsEncrypted() bool {
	if o != nil && !IsNil(o.IsEncrypted) {
		return true
	}

	return false
}

// SetIsEncrypted gets a reference to the given bool and assigns it to the IsEncrypted field.
func (o *PublicDownloadShare) SetIsEncrypted(v bool) {
	o.IsEncrypted = &v
}

// GetFileKey returns the FileKey field value if set, zero value otherwise.
func (o *PublicDownloadShare) GetFileKey() FileKey {
	if o == nil || IsNil(o.FileKey) {
		var ret FileKey
		return ret
	}
	return *o.FileKey
}

// GetFileKeyOk returns a tuple with the FileKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicDownloadShare) GetFileKeyOk() (*FileKey, bool) {
	if o == nil || IsNil(o.FileKey) {
		return nil, false
	}
	return o.FileKey, true
}

// HasFileKey returns a boolean if a field has been set.
func (o *PublicDownloadShare) HasFileKey() bool {
	if o != nil && !IsNil(o.FileKey) {
		return true
	}

	return false
}

// SetFileKey gets a reference to the given FileKey and assigns it to the FileKey field.
func (o *PublicDownloadShare) SetFileKey(v FileKey) {
	o.FileKey = &v
}

// GetPrivateKeyContainer returns the PrivateKeyContainer field value if set, zero value otherwise.
func (o *PublicDownloadShare) GetPrivateKeyContainer() PrivateKeyContainer {
	if o == nil || IsNil(o.PrivateKeyContainer) {
		var ret PrivateKeyContainer
		return ret
	}
	return *o.PrivateKeyContainer
}

// GetPrivateKeyContainerOk returns a tuple with the PrivateKeyContainer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicDownloadShare) GetPrivateKeyContainerOk() (*PrivateKeyContainer, bool) {
	if o == nil || IsNil(o.PrivateKeyContainer) {
		return nil, false
	}
	return o.PrivateKeyContainer, true
}

// HasPrivateKeyContainer returns a boolean if a field has been set.
func (o *PublicDownloadShare) HasPrivateKeyContainer() bool {
	if o != nil && !IsNil(o.PrivateKeyContainer) {
		return true
	}

	return false
}

// SetPrivateKeyContainer gets a reference to the given PrivateKeyContainer and assigns it to the PrivateKeyContainer field.
func (o *PublicDownloadShare) SetPrivateKeyContainer(v PrivateKeyContainer) {
	o.PrivateKeyContainer = &v
}

// GetVirusProtectionInfo returns the VirusProtectionInfo field value if set, zero value otherwise.
func (o *PublicDownloadShare) GetVirusProtectionInfo() VirusProtectionInfo {
	if o == nil || IsNil(o.VirusProtectionInfo) {
		var ret VirusProtectionInfo
		return ret
	}
	return *o.VirusProtectionInfo
}

// GetVirusProtectionInfoOk returns a tuple with the VirusProtectionInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicDownloadShare) GetVirusProtectionInfoOk() (*VirusProtectionInfo, bool) {
	if o == nil || IsNil(o.VirusProtectionInfo) {
		return nil, false
	}
	return o.VirusProtectionInfo, true
}

// HasVirusProtectionInfo returns a boolean if a field has been set.
func (o *PublicDownloadShare) HasVirusProtectionInfo() bool {
	if o != nil && !IsNil(o.VirusProtectionInfo) {
		return true
	}

	return false
}

// SetVirusProtectionInfo gets a reference to the given VirusProtectionInfo and assigns it to the VirusProtectionInfo field.
func (o *PublicDownloadShare) SetVirusProtectionInfo(v VirusProtectionInfo) {
	o.VirusProtectionInfo = &v
}

func (o PublicDownloadShare) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicDownloadShare) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["isProtected"] = o.IsProtected
	toSerialize["fileName"] = o.FileName
	toSerialize["size"] = o.Size
	toSerialize["limitReached"] = o.LimitReached
	toSerialize["creatorName"] = o.CreatorName
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["hasDownloadLimit"] = o.HasDownloadLimit
	toSerialize["mediaType"] = o.MediaType
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.CreatorUsername) {
		toSerialize["creatorUsername"] = o.CreatorUsername
	}
	if !IsNil(o.ExpireAt) {
		toSerialize["expireAt"] = o.ExpireAt
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.IsEncrypted) {
		toSerialize["isEncrypted"] = o.IsEncrypted
	}
	if !IsNil(o.FileKey) {
		toSerialize["fileKey"] = o.FileKey
	}
	if !IsNil(o.PrivateKeyContainer) {
		toSerialize["privateKeyContainer"] = o.PrivateKeyContainer
	}
	if !IsNil(o.VirusProtectionInfo) {
		toSerialize["virusProtectionInfo"] = o.VirusProtectionInfo
	}
	return toSerialize, nil
}

func (o *PublicDownloadShare) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"isProtected",
		"fileName",
		"size",
		"limitReached",
		"creatorName",
		"createdAt",
		"hasDownloadLimit",
		"mediaType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicDownloadShare := _PublicDownloadShare{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicDownloadShare)

	if err != nil {
		return err
	}

	*o = PublicDownloadShare(varPublicDownloadShare)

	return err
}

type NullablePublicDownloadShare struct {
	value *PublicDownloadShare
	isSet bool
}

func (v NullablePublicDownloadShare) Get() *PublicDownloadShare {
	return v.value
}

func (v *NullablePublicDownloadShare) Set(val *PublicDownloadShare) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicDownloadShare) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicDownloadShare) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicDownloadShare(val *PublicDownloadShare) *NullablePublicDownloadShare {
	return &NullablePublicDownloadShare{value: val, isSet: true}
}

func (v NullablePublicDownloadShare) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicDownloadShare) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
