/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AuditUserPermission type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditUserPermission{}

// AuditUserPermission Audit user permissions report
type AuditUserPermission struct {
	// Unique identifier for the user
	UserId int64 `json:"userId"`
	// User login name
	UserLogin string `json:"userLogin"`
	// User first name
	UserFirstName string `json:"userFirstName"`
	// User last name
	UserLastName string          `json:"userLastName"`
	Permissions  NodePermissions `json:"permissions"`
}

type _AuditUserPermission AuditUserPermission

// NewAuditUserPermission instantiates a new AuditUserPermission object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditUserPermission(userId int64, userLogin string, userFirstName string, userLastName string, permissions NodePermissions) *AuditUserPermission {
	this := AuditUserPermission{}
	this.UserId = userId
	this.UserLogin = userLogin
	this.UserFirstName = userFirstName
	this.UserLastName = userLastName
	this.Permissions = permissions
	return &this
}

// NewAuditUserPermissionWithDefaults instantiates a new AuditUserPermission object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditUserPermissionWithDefaults() *AuditUserPermission {
	this := AuditUserPermission{}
	return &this
}

// GetUserId returns the UserId field value
func (o *AuditUserPermission) GetUserId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *AuditUserPermission) GetUserIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *AuditUserPermission) SetUserId(v int64) {
	o.UserId = v
}

// GetUserLogin returns the UserLogin field value
func (o *AuditUserPermission) GetUserLogin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserLogin
}

// GetUserLoginOk returns a tuple with the UserLogin field value
// and a boolean to check if the value has been set.
func (o *AuditUserPermission) GetUserLoginOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserLogin, true
}

// SetUserLogin sets field value
func (o *AuditUserPermission) SetUserLogin(v string) {
	o.UserLogin = v
}

// GetUserFirstName returns the UserFirstName field value
func (o *AuditUserPermission) GetUserFirstName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserFirstName
}

// GetUserFirstNameOk returns a tuple with the UserFirstName field value
// and a boolean to check if the value has been set.
func (o *AuditUserPermission) GetUserFirstNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserFirstName, true
}

// SetUserFirstName sets field value
func (o *AuditUserPermission) SetUserFirstName(v string) {
	o.UserFirstName = v
}

// GetUserLastName returns the UserLastName field value
func (o *AuditUserPermission) GetUserLastName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserLastName
}

// GetUserLastNameOk returns a tuple with the UserLastName field value
// and a boolean to check if the value has been set.
func (o *AuditUserPermission) GetUserLastNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserLastName, true
}

// SetUserLastName sets field value
func (o *AuditUserPermission) SetUserLastName(v string) {
	o.UserLastName = v
}

// GetPermissions returns the Permissions field value
func (o *AuditUserPermission) GetPermissions() NodePermissions {
	if o == nil {
		var ret NodePermissions
		return ret
	}

	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value
// and a boolean to check if the value has been set.
func (o *AuditUserPermission) GetPermissionsOk() (*NodePermissions, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Permissions, true
}

// SetPermissions sets field value
func (o *AuditUserPermission) SetPermissions(v NodePermissions) {
	o.Permissions = v
}

func (o AuditUserPermission) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditUserPermission) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["userId"] = o.UserId
	toSerialize["userLogin"] = o.UserLogin
	toSerialize["userFirstName"] = o.UserFirstName
	toSerialize["userLastName"] = o.UserLastName
	toSerialize["permissions"] = o.Permissions
	return toSerialize, nil
}

func (o *AuditUserPermission) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"userId",
		"userLogin",
		"userFirstName",
		"userLastName",
		"permissions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuditUserPermission := _AuditUserPermission{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAuditUserPermission)

	if err != nil {
		return err
	}

	*o = AuditUserPermission(varAuditUserPermission)

	return err
}

type NullableAuditUserPermission struct {
	value *AuditUserPermission
	isSet bool
}

func (v NullableAuditUserPermission) Get() *AuditUserPermission {
	return v.value
}

func (v *NullableAuditUserPermission) Set(val *AuditUserPermission) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditUserPermission) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditUserPermission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditUserPermission(val *AuditUserPermission) *NullableAuditUserPermission {
	return &NullableAuditUserPermission{value: val, isSet: true}
}

func (v NullableAuditUserPermission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditUserPermission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
