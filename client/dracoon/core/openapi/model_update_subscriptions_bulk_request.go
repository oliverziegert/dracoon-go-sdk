/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UpdateSubscriptionsBulkRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateSubscriptionsBulkRequest{}

// UpdateSubscriptionsBulkRequest Request model for updating subscriptions
type UpdateSubscriptionsBulkRequest struct {
	// Creates or deletes a subscription on each item in an array of objects.
	IsSubscribed bool `json:"isSubscribed"`
	// List of ids
	ObjectIds []int64 `json:"objectIds"`
}

type _UpdateSubscriptionsBulkRequest UpdateSubscriptionsBulkRequest

// NewUpdateSubscriptionsBulkRequest instantiates a new UpdateSubscriptionsBulkRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateSubscriptionsBulkRequest(isSubscribed bool, objectIds []int64) *UpdateSubscriptionsBulkRequest {
	this := UpdateSubscriptionsBulkRequest{}
	this.IsSubscribed = isSubscribed
	this.ObjectIds = objectIds
	return &this
}

// NewUpdateSubscriptionsBulkRequestWithDefaults instantiates a new UpdateSubscriptionsBulkRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateSubscriptionsBulkRequestWithDefaults() *UpdateSubscriptionsBulkRequest {
	this := UpdateSubscriptionsBulkRequest{}
	return &this
}

// GetIsSubscribed returns the IsSubscribed field value
func (o *UpdateSubscriptionsBulkRequest) GetIsSubscribed() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsSubscribed
}

// GetIsSubscribedOk returns a tuple with the IsSubscribed field value
// and a boolean to check if the value has been set.
func (o *UpdateSubscriptionsBulkRequest) GetIsSubscribedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsSubscribed, true
}

// SetIsSubscribed sets field value
func (o *UpdateSubscriptionsBulkRequest) SetIsSubscribed(v bool) {
	o.IsSubscribed = v
}

// GetObjectIds returns the ObjectIds field value
func (o *UpdateSubscriptionsBulkRequest) GetObjectIds() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}

	return o.ObjectIds
}

// GetObjectIdsOk returns a tuple with the ObjectIds field value
// and a boolean to check if the value has been set.
func (o *UpdateSubscriptionsBulkRequest) GetObjectIdsOk() ([]int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ObjectIds, true
}

// SetObjectIds sets field value
func (o *UpdateSubscriptionsBulkRequest) SetObjectIds(v []int64) {
	o.ObjectIds = v
}

func (o UpdateSubscriptionsBulkRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateSubscriptionsBulkRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["isSubscribed"] = o.IsSubscribed
	toSerialize["objectIds"] = o.ObjectIds
	return toSerialize, nil
}

func (o *UpdateSubscriptionsBulkRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"isSubscribed",
		"objectIds",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateSubscriptionsBulkRequest := _UpdateSubscriptionsBulkRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateSubscriptionsBulkRequest)

	if err != nil {
		return err
	}

	*o = UpdateSubscriptionsBulkRequest(varUpdateSubscriptionsBulkRequest)

	return err
}

type NullableUpdateSubscriptionsBulkRequest struct {
	value *UpdateSubscriptionsBulkRequest
	isSet bool
}

func (v NullableUpdateSubscriptionsBulkRequest) Get() *UpdateSubscriptionsBulkRequest {
	return v.value
}

func (v *NullableUpdateSubscriptionsBulkRequest) Set(val *UpdateSubscriptionsBulkRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateSubscriptionsBulkRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateSubscriptionsBulkRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateSubscriptionsBulkRequest(val *UpdateSubscriptionsBulkRequest) *NullableUpdateSubscriptionsBulkRequest {
	return &NullableUpdateSubscriptionsBulkRequest{value: val, isSet: true}
}

func (v NullableUpdateSubscriptionsBulkRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateSubscriptionsBulkRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
