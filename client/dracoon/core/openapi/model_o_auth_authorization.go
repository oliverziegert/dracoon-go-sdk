/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the OAuthAuthorization type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OAuthAuthorization{}

// OAuthAuthorization OAuth authorization
type OAuthAuthorization struct {
	// ID of the OAuth client
	ClientId string `json:"clientId"`
	// Name, which is shown at the client configuration and authorization.
	ClientName string `json:"clientName"`
	// &#128640; Since v4.12.0  User agent category.
	UserAgentCategory string `json:"userAgentCategory"`
	// &#128640; Since v4.12.0  ID of the OAuth authorization
	Id *int64 `json:"id,omitempty"`
	// &#128640; Since v4.12.0  Determines whether client is a standard client.
	IsStandard *bool `json:"isStandard,omitempty"`
	// &#128640; Since v4.13.0  Creation date of the authorization
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// &#128640; Since v4.13.0  Usage date of the authorization  (Time of last usage.)
	UsedAt *time.Time `json:"usedAt,omitempty"`
	// Expiration date of the authorization
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`
	// &#128640; Since v4.12.0  User agent type.
	UserAgentType *string `json:"userAgentType,omitempty"`
	// &#128640; Since v4.12.0  User agent OS.
	UserAgentOs *string `json:"userAgentOs,omitempty"`
	// &#128640; Since v4.12.0  User agent info.
	UserAgentInfo *string `json:"userAgentInfo,omitempty"`
	// &#128640; Since v4.25.0  Determines whether authorization matches the one from Authorization Header
	IsCurrentAuthorization *bool `json:"isCurrentAuthorization,omitempty"`
}

type _OAuthAuthorization OAuthAuthorization

// NewOAuthAuthorization instantiates a new OAuthAuthorization object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOAuthAuthorization(clientId string, clientName string, userAgentCategory string) *OAuthAuthorization {
	this := OAuthAuthorization{}
	this.ClientId = clientId
	this.ClientName = clientName
	this.UserAgentCategory = userAgentCategory
	return &this
}

// NewOAuthAuthorizationWithDefaults instantiates a new OAuthAuthorization object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOAuthAuthorizationWithDefaults() *OAuthAuthorization {
	this := OAuthAuthorization{}
	return &this
}

// GetClientId returns the ClientId field value
func (o *OAuthAuthorization) GetClientId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value
// and a boolean to check if the value has been set.
func (o *OAuthAuthorization) GetClientIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientId, true
}

// SetClientId sets field value
func (o *OAuthAuthorization) SetClientId(v string) {
	o.ClientId = v
}

// GetClientName returns the ClientName field value
func (o *OAuthAuthorization) GetClientName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientName
}

// GetClientNameOk returns a tuple with the ClientName field value
// and a boolean to check if the value has been set.
func (o *OAuthAuthorization) GetClientNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientName, true
}

// SetClientName sets field value
func (o *OAuthAuthorization) SetClientName(v string) {
	o.ClientName = v
}

// GetUserAgentCategory returns the UserAgentCategory field value
func (o *OAuthAuthorization) GetUserAgentCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserAgentCategory
}

// GetUserAgentCategoryOk returns a tuple with the UserAgentCategory field value
// and a boolean to check if the value has been set.
func (o *OAuthAuthorization) GetUserAgentCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserAgentCategory, true
}

// SetUserAgentCategory sets field value
func (o *OAuthAuthorization) SetUserAgentCategory(v string) {
	o.UserAgentCategory = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OAuthAuthorization) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthAuthorization) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OAuthAuthorization) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *OAuthAuthorization) SetId(v int64) {
	o.Id = &v
}

// GetIsStandard returns the IsStandard field value if set, zero value otherwise.
func (o *OAuthAuthorization) GetIsStandard() bool {
	if o == nil || IsNil(o.IsStandard) {
		var ret bool
		return ret
	}
	return *o.IsStandard
}

// GetIsStandardOk returns a tuple with the IsStandard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthAuthorization) GetIsStandardOk() (*bool, bool) {
	if o == nil || IsNil(o.IsStandard) {
		return nil, false
	}
	return o.IsStandard, true
}

// HasIsStandard returns a boolean if a field has been set.
func (o *OAuthAuthorization) HasIsStandard() bool {
	if o != nil && !IsNil(o.IsStandard) {
		return true
	}

	return false
}

// SetIsStandard gets a reference to the given bool and assigns it to the IsStandard field.
func (o *OAuthAuthorization) SetIsStandard(v bool) {
	o.IsStandard = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *OAuthAuthorization) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthAuthorization) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *OAuthAuthorization) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *OAuthAuthorization) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUsedAt returns the UsedAt field value if set, zero value otherwise.
func (o *OAuthAuthorization) GetUsedAt() time.Time {
	if o == nil || IsNil(o.UsedAt) {
		var ret time.Time
		return ret
	}
	return *o.UsedAt
}

// GetUsedAtOk returns a tuple with the UsedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthAuthorization) GetUsedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UsedAt) {
		return nil, false
	}
	return o.UsedAt, true
}

// HasUsedAt returns a boolean if a field has been set.
func (o *OAuthAuthorization) HasUsedAt() bool {
	if o != nil && !IsNil(o.UsedAt) {
		return true
	}

	return false
}

// SetUsedAt gets a reference to the given time.Time and assigns it to the UsedAt field.
func (o *OAuthAuthorization) SetUsedAt(v time.Time) {
	o.UsedAt = &v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *OAuthAuthorization) GetExpiresAt() time.Time {
	if o == nil || IsNil(o.ExpiresAt) {
		var ret time.Time
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthAuthorization) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpiresAt) {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *OAuthAuthorization) HasExpiresAt() bool {
	if o != nil && !IsNil(o.ExpiresAt) {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given time.Time and assigns it to the ExpiresAt field.
func (o *OAuthAuthorization) SetExpiresAt(v time.Time) {
	o.ExpiresAt = &v
}

// GetUserAgentType returns the UserAgentType field value if set, zero value otherwise.
func (o *OAuthAuthorization) GetUserAgentType() string {
	if o == nil || IsNil(o.UserAgentType) {
		var ret string
		return ret
	}
	return *o.UserAgentType
}

// GetUserAgentTypeOk returns a tuple with the UserAgentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthAuthorization) GetUserAgentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.UserAgentType) {
		return nil, false
	}
	return o.UserAgentType, true
}

// HasUserAgentType returns a boolean if a field has been set.
func (o *OAuthAuthorization) HasUserAgentType() bool {
	if o != nil && !IsNil(o.UserAgentType) {
		return true
	}

	return false
}

// SetUserAgentType gets a reference to the given string and assigns it to the UserAgentType field.
func (o *OAuthAuthorization) SetUserAgentType(v string) {
	o.UserAgentType = &v
}

// GetUserAgentOs returns the UserAgentOs field value if set, zero value otherwise.
func (o *OAuthAuthorization) GetUserAgentOs() string {
	if o == nil || IsNil(o.UserAgentOs) {
		var ret string
		return ret
	}
	return *o.UserAgentOs
}

// GetUserAgentOsOk returns a tuple with the UserAgentOs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthAuthorization) GetUserAgentOsOk() (*string, bool) {
	if o == nil || IsNil(o.UserAgentOs) {
		return nil, false
	}
	return o.UserAgentOs, true
}

// HasUserAgentOs returns a boolean if a field has been set.
func (o *OAuthAuthorization) HasUserAgentOs() bool {
	if o != nil && !IsNil(o.UserAgentOs) {
		return true
	}

	return false
}

// SetUserAgentOs gets a reference to the given string and assigns it to the UserAgentOs field.
func (o *OAuthAuthorization) SetUserAgentOs(v string) {
	o.UserAgentOs = &v
}

// GetUserAgentInfo returns the UserAgentInfo field value if set, zero value otherwise.
func (o *OAuthAuthorization) GetUserAgentInfo() string {
	if o == nil || IsNil(o.UserAgentInfo) {
		var ret string
		return ret
	}
	return *o.UserAgentInfo
}

// GetUserAgentInfoOk returns a tuple with the UserAgentInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthAuthorization) GetUserAgentInfoOk() (*string, bool) {
	if o == nil || IsNil(o.UserAgentInfo) {
		return nil, false
	}
	return o.UserAgentInfo, true
}

// HasUserAgentInfo returns a boolean if a field has been set.
func (o *OAuthAuthorization) HasUserAgentInfo() bool {
	if o != nil && !IsNil(o.UserAgentInfo) {
		return true
	}

	return false
}

// SetUserAgentInfo gets a reference to the given string and assigns it to the UserAgentInfo field.
func (o *OAuthAuthorization) SetUserAgentInfo(v string) {
	o.UserAgentInfo = &v
}

// GetIsCurrentAuthorization returns the IsCurrentAuthorization field value if set, zero value otherwise.
func (o *OAuthAuthorization) GetIsCurrentAuthorization() bool {
	if o == nil || IsNil(o.IsCurrentAuthorization) {
		var ret bool
		return ret
	}
	return *o.IsCurrentAuthorization
}

// GetIsCurrentAuthorizationOk returns a tuple with the IsCurrentAuthorization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthAuthorization) GetIsCurrentAuthorizationOk() (*bool, bool) {
	if o == nil || IsNil(o.IsCurrentAuthorization) {
		return nil, false
	}
	return o.IsCurrentAuthorization, true
}

// HasIsCurrentAuthorization returns a boolean if a field has been set.
func (o *OAuthAuthorization) HasIsCurrentAuthorization() bool {
	if o != nil && !IsNil(o.IsCurrentAuthorization) {
		return true
	}

	return false
}

// SetIsCurrentAuthorization gets a reference to the given bool and assigns it to the IsCurrentAuthorization field.
func (o *OAuthAuthorization) SetIsCurrentAuthorization(v bool) {
	o.IsCurrentAuthorization = &v
}

func (o OAuthAuthorization) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OAuthAuthorization) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["clientId"] = o.ClientId
	toSerialize["clientName"] = o.ClientName
	toSerialize["userAgentCategory"] = o.UserAgentCategory
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IsStandard) {
		toSerialize["isStandard"] = o.IsStandard
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.UsedAt) {
		toSerialize["usedAt"] = o.UsedAt
	}
	if !IsNil(o.ExpiresAt) {
		toSerialize["expiresAt"] = o.ExpiresAt
	}
	if !IsNil(o.UserAgentType) {
		toSerialize["userAgentType"] = o.UserAgentType
	}
	if !IsNil(o.UserAgentOs) {
		toSerialize["userAgentOs"] = o.UserAgentOs
	}
	if !IsNil(o.UserAgentInfo) {
		toSerialize["userAgentInfo"] = o.UserAgentInfo
	}
	if !IsNil(o.IsCurrentAuthorization) {
		toSerialize["isCurrentAuthorization"] = o.IsCurrentAuthorization
	}
	return toSerialize, nil
}

func (o *OAuthAuthorization) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"clientId",
		"clientName",
		"userAgentCategory",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOAuthAuthorization := _OAuthAuthorization{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOAuthAuthorization)

	if err != nil {
		return err
	}

	*o = OAuthAuthorization(varOAuthAuthorization)

	return err
}

type NullableOAuthAuthorization struct {
	value *OAuthAuthorization
	isSet bool
}

func (v NullableOAuthAuthorization) Get() *OAuthAuthorization {
	return v.value
}

func (v *NullableOAuthAuthorization) Set(val *OAuthAuthorization) {
	v.value = val
	v.isSet = true
}

func (v NullableOAuthAuthorization) IsSet() bool {
	return v.isSet
}

func (v *NullableOAuthAuthorization) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOAuthAuthorization(val *OAuthAuthorization) *NullableOAuthAuthorization {
	return &NullableOAuthAuthorization{value: val, isSet: true}
}

func (v NullableOAuthAuthorization) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOAuthAuthorization) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
