/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ActiveDirectory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActiveDirectory{}

// ActiveDirectory Active Directory information
type ActiveDirectory struct {
	// ID
	Id int32 `json:"id"`
	// Unique name for an Active Directory configuration
	Alias string `json:"alias"`
	// Is available for all customers
	IsGlobalAvailable bool `json:"isGlobalAvailable"`
}

type _ActiveDirectory ActiveDirectory

// NewActiveDirectory instantiates a new ActiveDirectory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveDirectory(id int32, alias string, isGlobalAvailable bool) *ActiveDirectory {
	this := ActiveDirectory{}
	this.Id = id
	this.Alias = alias
	this.IsGlobalAvailable = isGlobalAvailable
	return &this
}

// NewActiveDirectoryWithDefaults instantiates a new ActiveDirectory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveDirectoryWithDefaults() *ActiveDirectory {
	this := ActiveDirectory{}
	return &this
}

// GetId returns the Id field value
func (o *ActiveDirectory) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ActiveDirectory) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ActiveDirectory) SetId(v int32) {
	o.Id = v
}

// GetAlias returns the Alias field value
func (o *ActiveDirectory) GetAlias() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Alias
}

// GetAliasOk returns a tuple with the Alias field value
// and a boolean to check if the value has been set.
func (o *ActiveDirectory) GetAliasOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Alias, true
}

// SetAlias sets field value
func (o *ActiveDirectory) SetAlias(v string) {
	o.Alias = v
}

// GetIsGlobalAvailable returns the IsGlobalAvailable field value
func (o *ActiveDirectory) GetIsGlobalAvailable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsGlobalAvailable
}

// GetIsGlobalAvailableOk returns a tuple with the IsGlobalAvailable field value
// and a boolean to check if the value has been set.
func (o *ActiveDirectory) GetIsGlobalAvailableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsGlobalAvailable, true
}

// SetIsGlobalAvailable sets field value
func (o *ActiveDirectory) SetIsGlobalAvailable(v bool) {
	o.IsGlobalAvailable = v
}

func (o ActiveDirectory) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActiveDirectory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["alias"] = o.Alias
	toSerialize["isGlobalAvailable"] = o.IsGlobalAvailable
	return toSerialize, nil
}

func (o *ActiveDirectory) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"alias",
		"isGlobalAvailable",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varActiveDirectory := _ActiveDirectory{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varActiveDirectory)

	if err != nil {
		return err
	}

	*o = ActiveDirectory(varActiveDirectory)

	return err
}

type NullableActiveDirectory struct {
	value *ActiveDirectory
	isSet bool
}

func (v NullableActiveDirectory) Get() *ActiveDirectory {
	return v.value
}

func (v *NullableActiveDirectory) Set(val *ActiveDirectory) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveDirectory) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveDirectory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveDirectory(val *ActiveDirectory) *NullableActiveDirectory {
	return &NullableActiveDirectory{value: val, isSet: true}
}

func (v NullableActiveDirectory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveDirectory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
