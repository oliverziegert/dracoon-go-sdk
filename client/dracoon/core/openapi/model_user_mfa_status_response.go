/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UserMfaStatusResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserMfaStatusResponse{}

// UserMfaStatusResponse Contains information about the user's MFA status
type UserMfaStatusResponse struct {
	// Determines whether multi-factor authentication is enforced
	MfaEnforced bool `json:"mfaEnforced"`
	// Information about the second factor authentication method setup by the user
	MfaSetups []MfaSetupStatus `json:"mfaSetups"`
}

type _UserMfaStatusResponse UserMfaStatusResponse

// NewUserMfaStatusResponse instantiates a new UserMfaStatusResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserMfaStatusResponse(mfaEnforced bool, mfaSetups []MfaSetupStatus) *UserMfaStatusResponse {
	this := UserMfaStatusResponse{}
	this.MfaEnforced = mfaEnforced
	this.MfaSetups = mfaSetups
	return &this
}

// NewUserMfaStatusResponseWithDefaults instantiates a new UserMfaStatusResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserMfaStatusResponseWithDefaults() *UserMfaStatusResponse {
	this := UserMfaStatusResponse{}
	return &this
}

// GetMfaEnforced returns the MfaEnforced field value
func (o *UserMfaStatusResponse) GetMfaEnforced() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.MfaEnforced
}

// GetMfaEnforcedOk returns a tuple with the MfaEnforced field value
// and a boolean to check if the value has been set.
func (o *UserMfaStatusResponse) GetMfaEnforcedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MfaEnforced, true
}

// SetMfaEnforced sets field value
func (o *UserMfaStatusResponse) SetMfaEnforced(v bool) {
	o.MfaEnforced = v
}

// GetMfaSetups returns the MfaSetups field value
func (o *UserMfaStatusResponse) GetMfaSetups() []MfaSetupStatus {
	if o == nil {
		var ret []MfaSetupStatus
		return ret
	}

	return o.MfaSetups
}

// GetMfaSetupsOk returns a tuple with the MfaSetups field value
// and a boolean to check if the value has been set.
func (o *UserMfaStatusResponse) GetMfaSetupsOk() ([]MfaSetupStatus, bool) {
	if o == nil {
		return nil, false
	}
	return o.MfaSetups, true
}

// SetMfaSetups sets field value
func (o *UserMfaStatusResponse) SetMfaSetups(v []MfaSetupStatus) {
	o.MfaSetups = v
}

func (o UserMfaStatusResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserMfaStatusResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["mfaEnforced"] = o.MfaEnforced
	toSerialize["mfaSetups"] = o.MfaSetups
	return toSerialize, nil
}

func (o *UserMfaStatusResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mfaEnforced",
		"mfaSetups",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserMfaStatusResponse := _UserMfaStatusResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserMfaStatusResponse)

	if err != nil {
		return err
	}

	*o = UserMfaStatusResponse(varUserMfaStatusResponse)

	return err
}

type NullableUserMfaStatusResponse struct {
	value *UserMfaStatusResponse
	isSet bool
}

func (v NullableUserMfaStatusResponse) Get() *UserMfaStatusResponse {
	return v.value
}

func (v *NullableUserMfaStatusResponse) Set(val *UserMfaStatusResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUserMfaStatusResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUserMfaStatusResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserMfaStatusResponse(val *UserMfaStatusResponse) *NullableUserMfaStatusResponse {
	return &NullableUserMfaStatusResponse{value: val, isSet: true}
}

func (v NullableUserMfaStatusResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserMfaStatusResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
