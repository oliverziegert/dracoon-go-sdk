/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ShareClassificationPolicies type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ShareClassificationPolicies{}

// ShareClassificationPolicies Shares classification policies
type ShareClassificationPolicies struct {
	// &#128640; Since v4.30.0  Minimum classification that causes download shares to require a password. `0` means no password will be enforced.
	ClassificationRequiresSharePassword *int32 `json:"classificationRequiresSharePassword,omitempty"`
}

// NewShareClassificationPolicies instantiates a new ShareClassificationPolicies object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShareClassificationPolicies() *ShareClassificationPolicies {
	this := ShareClassificationPolicies{}
	return &this
}

// NewShareClassificationPoliciesWithDefaults instantiates a new ShareClassificationPolicies object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShareClassificationPoliciesWithDefaults() *ShareClassificationPolicies {
	this := ShareClassificationPolicies{}
	return &this
}

// GetClassificationRequiresSharePassword returns the ClassificationRequiresSharePassword field value if set, zero value otherwise.
func (o *ShareClassificationPolicies) GetClassificationRequiresSharePassword() int32 {
	if o == nil || IsNil(o.ClassificationRequiresSharePassword) {
		var ret int32
		return ret
	}
	return *o.ClassificationRequiresSharePassword
}

// GetClassificationRequiresSharePasswordOk returns a tuple with the ClassificationRequiresSharePassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareClassificationPolicies) GetClassificationRequiresSharePasswordOk() (*int32, bool) {
	if o == nil || IsNil(o.ClassificationRequiresSharePassword) {
		return nil, false
	}
	return o.ClassificationRequiresSharePassword, true
}

// HasClassificationRequiresSharePassword returns a boolean if a field has been set.
func (o *ShareClassificationPolicies) HasClassificationRequiresSharePassword() bool {
	if o != nil && !IsNil(o.ClassificationRequiresSharePassword) {
		return true
	}

	return false
}

// SetClassificationRequiresSharePassword gets a reference to the given int32 and assigns it to the ClassificationRequiresSharePassword field.
func (o *ShareClassificationPolicies) SetClassificationRequiresSharePassword(v int32) {
	o.ClassificationRequiresSharePassword = &v
}

func (o ShareClassificationPolicies) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ShareClassificationPolicies) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClassificationRequiresSharePassword) {
		toSerialize["classificationRequiresSharePassword"] = o.ClassificationRequiresSharePassword
	}
	return toSerialize, nil
}

type NullableShareClassificationPolicies struct {
	value *ShareClassificationPolicies
	isSet bool
}

func (v NullableShareClassificationPolicies) Get() *ShareClassificationPolicies {
	return v.value
}

func (v *NullableShareClassificationPolicies) Set(val *ShareClassificationPolicies) {
	v.value = val
	v.isSet = true
}

func (v NullableShareClassificationPolicies) IsSet() bool {
	return v.isSet
}

func (v *NullableShareClassificationPolicies) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShareClassificationPolicies(val *ShareClassificationPolicies) *NullableShareClassificationPolicies {
	return &NullableShareClassificationPolicies{value: val, isSet: true}
}

func (v NullableShareClassificationPolicies) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShareClassificationPolicies) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
