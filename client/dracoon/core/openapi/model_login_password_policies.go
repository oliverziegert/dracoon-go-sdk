/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the LoginPasswordPolicies type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LoginPasswordPolicies{}

// LoginPasswordPolicies Login password policies
type LoginPasswordPolicies struct {
	CharacterRules CharacterRules `json:"characterRules"`
	// Minimum number of characters a password must contain
	MinLength int32 `json:"minLength"`
	// Determines whether a password must NOT contain word(s) from a dictionary
	RejectDictionaryWords bool `json:"rejectDictionaryWords"`
	// Determines whether a password must NOT contain user info (first name, last name, email, user name)
	RejectUserInfo bool `json:"rejectUserInfo"`
	// Determines whether a password must NOT contain keyboard patterns (e.g. `qwertz`, `asdf`)  (min. 4 character pattern)
	RejectKeyboardPatterns bool `json:"rejectKeyboardPatterns"`
	// Number of passwords to archive  (must be between `0` and `10`; `0` means that password history is disabled)
	NumberOfArchivedPasswords int32              `json:"numberOfArchivedPasswords"`
	PasswordExpiration        PasswordExpiration `json:"passwordExpiration"`
	UserLockout               UserLockout        `json:"userLockout"`
	// Modification date
	UpdatedAt time.Time `json:"updatedAt"`
	UpdatedBy UserInfo  `json:"updatedBy"`
}

type _LoginPasswordPolicies LoginPasswordPolicies

// NewLoginPasswordPolicies instantiates a new LoginPasswordPolicies object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoginPasswordPolicies(characterRules CharacterRules, minLength int32, rejectDictionaryWords bool, rejectUserInfo bool, rejectKeyboardPatterns bool, numberOfArchivedPasswords int32, passwordExpiration PasswordExpiration, userLockout UserLockout, updatedAt time.Time, updatedBy UserInfo) *LoginPasswordPolicies {
	this := LoginPasswordPolicies{}
	this.CharacterRules = characterRules
	this.MinLength = minLength
	this.RejectDictionaryWords = rejectDictionaryWords
	this.RejectUserInfo = rejectUserInfo
	this.RejectKeyboardPatterns = rejectKeyboardPatterns
	this.NumberOfArchivedPasswords = numberOfArchivedPasswords
	this.PasswordExpiration = passwordExpiration
	this.UserLockout = userLockout
	this.UpdatedAt = updatedAt
	this.UpdatedBy = updatedBy
	return &this
}

// NewLoginPasswordPoliciesWithDefaults instantiates a new LoginPasswordPolicies object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoginPasswordPoliciesWithDefaults() *LoginPasswordPolicies {
	this := LoginPasswordPolicies{}
	return &this
}

// GetCharacterRules returns the CharacterRules field value
func (o *LoginPasswordPolicies) GetCharacterRules() CharacterRules {
	if o == nil {
		var ret CharacterRules
		return ret
	}

	return o.CharacterRules
}

// GetCharacterRulesOk returns a tuple with the CharacterRules field value
// and a boolean to check if the value has been set.
func (o *LoginPasswordPolicies) GetCharacterRulesOk() (*CharacterRules, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CharacterRules, true
}

// SetCharacterRules sets field value
func (o *LoginPasswordPolicies) SetCharacterRules(v CharacterRules) {
	o.CharacterRules = v
}

// GetMinLength returns the MinLength field value
func (o *LoginPasswordPolicies) GetMinLength() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MinLength
}

// GetMinLengthOk returns a tuple with the MinLength field value
// and a boolean to check if the value has been set.
func (o *LoginPasswordPolicies) GetMinLengthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinLength, true
}

// SetMinLength sets field value
func (o *LoginPasswordPolicies) SetMinLength(v int32) {
	o.MinLength = v
}

// GetRejectDictionaryWords returns the RejectDictionaryWords field value
func (o *LoginPasswordPolicies) GetRejectDictionaryWords() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RejectDictionaryWords
}

// GetRejectDictionaryWordsOk returns a tuple with the RejectDictionaryWords field value
// and a boolean to check if the value has been set.
func (o *LoginPasswordPolicies) GetRejectDictionaryWordsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RejectDictionaryWords, true
}

// SetRejectDictionaryWords sets field value
func (o *LoginPasswordPolicies) SetRejectDictionaryWords(v bool) {
	o.RejectDictionaryWords = v
}

// GetRejectUserInfo returns the RejectUserInfo field value
func (o *LoginPasswordPolicies) GetRejectUserInfo() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RejectUserInfo
}

// GetRejectUserInfoOk returns a tuple with the RejectUserInfo field value
// and a boolean to check if the value has been set.
func (o *LoginPasswordPolicies) GetRejectUserInfoOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RejectUserInfo, true
}

// SetRejectUserInfo sets field value
func (o *LoginPasswordPolicies) SetRejectUserInfo(v bool) {
	o.RejectUserInfo = v
}

// GetRejectKeyboardPatterns returns the RejectKeyboardPatterns field value
func (o *LoginPasswordPolicies) GetRejectKeyboardPatterns() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RejectKeyboardPatterns
}

// GetRejectKeyboardPatternsOk returns a tuple with the RejectKeyboardPatterns field value
// and a boolean to check if the value has been set.
func (o *LoginPasswordPolicies) GetRejectKeyboardPatternsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RejectKeyboardPatterns, true
}

// SetRejectKeyboardPatterns sets field value
func (o *LoginPasswordPolicies) SetRejectKeyboardPatterns(v bool) {
	o.RejectKeyboardPatterns = v
}

// GetNumberOfArchivedPasswords returns the NumberOfArchivedPasswords field value
func (o *LoginPasswordPolicies) GetNumberOfArchivedPasswords() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumberOfArchivedPasswords
}

// GetNumberOfArchivedPasswordsOk returns a tuple with the NumberOfArchivedPasswords field value
// and a boolean to check if the value has been set.
func (o *LoginPasswordPolicies) GetNumberOfArchivedPasswordsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumberOfArchivedPasswords, true
}

// SetNumberOfArchivedPasswords sets field value
func (o *LoginPasswordPolicies) SetNumberOfArchivedPasswords(v int32) {
	o.NumberOfArchivedPasswords = v
}

// GetPasswordExpiration returns the PasswordExpiration field value
func (o *LoginPasswordPolicies) GetPasswordExpiration() PasswordExpiration {
	if o == nil {
		var ret PasswordExpiration
		return ret
	}

	return o.PasswordExpiration
}

// GetPasswordExpirationOk returns a tuple with the PasswordExpiration field value
// and a boolean to check if the value has been set.
func (o *LoginPasswordPolicies) GetPasswordExpirationOk() (*PasswordExpiration, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PasswordExpiration, true
}

// SetPasswordExpiration sets field value
func (o *LoginPasswordPolicies) SetPasswordExpiration(v PasswordExpiration) {
	o.PasswordExpiration = v
}

// GetUserLockout returns the UserLockout field value
func (o *LoginPasswordPolicies) GetUserLockout() UserLockout {
	if o == nil {
		var ret UserLockout
		return ret
	}

	return o.UserLockout
}

// GetUserLockoutOk returns a tuple with the UserLockout field value
// and a boolean to check if the value has been set.
func (o *LoginPasswordPolicies) GetUserLockoutOk() (*UserLockout, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserLockout, true
}

// SetUserLockout sets field value
func (o *LoginPasswordPolicies) SetUserLockout(v UserLockout) {
	o.UserLockout = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *LoginPasswordPolicies) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *LoginPasswordPolicies) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *LoginPasswordPolicies) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetUpdatedBy returns the UpdatedBy field value
func (o *LoginPasswordPolicies) GetUpdatedBy() UserInfo {
	if o == nil {
		var ret UserInfo
		return ret
	}

	return o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value
// and a boolean to check if the value has been set.
func (o *LoginPasswordPolicies) GetUpdatedByOk() (*UserInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedBy, true
}

// SetUpdatedBy sets field value
func (o *LoginPasswordPolicies) SetUpdatedBy(v UserInfo) {
	o.UpdatedBy = v
}

func (o LoginPasswordPolicies) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LoginPasswordPolicies) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["characterRules"] = o.CharacterRules
	toSerialize["minLength"] = o.MinLength
	toSerialize["rejectDictionaryWords"] = o.RejectDictionaryWords
	toSerialize["rejectUserInfo"] = o.RejectUserInfo
	toSerialize["rejectKeyboardPatterns"] = o.RejectKeyboardPatterns
	toSerialize["numberOfArchivedPasswords"] = o.NumberOfArchivedPasswords
	toSerialize["passwordExpiration"] = o.PasswordExpiration
	toSerialize["userLockout"] = o.UserLockout
	toSerialize["updatedAt"] = o.UpdatedAt
	toSerialize["updatedBy"] = o.UpdatedBy
	return toSerialize, nil
}

func (o *LoginPasswordPolicies) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"characterRules",
		"minLength",
		"rejectDictionaryWords",
		"rejectUserInfo",
		"rejectKeyboardPatterns",
		"numberOfArchivedPasswords",
		"passwordExpiration",
		"userLockout",
		"updatedAt",
		"updatedBy",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLoginPasswordPolicies := _LoginPasswordPolicies{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLoginPasswordPolicies)

	if err != nil {
		return err
	}

	*o = LoginPasswordPolicies(varLoginPasswordPolicies)

	return err
}

type NullableLoginPasswordPolicies struct {
	value *LoginPasswordPolicies
	isSet bool
}

func (v NullableLoginPasswordPolicies) Get() *LoginPasswordPolicies {
	return v.value
}

func (v *NullableLoginPasswordPolicies) Set(val *LoginPasswordPolicies) {
	v.value = val
	v.isSet = true
}

func (v NullableLoginPasswordPolicies) IsSet() bool {
	return v.isSet
}

func (v *NullableLoginPasswordPolicies) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoginPasswordPolicies(val *LoginPasswordPolicies) *NullableLoginPasswordPolicies {
	return &NullableLoginPasswordPolicies{value: val, isSet: true}
}

func (v NullableLoginPasswordPolicies) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoginPasswordPolicies) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
