/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UserAuthData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserAuthData{}

// UserAuthData User Authentication Data
type UserAuthData struct {
	// Authentication method    Authentication methods:  * `basic`  * `active_directory`  * `openid`
	Method string `json:"method"`
	// User login name
	Login *string `json:"login,omitempty"`
	// Password (only relevant for `basic` authentication type)  *NOT* your Active Directory, OpenID password!
	Password *string `json:"password,omitempty"`
	// Determines whether user has to change his / her password  * default: `true` for `basic` auth type  * default: `false` for `active_directory`, `openid` auth types
	MustChangePassword *bool `json:"mustChangePassword,omitempty"`
	// ID of the user's Active Directory.
	AdConfigId *int32 `json:"adConfigId,omitempty"`
	// ID of the user's OIDC provider.
	OidConfigId *int32 `json:"oidConfigId,omitempty"`
}

type _UserAuthData UserAuthData

// NewUserAuthData instantiates a new UserAuthData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserAuthData(method string) *UserAuthData {
	this := UserAuthData{}
	this.Method = method
	return &this
}

// NewUserAuthDataWithDefaults instantiates a new UserAuthData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserAuthDataWithDefaults() *UserAuthData {
	this := UserAuthData{}
	return &this
}

// GetMethod returns the Method field value
func (o *UserAuthData) GetMethod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Method
}

// GetMethodOk returns a tuple with the Method field value
// and a boolean to check if the value has been set.
func (o *UserAuthData) GetMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Method, true
}

// SetMethod sets field value
func (o *UserAuthData) SetMethod(v string) {
	o.Method = v
}

// GetLogin returns the Login field value if set, zero value otherwise.
func (o *UserAuthData) GetLogin() string {
	if o == nil || IsNil(o.Login) {
		var ret string
		return ret
	}
	return *o.Login
}

// GetLoginOk returns a tuple with the Login field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAuthData) GetLoginOk() (*string, bool) {
	if o == nil || IsNil(o.Login) {
		return nil, false
	}
	return o.Login, true
}

// HasLogin returns a boolean if a field has been set.
func (o *UserAuthData) HasLogin() bool {
	if o != nil && !IsNil(o.Login) {
		return true
	}

	return false
}

// SetLogin gets a reference to the given string and assigns it to the Login field.
func (o *UserAuthData) SetLogin(v string) {
	o.Login = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *UserAuthData) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAuthData) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *UserAuthData) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *UserAuthData) SetPassword(v string) {
	o.Password = &v
}

// GetMustChangePassword returns the MustChangePassword field value if set, zero value otherwise.
func (o *UserAuthData) GetMustChangePassword() bool {
	if o == nil || IsNil(o.MustChangePassword) {
		var ret bool
		return ret
	}
	return *o.MustChangePassword
}

// GetMustChangePasswordOk returns a tuple with the MustChangePassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAuthData) GetMustChangePasswordOk() (*bool, bool) {
	if o == nil || IsNil(o.MustChangePassword) {
		return nil, false
	}
	return o.MustChangePassword, true
}

// HasMustChangePassword returns a boolean if a field has been set.
func (o *UserAuthData) HasMustChangePassword() bool {
	if o != nil && !IsNil(o.MustChangePassword) {
		return true
	}

	return false
}

// SetMustChangePassword gets a reference to the given bool and assigns it to the MustChangePassword field.
func (o *UserAuthData) SetMustChangePassword(v bool) {
	o.MustChangePassword = &v
}

// GetAdConfigId returns the AdConfigId field value if set, zero value otherwise.
func (o *UserAuthData) GetAdConfigId() int32 {
	if o == nil || IsNil(o.AdConfigId) {
		var ret int32
		return ret
	}
	return *o.AdConfigId
}

// GetAdConfigIdOk returns a tuple with the AdConfigId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAuthData) GetAdConfigIdOk() (*int32, bool) {
	if o == nil || IsNil(o.AdConfigId) {
		return nil, false
	}
	return o.AdConfigId, true
}

// HasAdConfigId returns a boolean if a field has been set.
func (o *UserAuthData) HasAdConfigId() bool {
	if o != nil && !IsNil(o.AdConfigId) {
		return true
	}

	return false
}

// SetAdConfigId gets a reference to the given int32 and assigns it to the AdConfigId field.
func (o *UserAuthData) SetAdConfigId(v int32) {
	o.AdConfigId = &v
}

// GetOidConfigId returns the OidConfigId field value if set, zero value otherwise.
func (o *UserAuthData) GetOidConfigId() int32 {
	if o == nil || IsNil(o.OidConfigId) {
		var ret int32
		return ret
	}
	return *o.OidConfigId
}

// GetOidConfigIdOk returns a tuple with the OidConfigId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAuthData) GetOidConfigIdOk() (*int32, bool) {
	if o == nil || IsNil(o.OidConfigId) {
		return nil, false
	}
	return o.OidConfigId, true
}

// HasOidConfigId returns a boolean if a field has been set.
func (o *UserAuthData) HasOidConfigId() bool {
	if o != nil && !IsNil(o.OidConfigId) {
		return true
	}

	return false
}

// SetOidConfigId gets a reference to the given int32 and assigns it to the OidConfigId field.
func (o *UserAuthData) SetOidConfigId(v int32) {
	o.OidConfigId = &v
}

func (o UserAuthData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserAuthData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["method"] = o.Method
	if !IsNil(o.Login) {
		toSerialize["login"] = o.Login
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.MustChangePassword) {
		toSerialize["mustChangePassword"] = o.MustChangePassword
	}
	if !IsNil(o.AdConfigId) {
		toSerialize["adConfigId"] = o.AdConfigId
	}
	if !IsNil(o.OidConfigId) {
		toSerialize["oidConfigId"] = o.OidConfigId
	}
	return toSerialize, nil
}

func (o *UserAuthData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"method",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserAuthData := _UserAuthData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserAuthData)

	if err != nil {
		return err
	}

	*o = UserAuthData(varUserAuthData)

	return err
}

type NullableUserAuthData struct {
	value *UserAuthData
	isSet bool
}

func (v NullableUserAuthData) Get() *UserAuthData {
	return v.value
}

func (v *NullableUserAuthData) Set(val *UserAuthData) {
	v.value = val
	v.isSet = true
}

func (v NullableUserAuthData) IsSet() bool {
	return v.isSet
}

func (v *NullableUserAuthData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserAuthData(val *UserAuthData) *NullableUserAuthData {
	return &NullableUserAuthData{value: val, isSet: true}
}

func (v NullableUserAuthData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserAuthData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
