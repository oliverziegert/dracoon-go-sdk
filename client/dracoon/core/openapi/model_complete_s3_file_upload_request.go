/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CompleteS3FileUploadRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompleteS3FileUploadRequest{}

// CompleteS3FileUploadRequest Request model for completing a S3 file upload
type CompleteS3FileUploadRequest struct {
	// List of S3 file upload parts
	Parts []S3FileUploadPart `json:"parts"`
	// Node conflict resolution strategy:  * `autorename`  * `overwrite`  * `fail`
	ResolutionStrategy *string `json:"resolutionStrategy,omitempty"`
	// Preserve Download Share Links and point them to the new node.
	KeepShareLinks *bool `json:"keepShareLinks,omitempty"`
	// New file name to store with
	FileName *string  `json:"fileName,omitempty"`
	FileKey  *FileKey `json:"fileKey,omitempty"`
	// If true prioritises the virus-protection scan higher when in a scanning room and it comes from ms-teams or OAI
	IsPrioritisedVirusScan *bool `json:"isPrioritisedVirusScan,omitempty"`
}

type _CompleteS3FileUploadRequest CompleteS3FileUploadRequest

// NewCompleteS3FileUploadRequest instantiates a new CompleteS3FileUploadRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompleteS3FileUploadRequest(parts []S3FileUploadPart) *CompleteS3FileUploadRequest {
	this := CompleteS3FileUploadRequest{}
	this.Parts = parts
	var resolutionStrategy string = "autorename"
	this.ResolutionStrategy = &resolutionStrategy
	var keepShareLinks bool = false
	this.KeepShareLinks = &keepShareLinks
	var isPrioritisedVirusScan bool = false
	this.IsPrioritisedVirusScan = &isPrioritisedVirusScan
	return &this
}

// NewCompleteS3FileUploadRequestWithDefaults instantiates a new CompleteS3FileUploadRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompleteS3FileUploadRequestWithDefaults() *CompleteS3FileUploadRequest {
	this := CompleteS3FileUploadRequest{}
	var resolutionStrategy string = "autorename"
	this.ResolutionStrategy = &resolutionStrategy
	var keepShareLinks bool = false
	this.KeepShareLinks = &keepShareLinks
	var isPrioritisedVirusScan bool = false
	this.IsPrioritisedVirusScan = &isPrioritisedVirusScan
	return &this
}

// GetParts returns the Parts field value
func (o *CompleteS3FileUploadRequest) GetParts() []S3FileUploadPart {
	if o == nil {
		var ret []S3FileUploadPart
		return ret
	}

	return o.Parts
}

// GetPartsOk returns a tuple with the Parts field value
// and a boolean to check if the value has been set.
func (o *CompleteS3FileUploadRequest) GetPartsOk() ([]S3FileUploadPart, bool) {
	if o == nil {
		return nil, false
	}
	return o.Parts, true
}

// SetParts sets field value
func (o *CompleteS3FileUploadRequest) SetParts(v []S3FileUploadPart) {
	o.Parts = v
}

// GetResolutionStrategy returns the ResolutionStrategy field value if set, zero value otherwise.
func (o *CompleteS3FileUploadRequest) GetResolutionStrategy() string {
	if o == nil || IsNil(o.ResolutionStrategy) {
		var ret string
		return ret
	}
	return *o.ResolutionStrategy
}

// GetResolutionStrategyOk returns a tuple with the ResolutionStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompleteS3FileUploadRequest) GetResolutionStrategyOk() (*string, bool) {
	if o == nil || IsNil(o.ResolutionStrategy) {
		return nil, false
	}
	return o.ResolutionStrategy, true
}

// HasResolutionStrategy returns a boolean if a field has been set.
func (o *CompleteS3FileUploadRequest) HasResolutionStrategy() bool {
	if o != nil && !IsNil(o.ResolutionStrategy) {
		return true
	}

	return false
}

// SetResolutionStrategy gets a reference to the given string and assigns it to the ResolutionStrategy field.
func (o *CompleteS3FileUploadRequest) SetResolutionStrategy(v string) {
	o.ResolutionStrategy = &v
}

// GetKeepShareLinks returns the KeepShareLinks field value if set, zero value otherwise.
func (o *CompleteS3FileUploadRequest) GetKeepShareLinks() bool {
	if o == nil || IsNil(o.KeepShareLinks) {
		var ret bool
		return ret
	}
	return *o.KeepShareLinks
}

// GetKeepShareLinksOk returns a tuple with the KeepShareLinks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompleteS3FileUploadRequest) GetKeepShareLinksOk() (*bool, bool) {
	if o == nil || IsNil(o.KeepShareLinks) {
		return nil, false
	}
	return o.KeepShareLinks, true
}

// HasKeepShareLinks returns a boolean if a field has been set.
func (o *CompleteS3FileUploadRequest) HasKeepShareLinks() bool {
	if o != nil && !IsNil(o.KeepShareLinks) {
		return true
	}

	return false
}

// SetKeepShareLinks gets a reference to the given bool and assigns it to the KeepShareLinks field.
func (o *CompleteS3FileUploadRequest) SetKeepShareLinks(v bool) {
	o.KeepShareLinks = &v
}

// GetFileName returns the FileName field value if set, zero value otherwise.
func (o *CompleteS3FileUploadRequest) GetFileName() string {
	if o == nil || IsNil(o.FileName) {
		var ret string
		return ret
	}
	return *o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompleteS3FileUploadRequest) GetFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.FileName) {
		return nil, false
	}
	return o.FileName, true
}

// HasFileName returns a boolean if a field has been set.
func (o *CompleteS3FileUploadRequest) HasFileName() bool {
	if o != nil && !IsNil(o.FileName) {
		return true
	}

	return false
}

// SetFileName gets a reference to the given string and assigns it to the FileName field.
func (o *CompleteS3FileUploadRequest) SetFileName(v string) {
	o.FileName = &v
}

// GetFileKey returns the FileKey field value if set, zero value otherwise.
func (o *CompleteS3FileUploadRequest) GetFileKey() FileKey {
	if o == nil || IsNil(o.FileKey) {
		var ret FileKey
		return ret
	}
	return *o.FileKey
}

// GetFileKeyOk returns a tuple with the FileKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompleteS3FileUploadRequest) GetFileKeyOk() (*FileKey, bool) {
	if o == nil || IsNil(o.FileKey) {
		return nil, false
	}
	return o.FileKey, true
}

// HasFileKey returns a boolean if a field has been set.
func (o *CompleteS3FileUploadRequest) HasFileKey() bool {
	if o != nil && !IsNil(o.FileKey) {
		return true
	}

	return false
}

// SetFileKey gets a reference to the given FileKey and assigns it to the FileKey field.
func (o *CompleteS3FileUploadRequest) SetFileKey(v FileKey) {
	o.FileKey = &v
}

// GetIsPrioritisedVirusScan returns the IsPrioritisedVirusScan field value if set, zero value otherwise.
func (o *CompleteS3FileUploadRequest) GetIsPrioritisedVirusScan() bool {
	if o == nil || IsNil(o.IsPrioritisedVirusScan) {
		var ret bool
		return ret
	}
	return *o.IsPrioritisedVirusScan
}

// GetIsPrioritisedVirusScanOk returns a tuple with the IsPrioritisedVirusScan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompleteS3FileUploadRequest) GetIsPrioritisedVirusScanOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPrioritisedVirusScan) {
		return nil, false
	}
	return o.IsPrioritisedVirusScan, true
}

// HasIsPrioritisedVirusScan returns a boolean if a field has been set.
func (o *CompleteS3FileUploadRequest) HasIsPrioritisedVirusScan() bool {
	if o != nil && !IsNil(o.IsPrioritisedVirusScan) {
		return true
	}

	return false
}

// SetIsPrioritisedVirusScan gets a reference to the given bool and assigns it to the IsPrioritisedVirusScan field.
func (o *CompleteS3FileUploadRequest) SetIsPrioritisedVirusScan(v bool) {
	o.IsPrioritisedVirusScan = &v
}

func (o CompleteS3FileUploadRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompleteS3FileUploadRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["parts"] = o.Parts
	if !IsNil(o.ResolutionStrategy) {
		toSerialize["resolutionStrategy"] = o.ResolutionStrategy
	}
	if !IsNil(o.KeepShareLinks) {
		toSerialize["keepShareLinks"] = o.KeepShareLinks
	}
	if !IsNil(o.FileName) {
		toSerialize["fileName"] = o.FileName
	}
	if !IsNil(o.FileKey) {
		toSerialize["fileKey"] = o.FileKey
	}
	if !IsNil(o.IsPrioritisedVirusScan) {
		toSerialize["isPrioritisedVirusScan"] = o.IsPrioritisedVirusScan
	}
	return toSerialize, nil
}

func (o *CompleteS3FileUploadRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"parts",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCompleteS3FileUploadRequest := _CompleteS3FileUploadRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCompleteS3FileUploadRequest)

	if err != nil {
		return err
	}

	*o = CompleteS3FileUploadRequest(varCompleteS3FileUploadRequest)

	return err
}

type NullableCompleteS3FileUploadRequest struct {
	value *CompleteS3FileUploadRequest
	isSet bool
}

func (v NullableCompleteS3FileUploadRequest) Get() *CompleteS3FileUploadRequest {
	return v.value
}

func (v *NullableCompleteS3FileUploadRequest) Set(val *CompleteS3FileUploadRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCompleteS3FileUploadRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCompleteS3FileUploadRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompleteS3FileUploadRequest(val *CompleteS3FileUploadRequest) *NullableCompleteS3FileUploadRequest {
	return &NullableCompleteS3FileUploadRequest{value: val, isSet: true}
}

func (v NullableCompleteS3FileUploadRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompleteS3FileUploadRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
