/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Webhook type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Webhook{}

// Webhook Webhook information
type Webhook struct {
	// ID
	Id int64 `json:"id"`
	// Name
	Name string `json:"name"`
	// URL
	Url string `json:"url"`
	// Secret; used for event message signatures
	Secret *string `json:"secret,omitempty"`
	// Is enabled
	IsEnabled bool `json:"isEnabled"`
	// Expiration date / time
	ExpireAt time.Time `json:"expireAt"`
	// List of names of event types
	EventTypeNames []string `json:"eventTypeNames"`
	// Creation date
	CreatedAt time.Time `json:"createdAt"`
	CreatedBy *UserInfo `json:"createdBy,omitempty"`
	// Modification date
	UpdatedAt time.Time `json:"updatedAt"`
	UpdatedBy *UserInfo `json:"updatedBy,omitempty"`
	// Last HTTP status code when a webhook is disabled due to delivery failures
	FailStatus *int32 `json:"failStatus,omitempty"`
}

type _Webhook Webhook

// NewWebhook instantiates a new Webhook object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhook(id int64, name string, url string, isEnabled bool, expireAt time.Time, eventTypeNames []string, createdAt time.Time, updatedAt time.Time) *Webhook {
	this := Webhook{}
	this.Id = id
	this.Name = name
	this.Url = url
	this.IsEnabled = isEnabled
	this.ExpireAt = expireAt
	this.EventTypeNames = eventTypeNames
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	return &this
}

// NewWebhookWithDefaults instantiates a new Webhook object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookWithDefaults() *Webhook {
	this := Webhook{}
	return &this
}

// GetId returns the Id field value
func (o *Webhook) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Webhook) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Webhook) SetId(v int64) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Webhook) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Webhook) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Webhook) SetName(v string) {
	o.Name = v
}

// GetUrl returns the Url field value
func (o *Webhook) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *Webhook) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *Webhook) SetUrl(v string) {
	o.Url = v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *Webhook) GetSecret() string {
	if o == nil || IsNil(o.Secret) {
		var ret string
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Webhook) GetSecretOk() (*string, bool) {
	if o == nil || IsNil(o.Secret) {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *Webhook) HasSecret() bool {
	if o != nil && !IsNil(o.Secret) {
		return true
	}

	return false
}

// SetSecret gets a reference to the given string and assigns it to the Secret field.
func (o *Webhook) SetSecret(v string) {
	o.Secret = &v
}

// GetIsEnabled returns the IsEnabled field value
func (o *Webhook) GetIsEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value
// and a boolean to check if the value has been set.
func (o *Webhook) GetIsEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsEnabled, true
}

// SetIsEnabled sets field value
func (o *Webhook) SetIsEnabled(v bool) {
	o.IsEnabled = v
}

// GetExpireAt returns the ExpireAt field value
func (o *Webhook) GetExpireAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ExpireAt
}

// GetExpireAtOk returns a tuple with the ExpireAt field value
// and a boolean to check if the value has been set.
func (o *Webhook) GetExpireAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpireAt, true
}

// SetExpireAt sets field value
func (o *Webhook) SetExpireAt(v time.Time) {
	o.ExpireAt = v
}

// GetEventTypeNames returns the EventTypeNames field value
func (o *Webhook) GetEventTypeNames() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.EventTypeNames
}

// GetEventTypeNamesOk returns a tuple with the EventTypeNames field value
// and a boolean to check if the value has been set.
func (o *Webhook) GetEventTypeNamesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventTypeNames, true
}

// SetEventTypeNames sets field value
func (o *Webhook) SetEventTypeNames(v []string) {
	o.EventTypeNames = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Webhook) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Webhook) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Webhook) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *Webhook) GetCreatedBy() UserInfo {
	if o == nil || IsNil(o.CreatedBy) {
		var ret UserInfo
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Webhook) GetCreatedByOk() (*UserInfo, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *Webhook) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given UserInfo and assigns it to the CreatedBy field.
func (o *Webhook) SetCreatedBy(v UserInfo) {
	o.CreatedBy = &v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Webhook) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Webhook) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Webhook) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *Webhook) GetUpdatedBy() UserInfo {
	if o == nil || IsNil(o.UpdatedBy) {
		var ret UserInfo
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Webhook) GetUpdatedByOk() (*UserInfo, bool) {
	if o == nil || IsNil(o.UpdatedBy) {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *Webhook) HasUpdatedBy() bool {
	if o != nil && !IsNil(o.UpdatedBy) {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given UserInfo and assigns it to the UpdatedBy field.
func (o *Webhook) SetUpdatedBy(v UserInfo) {
	o.UpdatedBy = &v
}

// GetFailStatus returns the FailStatus field value if set, zero value otherwise.
func (o *Webhook) GetFailStatus() int32 {
	if o == nil || IsNil(o.FailStatus) {
		var ret int32
		return ret
	}
	return *o.FailStatus
}

// GetFailStatusOk returns a tuple with the FailStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Webhook) GetFailStatusOk() (*int32, bool) {
	if o == nil || IsNil(o.FailStatus) {
		return nil, false
	}
	return o.FailStatus, true
}

// HasFailStatus returns a boolean if a field has been set.
func (o *Webhook) HasFailStatus() bool {
	if o != nil && !IsNil(o.FailStatus) {
		return true
	}

	return false
}

// SetFailStatus gets a reference to the given int32 and assigns it to the FailStatus field.
func (o *Webhook) SetFailStatus(v int32) {
	o.FailStatus = &v
}

func (o Webhook) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Webhook) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["url"] = o.Url
	if !IsNil(o.Secret) {
		toSerialize["secret"] = o.Secret
	}
	toSerialize["isEnabled"] = o.IsEnabled
	toSerialize["expireAt"] = o.ExpireAt
	toSerialize["eventTypeNames"] = o.EventTypeNames
	toSerialize["createdAt"] = o.CreatedAt
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	toSerialize["updatedAt"] = o.UpdatedAt
	if !IsNil(o.UpdatedBy) {
		toSerialize["updatedBy"] = o.UpdatedBy
	}
	if !IsNil(o.FailStatus) {
		toSerialize["failStatus"] = o.FailStatus
	}
	return toSerialize, nil
}

func (o *Webhook) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"url",
		"isEnabled",
		"expireAt",
		"eventTypeNames",
		"createdAt",
		"updatedAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWebhook := _Webhook{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWebhook)

	if err != nil {
		return err
	}

	*o = Webhook(varWebhook)

	return err
}

type NullableWebhook struct {
	value *Webhook
	isSet bool
}

func (v NullableWebhook) Get() *Webhook {
	return v.value
}

func (v *NullableWebhook) Set(val *Webhook) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhook) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhook) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhook(val *Webhook) *NullableWebhook {
	return &NullableWebhook{value: val, isSet: true}
}

func (v NullableWebhook) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhook) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
