/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MissingKeysResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MissingKeysResponse{}

// MissingKeysResponse Missing keys information
type MissingKeysResponse struct {
	Range *Range `json:"range,omitempty"`
	// List of user ID and file ID mappings
	Items []UserIdFileIdItem `json:"items,omitempty"`
	// List of user public keys
	Users []UserUserPublicKey `json:"users,omitempty"`
	// List of file keys
	Files []FileFileKeys `json:"files,omitempty"`
}

// NewMissingKeysResponse instantiates a new MissingKeysResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMissingKeysResponse() *MissingKeysResponse {
	this := MissingKeysResponse{}
	return &this
}

// NewMissingKeysResponseWithDefaults instantiates a new MissingKeysResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMissingKeysResponseWithDefaults() *MissingKeysResponse {
	this := MissingKeysResponse{}
	return &this
}

// GetRange returns the Range field value if set, zero value otherwise.
func (o *MissingKeysResponse) GetRange() Range {
	if o == nil || IsNil(o.Range) {
		var ret Range
		return ret
	}
	return *o.Range
}

// GetRangeOk returns a tuple with the Range field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MissingKeysResponse) GetRangeOk() (*Range, bool) {
	if o == nil || IsNil(o.Range) {
		return nil, false
	}
	return o.Range, true
}

// HasRange returns a boolean if a field has been set.
func (o *MissingKeysResponse) HasRange() bool {
	if o != nil && !IsNil(o.Range) {
		return true
	}

	return false
}

// SetRange gets a reference to the given Range and assigns it to the Range field.
func (o *MissingKeysResponse) SetRange(v Range) {
	o.Range = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *MissingKeysResponse) GetItems() []UserIdFileIdItem {
	if o == nil || IsNil(o.Items) {
		var ret []UserIdFileIdItem
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MissingKeysResponse) GetItemsOk() ([]UserIdFileIdItem, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *MissingKeysResponse) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []UserIdFileIdItem and assigns it to the Items field.
func (o *MissingKeysResponse) SetItems(v []UserIdFileIdItem) {
	o.Items = v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *MissingKeysResponse) GetUsers() []UserUserPublicKey {
	if o == nil || IsNil(o.Users) {
		var ret []UserUserPublicKey
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MissingKeysResponse) GetUsersOk() ([]UserUserPublicKey, bool) {
	if o == nil || IsNil(o.Users) {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *MissingKeysResponse) HasUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []UserUserPublicKey and assigns it to the Users field.
func (o *MissingKeysResponse) SetUsers(v []UserUserPublicKey) {
	o.Users = v
}

// GetFiles returns the Files field value if set, zero value otherwise.
func (o *MissingKeysResponse) GetFiles() []FileFileKeys {
	if o == nil || IsNil(o.Files) {
		var ret []FileFileKeys
		return ret
	}
	return o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MissingKeysResponse) GetFilesOk() ([]FileFileKeys, bool) {
	if o == nil || IsNil(o.Files) {
		return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *MissingKeysResponse) HasFiles() bool {
	if o != nil && !IsNil(o.Files) {
		return true
	}

	return false
}

// SetFiles gets a reference to the given []FileFileKeys and assigns it to the Files field.
func (o *MissingKeysResponse) SetFiles(v []FileFileKeys) {
	o.Files = v
}

func (o MissingKeysResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MissingKeysResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Range) {
		toSerialize["range"] = o.Range
	}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	if !IsNil(o.Users) {
		toSerialize["users"] = o.Users
	}
	if !IsNil(o.Files) {
		toSerialize["files"] = o.Files
	}
	return toSerialize, nil
}

type NullableMissingKeysResponse struct {
	value *MissingKeysResponse
	isSet bool
}

func (v NullableMissingKeysResponse) Get() *MissingKeysResponse {
	return v.value
}

func (v *NullableMissingKeysResponse) Set(val *MissingKeysResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMissingKeysResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMissingKeysResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMissingKeysResponse(val *MissingKeysResponse) *NullableMissingKeysResponse {
	return &NullableMissingKeysResponse{value: val, isSet: true}
}

func (v NullableMissingKeysResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMissingKeysResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
