/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SubscribedNode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscribedNode{}

// SubscribedNode Subscribed node information
type SubscribedNode struct {
	// Node ID
	Id int64 `json:"id"`
	// Node type
	Type *string `json:"type,omitempty"`
	// Auth parent room ID
	AuthParentId *int64 `json:"authParentId,omitempty"`
}

type _SubscribedNode SubscribedNode

// NewSubscribedNode instantiates a new SubscribedNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscribedNode(id int64) *SubscribedNode {
	this := SubscribedNode{}
	this.Id = id
	return &this
}

// NewSubscribedNodeWithDefaults instantiates a new SubscribedNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscribedNodeWithDefaults() *SubscribedNode {
	this := SubscribedNode{}
	return &this
}

// GetId returns the Id field value
func (o *SubscribedNode) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SubscribedNode) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SubscribedNode) SetId(v int64) {
	o.Id = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SubscribedNode) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscribedNode) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SubscribedNode) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SubscribedNode) SetType(v string) {
	o.Type = &v
}

// GetAuthParentId returns the AuthParentId field value if set, zero value otherwise.
func (o *SubscribedNode) GetAuthParentId() int64 {
	if o == nil || IsNil(o.AuthParentId) {
		var ret int64
		return ret
	}
	return *o.AuthParentId
}

// GetAuthParentIdOk returns a tuple with the AuthParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscribedNode) GetAuthParentIdOk() (*int64, bool) {
	if o == nil || IsNil(o.AuthParentId) {
		return nil, false
	}
	return o.AuthParentId, true
}

// HasAuthParentId returns a boolean if a field has been set.
func (o *SubscribedNode) HasAuthParentId() bool {
	if o != nil && !IsNil(o.AuthParentId) {
		return true
	}

	return false
}

// SetAuthParentId gets a reference to the given int64 and assigns it to the AuthParentId field.
func (o *SubscribedNode) SetAuthParentId(v int64) {
	o.AuthParentId = &v
}

func (o SubscribedNode) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscribedNode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.AuthParentId) {
		toSerialize["authParentId"] = o.AuthParentId
	}
	return toSerialize, nil
}

func (o *SubscribedNode) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubscribedNode := _SubscribedNode{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubscribedNode)

	if err != nil {
		return err
	}

	*o = SubscribedNode(varSubscribedNode)

	return err
}

type NullableSubscribedNode struct {
	value *SubscribedNode
	isSet bool
}

func (v NullableSubscribedNode) Get() *SubscribedNode {
	return v.value
}

func (v *NullableSubscribedNode) Set(val *SubscribedNode) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscribedNode) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscribedNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscribedNode(val *SubscribedNode) *NullableSubscribedNode {
	return &NullableSubscribedNode{value: val, isSet: true}
}

func (v NullableSubscribedNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscribedNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
