/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UserAuthMethod type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserAuthMethod{}

// UserAuthMethod Authentication method
type UserAuthMethod struct {
	// Authentication method    Authentication methods:  * `basic`  * `active_directory`  * `openid`
	AuthId string `json:"authId"`
	// Is enabled
	IsEnabled bool `json:"isEnabled"`
	// Authentication method options
	Options []KeyValueEntry `json:"options,omitempty"`
}

type _UserAuthMethod UserAuthMethod

// NewUserAuthMethod instantiates a new UserAuthMethod object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserAuthMethod(authId string, isEnabled bool) *UserAuthMethod {
	this := UserAuthMethod{}
	this.AuthId = authId
	this.IsEnabled = isEnabled
	return &this
}

// NewUserAuthMethodWithDefaults instantiates a new UserAuthMethod object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserAuthMethodWithDefaults() *UserAuthMethod {
	this := UserAuthMethod{}
	return &this
}

// GetAuthId returns the AuthId field value
func (o *UserAuthMethod) GetAuthId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuthId
}

// GetAuthIdOk returns a tuple with the AuthId field value
// and a boolean to check if the value has been set.
func (o *UserAuthMethod) GetAuthIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthId, true
}

// SetAuthId sets field value
func (o *UserAuthMethod) SetAuthId(v string) {
	o.AuthId = v
}

// GetIsEnabled returns the IsEnabled field value
func (o *UserAuthMethod) GetIsEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value
// and a boolean to check if the value has been set.
func (o *UserAuthMethod) GetIsEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsEnabled, true
}

// SetIsEnabled sets field value
func (o *UserAuthMethod) SetIsEnabled(v bool) {
	o.IsEnabled = v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *UserAuthMethod) GetOptions() []KeyValueEntry {
	if o == nil || IsNil(o.Options) {
		var ret []KeyValueEntry
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAuthMethod) GetOptionsOk() ([]KeyValueEntry, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *UserAuthMethod) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []KeyValueEntry and assigns it to the Options field.
func (o *UserAuthMethod) SetOptions(v []KeyValueEntry) {
	o.Options = v
}

func (o UserAuthMethod) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserAuthMethod) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["authId"] = o.AuthId
	toSerialize["isEnabled"] = o.IsEnabled
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	return toSerialize, nil
}

func (o *UserAuthMethod) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"authId",
		"isEnabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserAuthMethod := _UserAuthMethod{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserAuthMethod)

	if err != nil {
		return err
	}

	*o = UserAuthMethod(varUserAuthMethod)

	return err
}

type NullableUserAuthMethod struct {
	value *UserAuthMethod
	isSet bool
}

func (v NullableUserAuthMethod) Get() *UserAuthMethod {
	return v.value
}

func (v *NullableUserAuthMethod) Set(val *UserAuthMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableUserAuthMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableUserAuthMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserAuthMethod(val *UserAuthMethod) *NullableUserAuthMethod {
	return &NullableUserAuthMethod{value: val, isSet: true}
}

func (v NullableUserAuthMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserAuthMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
