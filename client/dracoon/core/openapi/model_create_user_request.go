/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateUserRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateUserRequest{}

// CreateUserRequest Request model for creating an user
type CreateUserRequest struct {
	// User first name
	FirstName string `json:"firstName"`
	// User last name
	LastName string `json:"lastName"`
	// &#128640; Since v4.13.0  Username
	UserName *string `json:"userName,omitempty"`
	// Phone number
	Phone      *string           `json:"phone,omitempty"`
	Expiration *ObjectExpiration `json:"expiration,omitempty"`
	// IETF language tag
	ReceiverLanguage *string `json:"receiverLanguage,omitempty"`
	// Email
	Email *string `json:"email,omitempty"`
	// &#128640; Since v4.9.0  Notify user about his new account  * default: `true` for `basic` auth type  * default: `false` for `active_directory`, `openid` auth types
	NotifyUser *bool         `json:"notifyUser,omitempty"`
	AuthData   *UserAuthData `json:"authData,omitempty"`
	// &#128640; Since v4.12.0  Determines whether user has the role NONMEMBER_VIEWER
	IsNonmemberViewer *bool      `json:"isNonmemberViewer,omitempty"`
	MfaConfig         *MfaConfig `json:"mfaConfig,omitempty"`
	// &#128679; Deprecated since v4.18.0  Job title
	// Deprecated
	Title *string `json:"title,omitempty"`
	// &#128679; Deprecated since v4.13.0  An initial password may be preset  use `authData` instead
	// Deprecated
	Password *string `json:"password,omitempty"`
	// &#128679; Deprecated since v4.13.0  User login name
	// Deprecated
	Login *string `json:"login,omitempty"`
	// &#128679; Deprecated since v4.13.0  Authentication methods:  * `sql`  * `active_directory`  * `openid`  use `authData` instead
	// Deprecated
	AuthMethods []UserAuthMethod `json:"authMethods,omitempty"`
	// &#128679; Deprecated since v4.13.0  Determines whether user has to change his / her initial password.  use `authDate.mustChangePassword` instead
	// Deprecated
	NeedsToChangePassword *bool `json:"needsToChangePassword,omitempty"`
	// &#128679; Deprecated since v4.12.0  Gender  Do NOT use `gender`! It will be ignored.
	// Deprecated
	Gender *string `json:"gender,omitempty"`
}

type _CreateUserRequest CreateUserRequest

// NewCreateUserRequest instantiates a new CreateUserRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateUserRequest(firstName string, lastName string) *CreateUserRequest {
	this := CreateUserRequest{}
	this.FirstName = firstName
	this.LastName = lastName
	var gender string = "n"
	this.Gender = &gender
	return &this
}

// NewCreateUserRequestWithDefaults instantiates a new CreateUserRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateUserRequestWithDefaults() *CreateUserRequest {
	this := CreateUserRequest{}
	var gender string = "n"
	this.Gender = &gender
	return &this
}

// GetFirstName returns the FirstName field value
func (o *CreateUserRequest) GetFirstName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value
// and a boolean to check if the value has been set.
func (o *CreateUserRequest) GetFirstNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstName, true
}

// SetFirstName sets field value
func (o *CreateUserRequest) SetFirstName(v string) {
	o.FirstName = v
}

// GetLastName returns the LastName field value
func (o *CreateUserRequest) GetLastName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value
// and a boolean to check if the value has been set.
func (o *CreateUserRequest) GetLastNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastName, true
}

// SetLastName sets field value
func (o *CreateUserRequest) SetLastName(v string) {
	o.LastName = v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *CreateUserRequest) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUserRequest) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *CreateUserRequest) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *CreateUserRequest) SetUserName(v string) {
	o.UserName = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *CreateUserRequest) GetPhone() string {
	if o == nil || IsNil(o.Phone) {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUserRequest) GetPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.Phone) {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *CreateUserRequest) HasPhone() bool {
	if o != nil && !IsNil(o.Phone) {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *CreateUserRequest) SetPhone(v string) {
	o.Phone = &v
}

// GetExpiration returns the Expiration field value if set, zero value otherwise.
func (o *CreateUserRequest) GetExpiration() ObjectExpiration {
	if o == nil || IsNil(o.Expiration) {
		var ret ObjectExpiration
		return ret
	}
	return *o.Expiration
}

// GetExpirationOk returns a tuple with the Expiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUserRequest) GetExpirationOk() (*ObjectExpiration, bool) {
	if o == nil || IsNil(o.Expiration) {
		return nil, false
	}
	return o.Expiration, true
}

// HasExpiration returns a boolean if a field has been set.
func (o *CreateUserRequest) HasExpiration() bool {
	if o != nil && !IsNil(o.Expiration) {
		return true
	}

	return false
}

// SetExpiration gets a reference to the given ObjectExpiration and assigns it to the Expiration field.
func (o *CreateUserRequest) SetExpiration(v ObjectExpiration) {
	o.Expiration = &v
}

// GetReceiverLanguage returns the ReceiverLanguage field value if set, zero value otherwise.
func (o *CreateUserRequest) GetReceiverLanguage() string {
	if o == nil || IsNil(o.ReceiverLanguage) {
		var ret string
		return ret
	}
	return *o.ReceiverLanguage
}

// GetReceiverLanguageOk returns a tuple with the ReceiverLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUserRequest) GetReceiverLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.ReceiverLanguage) {
		return nil, false
	}
	return o.ReceiverLanguage, true
}

// HasReceiverLanguage returns a boolean if a field has been set.
func (o *CreateUserRequest) HasReceiverLanguage() bool {
	if o != nil && !IsNil(o.ReceiverLanguage) {
		return true
	}

	return false
}

// SetReceiverLanguage gets a reference to the given string and assigns it to the ReceiverLanguage field.
func (o *CreateUserRequest) SetReceiverLanguage(v string) {
	o.ReceiverLanguage = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *CreateUserRequest) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUserRequest) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *CreateUserRequest) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *CreateUserRequest) SetEmail(v string) {
	o.Email = &v
}

// GetNotifyUser returns the NotifyUser field value if set, zero value otherwise.
func (o *CreateUserRequest) GetNotifyUser() bool {
	if o == nil || IsNil(o.NotifyUser) {
		var ret bool
		return ret
	}
	return *o.NotifyUser
}

// GetNotifyUserOk returns a tuple with the NotifyUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUserRequest) GetNotifyUserOk() (*bool, bool) {
	if o == nil || IsNil(o.NotifyUser) {
		return nil, false
	}
	return o.NotifyUser, true
}

// HasNotifyUser returns a boolean if a field has been set.
func (o *CreateUserRequest) HasNotifyUser() bool {
	if o != nil && !IsNil(o.NotifyUser) {
		return true
	}

	return false
}

// SetNotifyUser gets a reference to the given bool and assigns it to the NotifyUser field.
func (o *CreateUserRequest) SetNotifyUser(v bool) {
	o.NotifyUser = &v
}

// GetAuthData returns the AuthData field value if set, zero value otherwise.
func (o *CreateUserRequest) GetAuthData() UserAuthData {
	if o == nil || IsNil(o.AuthData) {
		var ret UserAuthData
		return ret
	}
	return *o.AuthData
}

// GetAuthDataOk returns a tuple with the AuthData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUserRequest) GetAuthDataOk() (*UserAuthData, bool) {
	if o == nil || IsNil(o.AuthData) {
		return nil, false
	}
	return o.AuthData, true
}

// HasAuthData returns a boolean if a field has been set.
func (o *CreateUserRequest) HasAuthData() bool {
	if o != nil && !IsNil(o.AuthData) {
		return true
	}

	return false
}

// SetAuthData gets a reference to the given UserAuthData and assigns it to the AuthData field.
func (o *CreateUserRequest) SetAuthData(v UserAuthData) {
	o.AuthData = &v
}

// GetIsNonmemberViewer returns the IsNonmemberViewer field value if set, zero value otherwise.
func (o *CreateUserRequest) GetIsNonmemberViewer() bool {
	if o == nil || IsNil(o.IsNonmemberViewer) {
		var ret bool
		return ret
	}
	return *o.IsNonmemberViewer
}

// GetIsNonmemberViewerOk returns a tuple with the IsNonmemberViewer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUserRequest) GetIsNonmemberViewerOk() (*bool, bool) {
	if o == nil || IsNil(o.IsNonmemberViewer) {
		return nil, false
	}
	return o.IsNonmemberViewer, true
}

// HasIsNonmemberViewer returns a boolean if a field has been set.
func (o *CreateUserRequest) HasIsNonmemberViewer() bool {
	if o != nil && !IsNil(o.IsNonmemberViewer) {
		return true
	}

	return false
}

// SetIsNonmemberViewer gets a reference to the given bool and assigns it to the IsNonmemberViewer field.
func (o *CreateUserRequest) SetIsNonmemberViewer(v bool) {
	o.IsNonmemberViewer = &v
}

// GetMfaConfig returns the MfaConfig field value if set, zero value otherwise.
func (o *CreateUserRequest) GetMfaConfig() MfaConfig {
	if o == nil || IsNil(o.MfaConfig) {
		var ret MfaConfig
		return ret
	}
	return *o.MfaConfig
}

// GetMfaConfigOk returns a tuple with the MfaConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUserRequest) GetMfaConfigOk() (*MfaConfig, bool) {
	if o == nil || IsNil(o.MfaConfig) {
		return nil, false
	}
	return o.MfaConfig, true
}

// HasMfaConfig returns a boolean if a field has been set.
func (o *CreateUserRequest) HasMfaConfig() bool {
	if o != nil && !IsNil(o.MfaConfig) {
		return true
	}

	return false
}

// SetMfaConfig gets a reference to the given MfaConfig and assigns it to the MfaConfig field.
func (o *CreateUserRequest) SetMfaConfig(v MfaConfig) {
	o.MfaConfig = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
// Deprecated
func (o *CreateUserRequest) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *CreateUserRequest) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *CreateUserRequest) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
// Deprecated
func (o *CreateUserRequest) SetTitle(v string) {
	o.Title = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
// Deprecated
func (o *CreateUserRequest) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *CreateUserRequest) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *CreateUserRequest) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
// Deprecated
func (o *CreateUserRequest) SetPassword(v string) {
	o.Password = &v
}

// GetLogin returns the Login field value if set, zero value otherwise.
// Deprecated
func (o *CreateUserRequest) GetLogin() string {
	if o == nil || IsNil(o.Login) {
		var ret string
		return ret
	}
	return *o.Login
}

// GetLoginOk returns a tuple with the Login field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *CreateUserRequest) GetLoginOk() (*string, bool) {
	if o == nil || IsNil(o.Login) {
		return nil, false
	}
	return o.Login, true
}

// HasLogin returns a boolean if a field has been set.
func (o *CreateUserRequest) HasLogin() bool {
	if o != nil && !IsNil(o.Login) {
		return true
	}

	return false
}

// SetLogin gets a reference to the given string and assigns it to the Login field.
// Deprecated
func (o *CreateUserRequest) SetLogin(v string) {
	o.Login = &v
}

// GetAuthMethods returns the AuthMethods field value if set, zero value otherwise.
// Deprecated
func (o *CreateUserRequest) GetAuthMethods() []UserAuthMethod {
	if o == nil || IsNil(o.AuthMethods) {
		var ret []UserAuthMethod
		return ret
	}
	return o.AuthMethods
}

// GetAuthMethodsOk returns a tuple with the AuthMethods field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *CreateUserRequest) GetAuthMethodsOk() ([]UserAuthMethod, bool) {
	if o == nil || IsNil(o.AuthMethods) {
		return nil, false
	}
	return o.AuthMethods, true
}

// HasAuthMethods returns a boolean if a field has been set.
func (o *CreateUserRequest) HasAuthMethods() bool {
	if o != nil && !IsNil(o.AuthMethods) {
		return true
	}

	return false
}

// SetAuthMethods gets a reference to the given []UserAuthMethod and assigns it to the AuthMethods field.
// Deprecated
func (o *CreateUserRequest) SetAuthMethods(v []UserAuthMethod) {
	o.AuthMethods = v
}

// GetNeedsToChangePassword returns the NeedsToChangePassword field value if set, zero value otherwise.
// Deprecated
func (o *CreateUserRequest) GetNeedsToChangePassword() bool {
	if o == nil || IsNil(o.NeedsToChangePassword) {
		var ret bool
		return ret
	}
	return *o.NeedsToChangePassword
}

// GetNeedsToChangePasswordOk returns a tuple with the NeedsToChangePassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *CreateUserRequest) GetNeedsToChangePasswordOk() (*bool, bool) {
	if o == nil || IsNil(o.NeedsToChangePassword) {
		return nil, false
	}
	return o.NeedsToChangePassword, true
}

// HasNeedsToChangePassword returns a boolean if a field has been set.
func (o *CreateUserRequest) HasNeedsToChangePassword() bool {
	if o != nil && !IsNil(o.NeedsToChangePassword) {
		return true
	}

	return false
}

// SetNeedsToChangePassword gets a reference to the given bool and assigns it to the NeedsToChangePassword field.
// Deprecated
func (o *CreateUserRequest) SetNeedsToChangePassword(v bool) {
	o.NeedsToChangePassword = &v
}

// GetGender returns the Gender field value if set, zero value otherwise.
// Deprecated
func (o *CreateUserRequest) GetGender() string {
	if o == nil || IsNil(o.Gender) {
		var ret string
		return ret
	}
	return *o.Gender
}

// GetGenderOk returns a tuple with the Gender field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *CreateUserRequest) GetGenderOk() (*string, bool) {
	if o == nil || IsNil(o.Gender) {
		return nil, false
	}
	return o.Gender, true
}

// HasGender returns a boolean if a field has been set.
func (o *CreateUserRequest) HasGender() bool {
	if o != nil && !IsNil(o.Gender) {
		return true
	}

	return false
}

// SetGender gets a reference to the given string and assigns it to the Gender field.
// Deprecated
func (o *CreateUserRequest) SetGender(v string) {
	o.Gender = &v
}

func (o CreateUserRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateUserRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["firstName"] = o.FirstName
	toSerialize["lastName"] = o.LastName
	if !IsNil(o.UserName) {
		toSerialize["userName"] = o.UserName
	}
	if !IsNil(o.Phone) {
		toSerialize["phone"] = o.Phone
	}
	if !IsNil(o.Expiration) {
		toSerialize["expiration"] = o.Expiration
	}
	if !IsNil(o.ReceiverLanguage) {
		toSerialize["receiverLanguage"] = o.ReceiverLanguage
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.NotifyUser) {
		toSerialize["notifyUser"] = o.NotifyUser
	}
	if !IsNil(o.AuthData) {
		toSerialize["authData"] = o.AuthData
	}
	if !IsNil(o.IsNonmemberViewer) {
		toSerialize["isNonmemberViewer"] = o.IsNonmemberViewer
	}
	if !IsNil(o.MfaConfig) {
		toSerialize["mfaConfig"] = o.MfaConfig
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.Login) {
		toSerialize["login"] = o.Login
	}
	if !IsNil(o.AuthMethods) {
		toSerialize["authMethods"] = o.AuthMethods
	}
	if !IsNil(o.NeedsToChangePassword) {
		toSerialize["needsToChangePassword"] = o.NeedsToChangePassword
	}
	if !IsNil(o.Gender) {
		toSerialize["gender"] = o.Gender
	}
	return toSerialize, nil
}

func (o *CreateUserRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"firstName",
		"lastName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateUserRequest := _CreateUserRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateUserRequest)

	if err != nil {
		return err
	}

	*o = CreateUserRequest(varCreateUserRequest)

	return err
}

type NullableCreateUserRequest struct {
	value *CreateUserRequest
	isSet bool
}

func (v NullableCreateUserRequest) Get() *CreateUserRequest {
	return v.value
}

func (v *NullableCreateUserRequest) Set(val *CreateUserRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateUserRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateUserRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateUserRequest(val *CreateUserRequest) *NullableCreateUserRequest {
	return &NullableCreateUserRequest{value: val, isSet: true}
}

func (v NullableCreateUserRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateUserRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
