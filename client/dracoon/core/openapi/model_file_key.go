/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the FileKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileKey{}

// FileKey File key information
type FileKey struct {
	// Encryption key
	Key string `json:"key"`
	// Initial vector
	Iv string `json:"iv"`
	// Version
	Version string `json:"version"`
	// Authentication tag  (needed with authenticated encryption)
	Tag string `json:"tag"`
}

type _FileKey FileKey

// NewFileKey instantiates a new FileKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileKey(key string, iv string, version string, tag string) *FileKey {
	this := FileKey{}
	this.Key = key
	this.Iv = iv
	this.Version = version
	this.Tag = tag
	return &this
}

// NewFileKeyWithDefaults instantiates a new FileKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileKeyWithDefaults() *FileKey {
	this := FileKey{}
	return &this
}

// GetKey returns the Key field value
func (o *FileKey) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *FileKey) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *FileKey) SetKey(v string) {
	o.Key = v
}

// GetIv returns the Iv field value
func (o *FileKey) GetIv() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Iv
}

// GetIvOk returns a tuple with the Iv field value
// and a boolean to check if the value has been set.
func (o *FileKey) GetIvOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Iv, true
}

// SetIv sets field value
func (o *FileKey) SetIv(v string) {
	o.Iv = v
}

// GetVersion returns the Version field value
func (o *FileKey) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *FileKey) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *FileKey) SetVersion(v string) {
	o.Version = v
}

// GetTag returns the Tag field value
func (o *FileKey) GetTag() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Tag
}

// GetTagOk returns a tuple with the Tag field value
// and a boolean to check if the value has been set.
func (o *FileKey) GetTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tag, true
}

// SetTag sets field value
func (o *FileKey) SetTag(v string) {
	o.Tag = v
}

func (o FileKey) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	toSerialize["iv"] = o.Iv
	toSerialize["version"] = o.Version
	toSerialize["tag"] = o.Tag
	return toSerialize, nil
}

func (o *FileKey) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
		"iv",
		"version",
		"tag",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFileKey := _FileKey{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFileKey)

	if err != nil {
		return err
	}

	*o = FileKey(varFileKey)

	return err
}

type NullableFileKey struct {
	value *FileKey
	isSet bool
}

func (v NullableFileKey) Get() *FileKey {
	return v.value
}

func (v *NullableFileKey) Set(val *FileKey) {
	v.value = val
	v.isSet = true
}

func (v NullableFileKey) IsSet() bool {
	return v.isSet
}

func (v *NullableFileKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileKey(val *FileKey) *NullableFileKey {
	return &NullableFileKey{value: val, isSet: true}
}

func (v NullableFileKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
