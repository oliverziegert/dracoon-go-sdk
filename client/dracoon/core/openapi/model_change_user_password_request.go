/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ChangeUserPasswordRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChangeUserPasswordRequest{}

// ChangeUserPasswordRequest Request model for updating user's password
type ChangeUserPasswordRequest struct {
	// Old password
	OldPassword string `json:"oldPassword"`
	// New password
	NewPassword string `json:"newPassword"`
}

type _ChangeUserPasswordRequest ChangeUserPasswordRequest

// NewChangeUserPasswordRequest instantiates a new ChangeUserPasswordRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangeUserPasswordRequest(oldPassword string, newPassword string) *ChangeUserPasswordRequest {
	this := ChangeUserPasswordRequest{}
	this.OldPassword = oldPassword
	this.NewPassword = newPassword
	return &this
}

// NewChangeUserPasswordRequestWithDefaults instantiates a new ChangeUserPasswordRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangeUserPasswordRequestWithDefaults() *ChangeUserPasswordRequest {
	this := ChangeUserPasswordRequest{}
	return &this
}

// GetOldPassword returns the OldPassword field value
func (o *ChangeUserPasswordRequest) GetOldPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OldPassword
}

// GetOldPasswordOk returns a tuple with the OldPassword field value
// and a boolean to check if the value has been set.
func (o *ChangeUserPasswordRequest) GetOldPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OldPassword, true
}

// SetOldPassword sets field value
func (o *ChangeUserPasswordRequest) SetOldPassword(v string) {
	o.OldPassword = v
}

// GetNewPassword returns the NewPassword field value
func (o *ChangeUserPasswordRequest) GetNewPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NewPassword
}

// GetNewPasswordOk returns a tuple with the NewPassword field value
// and a boolean to check if the value has been set.
func (o *ChangeUserPasswordRequest) GetNewPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NewPassword, true
}

// SetNewPassword sets field value
func (o *ChangeUserPasswordRequest) SetNewPassword(v string) {
	o.NewPassword = v
}

func (o ChangeUserPasswordRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChangeUserPasswordRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["oldPassword"] = o.OldPassword
	toSerialize["newPassword"] = o.NewPassword
	return toSerialize, nil
}

func (o *ChangeUserPasswordRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"oldPassword",
		"newPassword",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChangeUserPasswordRequest := _ChangeUserPasswordRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChangeUserPasswordRequest)

	if err != nil {
		return err
	}

	*o = ChangeUserPasswordRequest(varChangeUserPasswordRequest)

	return err
}

type NullableChangeUserPasswordRequest struct {
	value *ChangeUserPasswordRequest
	isSet bool
}

func (v NullableChangeUserPasswordRequest) Get() *ChangeUserPasswordRequest {
	return v.value
}

func (v *NullableChangeUserPasswordRequest) Set(val *ChangeUserPasswordRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeUserPasswordRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeUserPasswordRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeUserPasswordRequest(val *ChangeUserPasswordRequest) *NullableChangeUserPasswordRequest {
	return &NullableChangeUserPasswordRequest{value: val, isSet: true}
}

func (v NullableChangeUserPasswordRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeUserPasswordRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
