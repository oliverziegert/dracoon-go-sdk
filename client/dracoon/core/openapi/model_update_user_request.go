/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateUserRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateUserRequest{}

// UpdateUserRequest Request model for updating user's metadata
type UpdateUserRequest struct {
	// User first name
	FirstName *string `json:"firstName,omitempty"`
	// User last name
	LastName *string `json:"lastName,omitempty"`
	// &#128640; Since v4.13.0  Username
	UserName *string `json:"userName,omitempty"`
	// Email
	Email *string `json:"email,omitempty"`
	// User is locked:  * `false` - unlocked  * `true` - locked    User is locked and can not login anymore.
	IsLocked *bool `json:"isLocked,omitempty"`
	// Phone number
	Phone *string `json:"phone,omitempty"`
	// IETF language tag
	ReceiverLanguage *string                    `json:"receiverLanguage,omitempty"`
	Expiration       *ObjectExpiration          `json:"expiration,omitempty"`
	AuthData         *UserAuthDataUpdateRequest `json:"authData,omitempty"`
	MfaConfig        *MfaConfig                 `json:"mfaConfig,omitempty"`
	// &#128679; Deprecated since v4.18.0  Job title
	// Deprecated
	Title *string `json:"title,omitempty"`
	// &#128679; Deprecated since v4.7.0  User lock status:  * `0` - locked  * `1` - Web access allowed  * `2` - Web and mobile access allowed    Please use `isLocked` instead.
	// Deprecated
	LockStatus *int32 `json:"lockStatus,omitempty"`
	// &#128679; Deprecated since v4.12.0  Gender  Do NOT use `gender`! It will be ignored.
	// Deprecated
	Gender *string `json:"gender,omitempty"`
	// &#128679; Deprecated since v4.13.0  Authentication methods:  * `sql`  * `active_directory`  * `openid`  use `authData` instead
	// Deprecated
	AuthMethods []UserAuthMethod `json:"authMethods,omitempty"`
}

// NewUpdateUserRequest instantiates a new UpdateUserRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateUserRequest() *UpdateUserRequest {
	this := UpdateUserRequest{}
	var isLocked bool = false
	this.IsLocked = &isLocked
	var gender string = "n"
	this.Gender = &gender
	return &this
}

// NewUpdateUserRequestWithDefaults instantiates a new UpdateUserRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateUserRequestWithDefaults() *UpdateUserRequest {
	this := UpdateUserRequest{}
	var isLocked bool = false
	this.IsLocked = &isLocked
	var gender string = "n"
	this.Gender = &gender
	return &this
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *UpdateUserRequest) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequest) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *UpdateUserRequest) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *UpdateUserRequest) GetLastName() string {
	if o == nil || IsNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequest) GetLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasLastName() bool {
	if o != nil && !IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *UpdateUserRequest) SetLastName(v string) {
	o.LastName = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *UpdateUserRequest) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequest) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *UpdateUserRequest) SetUserName(v string) {
	o.UserName = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UpdateUserRequest) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequest) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UpdateUserRequest) SetEmail(v string) {
	o.Email = &v
}

// GetIsLocked returns the IsLocked field value if set, zero value otherwise.
func (o *UpdateUserRequest) GetIsLocked() bool {
	if o == nil || IsNil(o.IsLocked) {
		var ret bool
		return ret
	}
	return *o.IsLocked
}

// GetIsLockedOk returns a tuple with the IsLocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequest) GetIsLockedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsLocked) {
		return nil, false
	}
	return o.IsLocked, true
}

// HasIsLocked returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasIsLocked() bool {
	if o != nil && !IsNil(o.IsLocked) {
		return true
	}

	return false
}

// SetIsLocked gets a reference to the given bool and assigns it to the IsLocked field.
func (o *UpdateUserRequest) SetIsLocked(v bool) {
	o.IsLocked = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *UpdateUserRequest) GetPhone() string {
	if o == nil || IsNil(o.Phone) {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequest) GetPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.Phone) {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasPhone() bool {
	if o != nil && !IsNil(o.Phone) {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *UpdateUserRequest) SetPhone(v string) {
	o.Phone = &v
}

// GetReceiverLanguage returns the ReceiverLanguage field value if set, zero value otherwise.
func (o *UpdateUserRequest) GetReceiverLanguage() string {
	if o == nil || IsNil(o.ReceiverLanguage) {
		var ret string
		return ret
	}
	return *o.ReceiverLanguage
}

// GetReceiverLanguageOk returns a tuple with the ReceiverLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequest) GetReceiverLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.ReceiverLanguage) {
		return nil, false
	}
	return o.ReceiverLanguage, true
}

// HasReceiverLanguage returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasReceiverLanguage() bool {
	if o != nil && !IsNil(o.ReceiverLanguage) {
		return true
	}

	return false
}

// SetReceiverLanguage gets a reference to the given string and assigns it to the ReceiverLanguage field.
func (o *UpdateUserRequest) SetReceiverLanguage(v string) {
	o.ReceiverLanguage = &v
}

// GetExpiration returns the Expiration field value if set, zero value otherwise.
func (o *UpdateUserRequest) GetExpiration() ObjectExpiration {
	if o == nil || IsNil(o.Expiration) {
		var ret ObjectExpiration
		return ret
	}
	return *o.Expiration
}

// GetExpirationOk returns a tuple with the Expiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequest) GetExpirationOk() (*ObjectExpiration, bool) {
	if o == nil || IsNil(o.Expiration) {
		return nil, false
	}
	return o.Expiration, true
}

// HasExpiration returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasExpiration() bool {
	if o != nil && !IsNil(o.Expiration) {
		return true
	}

	return false
}

// SetExpiration gets a reference to the given ObjectExpiration and assigns it to the Expiration field.
func (o *UpdateUserRequest) SetExpiration(v ObjectExpiration) {
	o.Expiration = &v
}

// GetAuthData returns the AuthData field value if set, zero value otherwise.
func (o *UpdateUserRequest) GetAuthData() UserAuthDataUpdateRequest {
	if o == nil || IsNil(o.AuthData) {
		var ret UserAuthDataUpdateRequest
		return ret
	}
	return *o.AuthData
}

// GetAuthDataOk returns a tuple with the AuthData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequest) GetAuthDataOk() (*UserAuthDataUpdateRequest, bool) {
	if o == nil || IsNil(o.AuthData) {
		return nil, false
	}
	return o.AuthData, true
}

// HasAuthData returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasAuthData() bool {
	if o != nil && !IsNil(o.AuthData) {
		return true
	}

	return false
}

// SetAuthData gets a reference to the given UserAuthDataUpdateRequest and assigns it to the AuthData field.
func (o *UpdateUserRequest) SetAuthData(v UserAuthDataUpdateRequest) {
	o.AuthData = &v
}

// GetMfaConfig returns the MfaConfig field value if set, zero value otherwise.
func (o *UpdateUserRequest) GetMfaConfig() MfaConfig {
	if o == nil || IsNil(o.MfaConfig) {
		var ret MfaConfig
		return ret
	}
	return *o.MfaConfig
}

// GetMfaConfigOk returns a tuple with the MfaConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequest) GetMfaConfigOk() (*MfaConfig, bool) {
	if o == nil || IsNil(o.MfaConfig) {
		return nil, false
	}
	return o.MfaConfig, true
}

// HasMfaConfig returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasMfaConfig() bool {
	if o != nil && !IsNil(o.MfaConfig) {
		return true
	}

	return false
}

// SetMfaConfig gets a reference to the given MfaConfig and assigns it to the MfaConfig field.
func (o *UpdateUserRequest) SetMfaConfig(v MfaConfig) {
	o.MfaConfig = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
// Deprecated
func (o *UpdateUserRequest) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *UpdateUserRequest) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
// Deprecated
func (o *UpdateUserRequest) SetTitle(v string) {
	o.Title = &v
}

// GetLockStatus returns the LockStatus field value if set, zero value otherwise.
// Deprecated
func (o *UpdateUserRequest) GetLockStatus() int32 {
	if o == nil || IsNil(o.LockStatus) {
		var ret int32
		return ret
	}
	return *o.LockStatus
}

// GetLockStatusOk returns a tuple with the LockStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *UpdateUserRequest) GetLockStatusOk() (*int32, bool) {
	if o == nil || IsNil(o.LockStatus) {
		return nil, false
	}
	return o.LockStatus, true
}

// HasLockStatus returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasLockStatus() bool {
	if o != nil && !IsNil(o.LockStatus) {
		return true
	}

	return false
}

// SetLockStatus gets a reference to the given int32 and assigns it to the LockStatus field.
// Deprecated
func (o *UpdateUserRequest) SetLockStatus(v int32) {
	o.LockStatus = &v
}

// GetGender returns the Gender field value if set, zero value otherwise.
// Deprecated
func (o *UpdateUserRequest) GetGender() string {
	if o == nil || IsNil(o.Gender) {
		var ret string
		return ret
	}
	return *o.Gender
}

// GetGenderOk returns a tuple with the Gender field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *UpdateUserRequest) GetGenderOk() (*string, bool) {
	if o == nil || IsNil(o.Gender) {
		return nil, false
	}
	return o.Gender, true
}

// HasGender returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasGender() bool {
	if o != nil && !IsNil(o.Gender) {
		return true
	}

	return false
}

// SetGender gets a reference to the given string and assigns it to the Gender field.
// Deprecated
func (o *UpdateUserRequest) SetGender(v string) {
	o.Gender = &v
}

// GetAuthMethods returns the AuthMethods field value if set, zero value otherwise.
// Deprecated
func (o *UpdateUserRequest) GetAuthMethods() []UserAuthMethod {
	if o == nil || IsNil(o.AuthMethods) {
		var ret []UserAuthMethod
		return ret
	}
	return o.AuthMethods
}

// GetAuthMethodsOk returns a tuple with the AuthMethods field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *UpdateUserRequest) GetAuthMethodsOk() ([]UserAuthMethod, bool) {
	if o == nil || IsNil(o.AuthMethods) {
		return nil, false
	}
	return o.AuthMethods, true
}

// HasAuthMethods returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasAuthMethods() bool {
	if o != nil && !IsNil(o.AuthMethods) {
		return true
	}

	return false
}

// SetAuthMethods gets a reference to the given []UserAuthMethod and assigns it to the AuthMethods field.
// Deprecated
func (o *UpdateUserRequest) SetAuthMethods(v []UserAuthMethod) {
	o.AuthMethods = v
}

func (o UpdateUserRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateUserRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FirstName) {
		toSerialize["firstName"] = o.FirstName
	}
	if !IsNil(o.LastName) {
		toSerialize["lastName"] = o.LastName
	}
	if !IsNil(o.UserName) {
		toSerialize["userName"] = o.UserName
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.IsLocked) {
		toSerialize["isLocked"] = o.IsLocked
	}
	if !IsNil(o.Phone) {
		toSerialize["phone"] = o.Phone
	}
	if !IsNil(o.ReceiverLanguage) {
		toSerialize["receiverLanguage"] = o.ReceiverLanguage
	}
	if !IsNil(o.Expiration) {
		toSerialize["expiration"] = o.Expiration
	}
	if !IsNil(o.AuthData) {
		toSerialize["authData"] = o.AuthData
	}
	if !IsNil(o.MfaConfig) {
		toSerialize["mfaConfig"] = o.MfaConfig
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.LockStatus) {
		toSerialize["lockStatus"] = o.LockStatus
	}
	if !IsNil(o.Gender) {
		toSerialize["gender"] = o.Gender
	}
	if !IsNil(o.AuthMethods) {
		toSerialize["authMethods"] = o.AuthMethods
	}
	return toSerialize, nil
}

type NullableUpdateUserRequest struct {
	value *UpdateUserRequest
	isSet bool
}

func (v NullableUpdateUserRequest) Get() *UpdateUserRequest {
	return v.value
}

func (v *NullableUpdateUserRequest) Set(val *UpdateUserRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateUserRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateUserRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateUserRequest(val *UpdateUserRequest) *NullableUpdateUserRequest {
	return &NullableUpdateUserRequest{value: val, isSet: true}
}

func (v NullableUpdateUserRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateUserRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
