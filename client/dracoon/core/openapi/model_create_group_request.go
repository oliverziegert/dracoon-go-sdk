/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateGroupRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateGroupRequest{}

// CreateGroupRequest Request model for creating a group
type CreateGroupRequest struct {
	// Group name
	Name       string            `json:"name"`
	Expiration *ObjectExpiration `json:"expiration,omitempty"`
}

type _CreateGroupRequest CreateGroupRequest

// NewCreateGroupRequest instantiates a new CreateGroupRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateGroupRequest(name string) *CreateGroupRequest {
	this := CreateGroupRequest{}
	this.Name = name
	return &this
}

// NewCreateGroupRequestWithDefaults instantiates a new CreateGroupRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateGroupRequestWithDefaults() *CreateGroupRequest {
	this := CreateGroupRequest{}
	return &this
}

// GetName returns the Name field value
func (o *CreateGroupRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateGroupRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateGroupRequest) SetName(v string) {
	o.Name = v
}

// GetExpiration returns the Expiration field value if set, zero value otherwise.
func (o *CreateGroupRequest) GetExpiration() ObjectExpiration {
	if o == nil || IsNil(o.Expiration) {
		var ret ObjectExpiration
		return ret
	}
	return *o.Expiration
}

// GetExpirationOk returns a tuple with the Expiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateGroupRequest) GetExpirationOk() (*ObjectExpiration, bool) {
	if o == nil || IsNil(o.Expiration) {
		return nil, false
	}
	return o.Expiration, true
}

// HasExpiration returns a boolean if a field has been set.
func (o *CreateGroupRequest) HasExpiration() bool {
	if o != nil && !IsNil(o.Expiration) {
		return true
	}

	return false
}

// SetExpiration gets a reference to the given ObjectExpiration and assigns it to the Expiration field.
func (o *CreateGroupRequest) SetExpiration(v ObjectExpiration) {
	o.Expiration = &v
}

func (o CreateGroupRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateGroupRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Expiration) {
		toSerialize["expiration"] = o.Expiration
	}
	return toSerialize, nil
}

func (o *CreateGroupRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateGroupRequest := _CreateGroupRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateGroupRequest)

	if err != nil {
		return err
	}

	*o = CreateGroupRequest(varCreateGroupRequest)

	return err
}

type NullableCreateGroupRequest struct {
	value *CreateGroupRequest
	isSet bool
}

func (v NullableCreateGroupRequest) Get() *CreateGroupRequest {
	return v.value
}

func (v *NullableCreateGroupRequest) Set(val *CreateGroupRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateGroupRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateGroupRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateGroupRequest(val *CreateGroupRequest) *NullableCreateGroupRequest {
	return &NullableCreateGroupRequest{value: val, isSet: true}
}

func (v NullableCreateGroupRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateGroupRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
