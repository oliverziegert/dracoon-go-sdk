/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the PublicUploadedFileData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicUploadedFileData{}

// PublicUploadedFileData File information
type PublicUploadedFileData struct {
	// Name
	Name string `json:"name"`
	// File size in byte
	Size int64 `json:"size"`
	// Creation date
	CreatedAt time.Time `json:"createdAt"`
	// Hash value of transferred file
	Hash *string `json:"hash,omitempty"`
}

type _PublicUploadedFileData PublicUploadedFileData

// NewPublicUploadedFileData instantiates a new PublicUploadedFileData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicUploadedFileData(name string, size int64, createdAt time.Time) *PublicUploadedFileData {
	this := PublicUploadedFileData{}
	this.Name = name
	this.Size = size
	this.CreatedAt = createdAt
	return &this
}

// NewPublicUploadedFileDataWithDefaults instantiates a new PublicUploadedFileData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicUploadedFileDataWithDefaults() *PublicUploadedFileData {
	this := PublicUploadedFileData{}
	return &this
}

// GetName returns the Name field value
func (o *PublicUploadedFileData) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PublicUploadedFileData) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PublicUploadedFileData) SetName(v string) {
	o.Name = v
}

// GetSize returns the Size field value
func (o *PublicUploadedFileData) GetSize() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *PublicUploadedFileData) GetSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *PublicUploadedFileData) SetSize(v int64) {
	o.Size = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *PublicUploadedFileData) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *PublicUploadedFileData) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *PublicUploadedFileData) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetHash returns the Hash field value if set, zero value otherwise.
func (o *PublicUploadedFileData) GetHash() string {
	if o == nil || IsNil(o.Hash) {
		var ret string
		return ret
	}
	return *o.Hash
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicUploadedFileData) GetHashOk() (*string, bool) {
	if o == nil || IsNil(o.Hash) {
		return nil, false
	}
	return o.Hash, true
}

// HasHash returns a boolean if a field has been set.
func (o *PublicUploadedFileData) HasHash() bool {
	if o != nil && !IsNil(o.Hash) {
		return true
	}

	return false
}

// SetHash gets a reference to the given string and assigns it to the Hash field.
func (o *PublicUploadedFileData) SetHash(v string) {
	o.Hash = &v
}

func (o PublicUploadedFileData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicUploadedFileData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["size"] = o.Size
	toSerialize["createdAt"] = o.CreatedAt
	if !IsNil(o.Hash) {
		toSerialize["hash"] = o.Hash
	}
	return toSerialize, nil
}

func (o *PublicUploadedFileData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"size",
		"createdAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicUploadedFileData := _PublicUploadedFileData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicUploadedFileData)

	if err != nil {
		return err
	}

	*o = PublicUploadedFileData(varPublicUploadedFileData)

	return err
}

type NullablePublicUploadedFileData struct {
	value *PublicUploadedFileData
	isSet bool
}

func (v NullablePublicUploadedFileData) Get() *PublicUploadedFileData {
	return v.value
}

func (v *NullablePublicUploadedFileData) Set(val *PublicUploadedFileData) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicUploadedFileData) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicUploadedFileData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicUploadedFileData(val *PublicUploadedFileData) *NullablePublicUploadedFileData {
	return &NullablePublicUploadedFileData{value: val, isSet: true}
}

func (v NullablePublicUploadedFileData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicUploadedFileData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
