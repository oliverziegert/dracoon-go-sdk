/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TestActiveDirectoryConfigRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestActiveDirectoryConfigRequest{}

// TestActiveDirectoryConfigRequest Request model for testing connection for Active Directory configuration
type TestActiveDirectoryConfigRequest struct {
	// IPv4 or IPv6 address or host name
	ServerIp string `json:"serverIp"`
	// Port
	ServerPort int32 `json:"serverPort"`
	// Distinguished Name (DN) of Active Directory administrative account
	ServerAdminName string `json:"serverAdminName"`
	// Password of Active Directory administrative account
	ServerAdminPassword string `json:"serverAdminPassword"`
	// Search scope of Active Directory; only users below this node can log on.
	LdapUsersDomain string `json:"ldapUsersDomain"`
	// Determines whether LDAPS should be used instead of plain LDAP.
	UseLdaps *bool `json:"useLdaps,omitempty"`
	// SSL finger print of Active Directory server.  Mandatory for LDAPS connections.  Format: `Algorithm/Fingerprint`
	SslFingerPrint *string `json:"sslFingerPrint,omitempty"`
}

type _TestActiveDirectoryConfigRequest TestActiveDirectoryConfigRequest

// NewTestActiveDirectoryConfigRequest instantiates a new TestActiveDirectoryConfigRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestActiveDirectoryConfigRequest(serverIp string, serverPort int32, serverAdminName string, serverAdminPassword string, ldapUsersDomain string) *TestActiveDirectoryConfigRequest {
	this := TestActiveDirectoryConfigRequest{}
	this.ServerIp = serverIp
	this.ServerPort = serverPort
	this.ServerAdminName = serverAdminName
	this.ServerAdminPassword = serverAdminPassword
	this.LdapUsersDomain = ldapUsersDomain
	var useLdaps bool = false
	this.UseLdaps = &useLdaps
	return &this
}

// NewTestActiveDirectoryConfigRequestWithDefaults instantiates a new TestActiveDirectoryConfigRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestActiveDirectoryConfigRequestWithDefaults() *TestActiveDirectoryConfigRequest {
	this := TestActiveDirectoryConfigRequest{}
	var useLdaps bool = false
	this.UseLdaps = &useLdaps
	return &this
}

// GetServerIp returns the ServerIp field value
func (o *TestActiveDirectoryConfigRequest) GetServerIp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServerIp
}

// GetServerIpOk returns a tuple with the ServerIp field value
// and a boolean to check if the value has been set.
func (o *TestActiveDirectoryConfigRequest) GetServerIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerIp, true
}

// SetServerIp sets field value
func (o *TestActiveDirectoryConfigRequest) SetServerIp(v string) {
	o.ServerIp = v
}

// GetServerPort returns the ServerPort field value
func (o *TestActiveDirectoryConfigRequest) GetServerPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ServerPort
}

// GetServerPortOk returns a tuple with the ServerPort field value
// and a boolean to check if the value has been set.
func (o *TestActiveDirectoryConfigRequest) GetServerPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerPort, true
}

// SetServerPort sets field value
func (o *TestActiveDirectoryConfigRequest) SetServerPort(v int32) {
	o.ServerPort = v
}

// GetServerAdminName returns the ServerAdminName field value
func (o *TestActiveDirectoryConfigRequest) GetServerAdminName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServerAdminName
}

// GetServerAdminNameOk returns a tuple with the ServerAdminName field value
// and a boolean to check if the value has been set.
func (o *TestActiveDirectoryConfigRequest) GetServerAdminNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerAdminName, true
}

// SetServerAdminName sets field value
func (o *TestActiveDirectoryConfigRequest) SetServerAdminName(v string) {
	o.ServerAdminName = v
}

// GetServerAdminPassword returns the ServerAdminPassword field value
func (o *TestActiveDirectoryConfigRequest) GetServerAdminPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServerAdminPassword
}

// GetServerAdminPasswordOk returns a tuple with the ServerAdminPassword field value
// and a boolean to check if the value has been set.
func (o *TestActiveDirectoryConfigRequest) GetServerAdminPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerAdminPassword, true
}

// SetServerAdminPassword sets field value
func (o *TestActiveDirectoryConfigRequest) SetServerAdminPassword(v string) {
	o.ServerAdminPassword = v
}

// GetLdapUsersDomain returns the LdapUsersDomain field value
func (o *TestActiveDirectoryConfigRequest) GetLdapUsersDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LdapUsersDomain
}

// GetLdapUsersDomainOk returns a tuple with the LdapUsersDomain field value
// and a boolean to check if the value has been set.
func (o *TestActiveDirectoryConfigRequest) GetLdapUsersDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LdapUsersDomain, true
}

// SetLdapUsersDomain sets field value
func (o *TestActiveDirectoryConfigRequest) SetLdapUsersDomain(v string) {
	o.LdapUsersDomain = v
}

// GetUseLdaps returns the UseLdaps field value if set, zero value otherwise.
func (o *TestActiveDirectoryConfigRequest) GetUseLdaps() bool {
	if o == nil || IsNil(o.UseLdaps) {
		var ret bool
		return ret
	}
	return *o.UseLdaps
}

// GetUseLdapsOk returns a tuple with the UseLdaps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestActiveDirectoryConfigRequest) GetUseLdapsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseLdaps) {
		return nil, false
	}
	return o.UseLdaps, true
}

// HasUseLdaps returns a boolean if a field has been set.
func (o *TestActiveDirectoryConfigRequest) HasUseLdaps() bool {
	if o != nil && !IsNil(o.UseLdaps) {
		return true
	}

	return false
}

// SetUseLdaps gets a reference to the given bool and assigns it to the UseLdaps field.
func (o *TestActiveDirectoryConfigRequest) SetUseLdaps(v bool) {
	o.UseLdaps = &v
}

// GetSslFingerPrint returns the SslFingerPrint field value if set, zero value otherwise.
func (o *TestActiveDirectoryConfigRequest) GetSslFingerPrint() string {
	if o == nil || IsNil(o.SslFingerPrint) {
		var ret string
		return ret
	}
	return *o.SslFingerPrint
}

// GetSslFingerPrintOk returns a tuple with the SslFingerPrint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestActiveDirectoryConfigRequest) GetSslFingerPrintOk() (*string, bool) {
	if o == nil || IsNil(o.SslFingerPrint) {
		return nil, false
	}
	return o.SslFingerPrint, true
}

// HasSslFingerPrint returns a boolean if a field has been set.
func (o *TestActiveDirectoryConfigRequest) HasSslFingerPrint() bool {
	if o != nil && !IsNil(o.SslFingerPrint) {
		return true
	}

	return false
}

// SetSslFingerPrint gets a reference to the given string and assigns it to the SslFingerPrint field.
func (o *TestActiveDirectoryConfigRequest) SetSslFingerPrint(v string) {
	o.SslFingerPrint = &v
}

func (o TestActiveDirectoryConfigRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestActiveDirectoryConfigRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["serverIp"] = o.ServerIp
	toSerialize["serverPort"] = o.ServerPort
	toSerialize["serverAdminName"] = o.ServerAdminName
	toSerialize["serverAdminPassword"] = o.ServerAdminPassword
	toSerialize["ldapUsersDomain"] = o.LdapUsersDomain
	if !IsNil(o.UseLdaps) {
		toSerialize["useLdaps"] = o.UseLdaps
	}
	if !IsNil(o.SslFingerPrint) {
		toSerialize["sslFingerPrint"] = o.SslFingerPrint
	}
	return toSerialize, nil
}

func (o *TestActiveDirectoryConfigRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"serverIp",
		"serverPort",
		"serverAdminName",
		"serverAdminPassword",
		"ldapUsersDomain",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTestActiveDirectoryConfigRequest := _TestActiveDirectoryConfigRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTestActiveDirectoryConfigRequest)

	if err != nil {
		return err
	}

	*o = TestActiveDirectoryConfigRequest(varTestActiveDirectoryConfigRequest)

	return err
}

type NullableTestActiveDirectoryConfigRequest struct {
	value *TestActiveDirectoryConfigRequest
	isSet bool
}

func (v NullableTestActiveDirectoryConfigRequest) Get() *TestActiveDirectoryConfigRequest {
	return v.value
}

func (v *NullableTestActiveDirectoryConfigRequest) Set(val *TestActiveDirectoryConfigRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTestActiveDirectoryConfigRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTestActiveDirectoryConfigRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestActiveDirectoryConfigRequest(val *TestActiveDirectoryConfigRequest) *NullableTestActiveDirectoryConfigRequest {
	return &NullableTestActiveDirectoryConfigRequest{value: val, isSet: true}
}

func (v NullableTestActiveDirectoryConfigRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestActiveDirectoryConfigRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
