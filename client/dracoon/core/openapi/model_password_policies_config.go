/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PasswordPoliciesConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PasswordPoliciesConfig{}

// PasswordPoliciesConfig Set of password policies
type PasswordPoliciesConfig struct {
	LoginPasswordPolicies      *LoginPasswordPolicies      `json:"loginPasswordPolicies,omitempty"`
	SharesPasswordPolicies     *SharesPasswordPolicies     `json:"sharesPasswordPolicies,omitempty"`
	EncryptionPasswordPolicies *EncryptionPasswordPolicies `json:"encryptionPasswordPolicies,omitempty"`
}

// NewPasswordPoliciesConfig instantiates a new PasswordPoliciesConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPasswordPoliciesConfig() *PasswordPoliciesConfig {
	this := PasswordPoliciesConfig{}
	return &this
}

// NewPasswordPoliciesConfigWithDefaults instantiates a new PasswordPoliciesConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPasswordPoliciesConfigWithDefaults() *PasswordPoliciesConfig {
	this := PasswordPoliciesConfig{}
	return &this
}

// GetLoginPasswordPolicies returns the LoginPasswordPolicies field value if set, zero value otherwise.
func (o *PasswordPoliciesConfig) GetLoginPasswordPolicies() LoginPasswordPolicies {
	if o == nil || IsNil(o.LoginPasswordPolicies) {
		var ret LoginPasswordPolicies
		return ret
	}
	return *o.LoginPasswordPolicies
}

// GetLoginPasswordPoliciesOk returns a tuple with the LoginPasswordPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPoliciesConfig) GetLoginPasswordPoliciesOk() (*LoginPasswordPolicies, bool) {
	if o == nil || IsNil(o.LoginPasswordPolicies) {
		return nil, false
	}
	return o.LoginPasswordPolicies, true
}

// HasLoginPasswordPolicies returns a boolean if a field has been set.
func (o *PasswordPoliciesConfig) HasLoginPasswordPolicies() bool {
	if o != nil && !IsNil(o.LoginPasswordPolicies) {
		return true
	}

	return false
}

// SetLoginPasswordPolicies gets a reference to the given LoginPasswordPolicies and assigns it to the LoginPasswordPolicies field.
func (o *PasswordPoliciesConfig) SetLoginPasswordPolicies(v LoginPasswordPolicies) {
	o.LoginPasswordPolicies = &v
}

// GetSharesPasswordPolicies returns the SharesPasswordPolicies field value if set, zero value otherwise.
func (o *PasswordPoliciesConfig) GetSharesPasswordPolicies() SharesPasswordPolicies {
	if o == nil || IsNil(o.SharesPasswordPolicies) {
		var ret SharesPasswordPolicies
		return ret
	}
	return *o.SharesPasswordPolicies
}

// GetSharesPasswordPoliciesOk returns a tuple with the SharesPasswordPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPoliciesConfig) GetSharesPasswordPoliciesOk() (*SharesPasswordPolicies, bool) {
	if o == nil || IsNil(o.SharesPasswordPolicies) {
		return nil, false
	}
	return o.SharesPasswordPolicies, true
}

// HasSharesPasswordPolicies returns a boolean if a field has been set.
func (o *PasswordPoliciesConfig) HasSharesPasswordPolicies() bool {
	if o != nil && !IsNil(o.SharesPasswordPolicies) {
		return true
	}

	return false
}

// SetSharesPasswordPolicies gets a reference to the given SharesPasswordPolicies and assigns it to the SharesPasswordPolicies field.
func (o *PasswordPoliciesConfig) SetSharesPasswordPolicies(v SharesPasswordPolicies) {
	o.SharesPasswordPolicies = &v
}

// GetEncryptionPasswordPolicies returns the EncryptionPasswordPolicies field value if set, zero value otherwise.
func (o *PasswordPoliciesConfig) GetEncryptionPasswordPolicies() EncryptionPasswordPolicies {
	if o == nil || IsNil(o.EncryptionPasswordPolicies) {
		var ret EncryptionPasswordPolicies
		return ret
	}
	return *o.EncryptionPasswordPolicies
}

// GetEncryptionPasswordPoliciesOk returns a tuple with the EncryptionPasswordPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPoliciesConfig) GetEncryptionPasswordPoliciesOk() (*EncryptionPasswordPolicies, bool) {
	if o == nil || IsNil(o.EncryptionPasswordPolicies) {
		return nil, false
	}
	return o.EncryptionPasswordPolicies, true
}

// HasEncryptionPasswordPolicies returns a boolean if a field has been set.
func (o *PasswordPoliciesConfig) HasEncryptionPasswordPolicies() bool {
	if o != nil && !IsNil(o.EncryptionPasswordPolicies) {
		return true
	}

	return false
}

// SetEncryptionPasswordPolicies gets a reference to the given EncryptionPasswordPolicies and assigns it to the EncryptionPasswordPolicies field.
func (o *PasswordPoliciesConfig) SetEncryptionPasswordPolicies(v EncryptionPasswordPolicies) {
	o.EncryptionPasswordPolicies = &v
}

func (o PasswordPoliciesConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PasswordPoliciesConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LoginPasswordPolicies) {
		toSerialize["loginPasswordPolicies"] = o.LoginPasswordPolicies
	}
	if !IsNil(o.SharesPasswordPolicies) {
		toSerialize["sharesPasswordPolicies"] = o.SharesPasswordPolicies
	}
	if !IsNil(o.EncryptionPasswordPolicies) {
		toSerialize["encryptionPasswordPolicies"] = o.EncryptionPasswordPolicies
	}
	return toSerialize, nil
}

type NullablePasswordPoliciesConfig struct {
	value *PasswordPoliciesConfig
	isSet bool
}

func (v NullablePasswordPoliciesConfig) Get() *PasswordPoliciesConfig {
	return v.value
}

func (v *NullablePasswordPoliciesConfig) Set(val *PasswordPoliciesConfig) {
	v.value = val
	v.isSet = true
}

func (v NullablePasswordPoliciesConfig) IsSet() bool {
	return v.isSet
}

func (v *NullablePasswordPoliciesConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePasswordPoliciesConfig(val *PasswordPoliciesConfig) *NullablePasswordPoliciesConfig {
	return &NullablePasswordPoliciesConfig{value: val, isSet: true}
}

func (v NullablePasswordPoliciesConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePasswordPoliciesConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
