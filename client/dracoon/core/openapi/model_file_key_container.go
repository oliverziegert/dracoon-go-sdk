/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the FileKeyContainer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileKeyContainer{}

// FileKeyContainer File key container
type FileKeyContainer struct {
	// Encryption key
	Key string `json:"key"`
	// Initial vector
	Iv string `json:"iv"`
	// Version
	Version string `json:"version"`
	// Authentication tag  (needed with authenticated encryption)
	Tag *string `json:"tag,omitempty"`
}

type _FileKeyContainer FileKeyContainer

// NewFileKeyContainer instantiates a new FileKeyContainer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileKeyContainer(key string, iv string, version string) *FileKeyContainer {
	this := FileKeyContainer{}
	this.Key = key
	this.Iv = iv
	this.Version = version
	return &this
}

// NewFileKeyContainerWithDefaults instantiates a new FileKeyContainer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileKeyContainerWithDefaults() *FileKeyContainer {
	this := FileKeyContainer{}
	return &this
}

// GetKey returns the Key field value
func (o *FileKeyContainer) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *FileKeyContainer) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *FileKeyContainer) SetKey(v string) {
	o.Key = v
}

// GetIv returns the Iv field value
func (o *FileKeyContainer) GetIv() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Iv
}

// GetIvOk returns a tuple with the Iv field value
// and a boolean to check if the value has been set.
func (o *FileKeyContainer) GetIvOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Iv, true
}

// SetIv sets field value
func (o *FileKeyContainer) SetIv(v string) {
	o.Iv = v
}

// GetVersion returns the Version field value
func (o *FileKeyContainer) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *FileKeyContainer) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *FileKeyContainer) SetVersion(v string) {
	o.Version = v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *FileKeyContainer) GetTag() string {
	if o == nil || IsNil(o.Tag) {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileKeyContainer) GetTagOk() (*string, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *FileKeyContainer) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *FileKeyContainer) SetTag(v string) {
	o.Tag = &v
}

func (o FileKeyContainer) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileKeyContainer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	toSerialize["iv"] = o.Iv
	toSerialize["version"] = o.Version
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	return toSerialize, nil
}

func (o *FileKeyContainer) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
		"iv",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFileKeyContainer := _FileKeyContainer{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFileKeyContainer)

	if err != nil {
		return err
	}

	*o = FileKeyContainer(varFileKeyContainer)

	return err
}

type NullableFileKeyContainer struct {
	value *FileKeyContainer
	isSet bool
}

func (v NullableFileKeyContainer) Get() *FileKeyContainer {
	return v.value
}

func (v *NullableFileKeyContainer) Set(val *FileKeyContainer) {
	v.value = val
	v.isSet = true
}

func (v NullableFileKeyContainer) IsSet() bool {
	return v.isSet
}

func (v *NullableFileKeyContainer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileKeyContainer(val *FileKeyContainer) *NullableFileKeyContainer {
	return &NullableFileKeyContainer{value: val, isSet: true}
}

func (v NullableFileKeyContainer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileKeyContainer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
