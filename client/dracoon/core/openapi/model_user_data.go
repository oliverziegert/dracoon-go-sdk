/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the UserData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserData{}

// UserData User information
type UserData struct {
	// Unique identifier for the user
	Id int64 `json:"id"`
	// &#128640; Since v4.13.0  Username
	UserName string `json:"userName"`
	// User first name
	FirstName string `json:"firstName"`
	// User last name
	LastName string `json:"lastName"`
	// User is locked:  * `false` - unlocked  * `true` - locked    User is locked and can not login anymore.
	IsLocked bool `json:"isLocked"`
	// &#128640; Since v4.11.0  Avatar UUID
	AvatarUuid string       `json:"avatarUuid"`
	AuthData   UserAuthData `json:"authData"`
	// Email
	Email *string `json:"email,omitempty"`
	// Phone number
	Phone *string `json:"phone,omitempty"`
	// Expiration date
	ExpireAt *time.Time `json:"expireAt,omitempty"`
	// User has manageable rooms
	HasManageableRooms *bool `json:"hasManageableRooms,omitempty"`
	// User has generated private key.  Possible if client-side encryption is active for this customer
	IsEncryptionEnabled *bool `json:"isEncryptionEnabled,omitempty"`
	// Last successful logon date
	LastLoginSuccessAt *time.Time `json:"lastLoginSuccessAt,omitempty"`
	// Homeroom ID
	HomeRoomId         *int64              `json:"homeRoomId,omitempty"`
	PublicKeyContainer *PublicKeyContainer `json:"publicKeyContainer,omitempty"`
	UserRoles          *RoleList           `json:"userRoles,omitempty"`
	// Determines whether multi-factor authentication is enabled
	IsMfaEnabled *bool `json:"isMfaEnabled,omitempty"`
	// Determines whether multi-factor authentication is enforced
	IsMfaEnforced *bool `json:"isMfaEnforced,omitempty"`
	// Deprecated
	UserAttributes *UserAttributes `json:"userAttributes,omitempty"`
	// &#128679; Deprecated since v4.18.0  Job title
	// Deprecated
	Title *string `json:"title,omitempty"`
	// &#128679; Deprecated since v4.7.0  User lock status:  * `0` - locked  * `1` - Web access allowed  * `2` - Web and mobile access allowed    Please use `isLocked` instead.
	// Deprecated
	LockStatus int32 `json:"lockStatus"`
	// &#128679; Deprecated since v4.13.0  User login name
	// Deprecated
	Login *string `json:"login,omitempty"`
	// &#128679; Deprecated since v4.13.0  Authentication methods:  * `sql`  * `active_directory`  * `openid`  use `authData` instead
	// Deprecated
	AuthMethods []UserAuthMethod `json:"authMethods,omitempty"`
	// &#128679; Deprecated since v4.12.0  Gender
	// Deprecated
	Gender *string `json:"gender,omitempty"`
}

type _UserData UserData

// NewUserData instantiates a new UserData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserData(id int64, userName string, firstName string, lastName string, isLocked bool, avatarUuid string, authData UserAuthData, lockStatus int32) *UserData {
	this := UserData{}
	this.Id = id
	this.UserName = userName
	this.FirstName = firstName
	this.LastName = lastName
	this.IsLocked = isLocked
	this.AvatarUuid = avatarUuid
	this.AuthData = authData
	this.LockStatus = lockStatus
	var gender string = "n"
	this.Gender = &gender
	return &this
}

// NewUserDataWithDefaults instantiates a new UserData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserDataWithDefaults() *UserData {
	this := UserData{}
	var isLocked bool = false
	this.IsLocked = isLocked
	var gender string = "n"
	this.Gender = &gender
	return &this
}

// GetId returns the Id field value
func (o *UserData) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UserData) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UserData) SetId(v int64) {
	o.Id = v
}

// GetUserName returns the UserName field value
func (o *UserData) GetUserName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value
// and a boolean to check if the value has been set.
func (o *UserData) GetUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserName, true
}

// SetUserName sets field value
func (o *UserData) SetUserName(v string) {
	o.UserName = v
}

// GetFirstName returns the FirstName field value
func (o *UserData) GetFirstName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value
// and a boolean to check if the value has been set.
func (o *UserData) GetFirstNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstName, true
}

// SetFirstName sets field value
func (o *UserData) SetFirstName(v string) {
	o.FirstName = v
}

// GetLastName returns the LastName field value
func (o *UserData) GetLastName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value
// and a boolean to check if the value has been set.
func (o *UserData) GetLastNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastName, true
}

// SetLastName sets field value
func (o *UserData) SetLastName(v string) {
	o.LastName = v
}

// GetIsLocked returns the IsLocked field value
func (o *UserData) GetIsLocked() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsLocked
}

// GetIsLockedOk returns a tuple with the IsLocked field value
// and a boolean to check if the value has been set.
func (o *UserData) GetIsLockedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsLocked, true
}

// SetIsLocked sets field value
func (o *UserData) SetIsLocked(v bool) {
	o.IsLocked = v
}

// GetAvatarUuid returns the AvatarUuid field value
func (o *UserData) GetAvatarUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AvatarUuid
}

// GetAvatarUuidOk returns a tuple with the AvatarUuid field value
// and a boolean to check if the value has been set.
func (o *UserData) GetAvatarUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvatarUuid, true
}

// SetAvatarUuid sets field value
func (o *UserData) SetAvatarUuid(v string) {
	o.AvatarUuid = v
}

// GetAuthData returns the AuthData field value
func (o *UserData) GetAuthData() UserAuthData {
	if o == nil {
		var ret UserAuthData
		return ret
	}

	return o.AuthData
}

// GetAuthDataOk returns a tuple with the AuthData field value
// and a boolean to check if the value has been set.
func (o *UserData) GetAuthDataOk() (*UserAuthData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthData, true
}

// SetAuthData sets field value
func (o *UserData) SetAuthData(v UserAuthData) {
	o.AuthData = v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UserData) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserData) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UserData) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UserData) SetEmail(v string) {
	o.Email = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *UserData) GetPhone() string {
	if o == nil || IsNil(o.Phone) {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserData) GetPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.Phone) {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *UserData) HasPhone() bool {
	if o != nil && !IsNil(o.Phone) {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *UserData) SetPhone(v string) {
	o.Phone = &v
}

// GetExpireAt returns the ExpireAt field value if set, zero value otherwise.
func (o *UserData) GetExpireAt() time.Time {
	if o == nil || IsNil(o.ExpireAt) {
		var ret time.Time
		return ret
	}
	return *o.ExpireAt
}

// GetExpireAtOk returns a tuple with the ExpireAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserData) GetExpireAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpireAt) {
		return nil, false
	}
	return o.ExpireAt, true
}

// HasExpireAt returns a boolean if a field has been set.
func (o *UserData) HasExpireAt() bool {
	if o != nil && !IsNil(o.ExpireAt) {
		return true
	}

	return false
}

// SetExpireAt gets a reference to the given time.Time and assigns it to the ExpireAt field.
func (o *UserData) SetExpireAt(v time.Time) {
	o.ExpireAt = &v
}

// GetHasManageableRooms returns the HasManageableRooms field value if set, zero value otherwise.
func (o *UserData) GetHasManageableRooms() bool {
	if o == nil || IsNil(o.HasManageableRooms) {
		var ret bool
		return ret
	}
	return *o.HasManageableRooms
}

// GetHasManageableRoomsOk returns a tuple with the HasManageableRooms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserData) GetHasManageableRoomsOk() (*bool, bool) {
	if o == nil || IsNil(o.HasManageableRooms) {
		return nil, false
	}
	return o.HasManageableRooms, true
}

// HasHasManageableRooms returns a boolean if a field has been set.
func (o *UserData) HasHasManageableRooms() bool {
	if o != nil && !IsNil(o.HasManageableRooms) {
		return true
	}

	return false
}

// SetHasManageableRooms gets a reference to the given bool and assigns it to the HasManageableRooms field.
func (o *UserData) SetHasManageableRooms(v bool) {
	o.HasManageableRooms = &v
}

// GetIsEncryptionEnabled returns the IsEncryptionEnabled field value if set, zero value otherwise.
func (o *UserData) GetIsEncryptionEnabled() bool {
	if o == nil || IsNil(o.IsEncryptionEnabled) {
		var ret bool
		return ret
	}
	return *o.IsEncryptionEnabled
}

// GetIsEncryptionEnabledOk returns a tuple with the IsEncryptionEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserData) GetIsEncryptionEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEncryptionEnabled) {
		return nil, false
	}
	return o.IsEncryptionEnabled, true
}

// HasIsEncryptionEnabled returns a boolean if a field has been set.
func (o *UserData) HasIsEncryptionEnabled() bool {
	if o != nil && !IsNil(o.IsEncryptionEnabled) {
		return true
	}

	return false
}

// SetIsEncryptionEnabled gets a reference to the given bool and assigns it to the IsEncryptionEnabled field.
func (o *UserData) SetIsEncryptionEnabled(v bool) {
	o.IsEncryptionEnabled = &v
}

// GetLastLoginSuccessAt returns the LastLoginSuccessAt field value if set, zero value otherwise.
func (o *UserData) GetLastLoginSuccessAt() time.Time {
	if o == nil || IsNil(o.LastLoginSuccessAt) {
		var ret time.Time
		return ret
	}
	return *o.LastLoginSuccessAt
}

// GetLastLoginSuccessAtOk returns a tuple with the LastLoginSuccessAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserData) GetLastLoginSuccessAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastLoginSuccessAt) {
		return nil, false
	}
	return o.LastLoginSuccessAt, true
}

// HasLastLoginSuccessAt returns a boolean if a field has been set.
func (o *UserData) HasLastLoginSuccessAt() bool {
	if o != nil && !IsNil(o.LastLoginSuccessAt) {
		return true
	}

	return false
}

// SetLastLoginSuccessAt gets a reference to the given time.Time and assigns it to the LastLoginSuccessAt field.
func (o *UserData) SetLastLoginSuccessAt(v time.Time) {
	o.LastLoginSuccessAt = &v
}

// GetHomeRoomId returns the HomeRoomId field value if set, zero value otherwise.
func (o *UserData) GetHomeRoomId() int64 {
	if o == nil || IsNil(o.HomeRoomId) {
		var ret int64
		return ret
	}
	return *o.HomeRoomId
}

// GetHomeRoomIdOk returns a tuple with the HomeRoomId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserData) GetHomeRoomIdOk() (*int64, bool) {
	if o == nil || IsNil(o.HomeRoomId) {
		return nil, false
	}
	return o.HomeRoomId, true
}

// HasHomeRoomId returns a boolean if a field has been set.
func (o *UserData) HasHomeRoomId() bool {
	if o != nil && !IsNil(o.HomeRoomId) {
		return true
	}

	return false
}

// SetHomeRoomId gets a reference to the given int64 and assigns it to the HomeRoomId field.
func (o *UserData) SetHomeRoomId(v int64) {
	o.HomeRoomId = &v
}

// GetPublicKeyContainer returns the PublicKeyContainer field value if set, zero value otherwise.
func (o *UserData) GetPublicKeyContainer() PublicKeyContainer {
	if o == nil || IsNil(o.PublicKeyContainer) {
		var ret PublicKeyContainer
		return ret
	}
	return *o.PublicKeyContainer
}

// GetPublicKeyContainerOk returns a tuple with the PublicKeyContainer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserData) GetPublicKeyContainerOk() (*PublicKeyContainer, bool) {
	if o == nil || IsNil(o.PublicKeyContainer) {
		return nil, false
	}
	return o.PublicKeyContainer, true
}

// HasPublicKeyContainer returns a boolean if a field has been set.
func (o *UserData) HasPublicKeyContainer() bool {
	if o != nil && !IsNil(o.PublicKeyContainer) {
		return true
	}

	return false
}

// SetPublicKeyContainer gets a reference to the given PublicKeyContainer and assigns it to the PublicKeyContainer field.
func (o *UserData) SetPublicKeyContainer(v PublicKeyContainer) {
	o.PublicKeyContainer = &v
}

// GetUserRoles returns the UserRoles field value if set, zero value otherwise.
func (o *UserData) GetUserRoles() RoleList {
	if o == nil || IsNil(o.UserRoles) {
		var ret RoleList
		return ret
	}
	return *o.UserRoles
}

// GetUserRolesOk returns a tuple with the UserRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserData) GetUserRolesOk() (*RoleList, bool) {
	if o == nil || IsNil(o.UserRoles) {
		return nil, false
	}
	return o.UserRoles, true
}

// HasUserRoles returns a boolean if a field has been set.
func (o *UserData) HasUserRoles() bool {
	if o != nil && !IsNil(o.UserRoles) {
		return true
	}

	return false
}

// SetUserRoles gets a reference to the given RoleList and assigns it to the UserRoles field.
func (o *UserData) SetUserRoles(v RoleList) {
	o.UserRoles = &v
}

// GetIsMfaEnabled returns the IsMfaEnabled field value if set, zero value otherwise.
func (o *UserData) GetIsMfaEnabled() bool {
	if o == nil || IsNil(o.IsMfaEnabled) {
		var ret bool
		return ret
	}
	return *o.IsMfaEnabled
}

// GetIsMfaEnabledOk returns a tuple with the IsMfaEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserData) GetIsMfaEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMfaEnabled) {
		return nil, false
	}
	return o.IsMfaEnabled, true
}

// HasIsMfaEnabled returns a boolean if a field has been set.
func (o *UserData) HasIsMfaEnabled() bool {
	if o != nil && !IsNil(o.IsMfaEnabled) {
		return true
	}

	return false
}

// SetIsMfaEnabled gets a reference to the given bool and assigns it to the IsMfaEnabled field.
func (o *UserData) SetIsMfaEnabled(v bool) {
	o.IsMfaEnabled = &v
}

// GetIsMfaEnforced returns the IsMfaEnforced field value if set, zero value otherwise.
func (o *UserData) GetIsMfaEnforced() bool {
	if o == nil || IsNil(o.IsMfaEnforced) {
		var ret bool
		return ret
	}
	return *o.IsMfaEnforced
}

// GetIsMfaEnforcedOk returns a tuple with the IsMfaEnforced field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserData) GetIsMfaEnforcedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMfaEnforced) {
		return nil, false
	}
	return o.IsMfaEnforced, true
}

// HasIsMfaEnforced returns a boolean if a field has been set.
func (o *UserData) HasIsMfaEnforced() bool {
	if o != nil && !IsNil(o.IsMfaEnforced) {
		return true
	}

	return false
}

// SetIsMfaEnforced gets a reference to the given bool and assigns it to the IsMfaEnforced field.
func (o *UserData) SetIsMfaEnforced(v bool) {
	o.IsMfaEnforced = &v
}

// GetUserAttributes returns the UserAttributes field value if set, zero value otherwise.
// Deprecated
func (o *UserData) GetUserAttributes() UserAttributes {
	if o == nil || IsNil(o.UserAttributes) {
		var ret UserAttributes
		return ret
	}
	return *o.UserAttributes
}

// GetUserAttributesOk returns a tuple with the UserAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *UserData) GetUserAttributesOk() (*UserAttributes, bool) {
	if o == nil || IsNil(o.UserAttributes) {
		return nil, false
	}
	return o.UserAttributes, true
}

// HasUserAttributes returns a boolean if a field has been set.
func (o *UserData) HasUserAttributes() bool {
	if o != nil && !IsNil(o.UserAttributes) {
		return true
	}

	return false
}

// SetUserAttributes gets a reference to the given UserAttributes and assigns it to the UserAttributes field.
// Deprecated
func (o *UserData) SetUserAttributes(v UserAttributes) {
	o.UserAttributes = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
// Deprecated
func (o *UserData) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *UserData) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *UserData) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
// Deprecated
func (o *UserData) SetTitle(v string) {
	o.Title = &v
}

// GetLockStatus returns the LockStatus field value
// Deprecated
func (o *UserData) GetLockStatus() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LockStatus
}

// GetLockStatusOk returns a tuple with the LockStatus field value
// and a boolean to check if the value has been set.
// Deprecated
func (o *UserData) GetLockStatusOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LockStatus, true
}

// SetLockStatus sets field value
// Deprecated
func (o *UserData) SetLockStatus(v int32) {
	o.LockStatus = v
}

// GetLogin returns the Login field value if set, zero value otherwise.
// Deprecated
func (o *UserData) GetLogin() string {
	if o == nil || IsNil(o.Login) {
		var ret string
		return ret
	}
	return *o.Login
}

// GetLoginOk returns a tuple with the Login field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *UserData) GetLoginOk() (*string, bool) {
	if o == nil || IsNil(o.Login) {
		return nil, false
	}
	return o.Login, true
}

// HasLogin returns a boolean if a field has been set.
func (o *UserData) HasLogin() bool {
	if o != nil && !IsNil(o.Login) {
		return true
	}

	return false
}

// SetLogin gets a reference to the given string and assigns it to the Login field.
// Deprecated
func (o *UserData) SetLogin(v string) {
	o.Login = &v
}

// GetAuthMethods returns the AuthMethods field value if set, zero value otherwise.
// Deprecated
func (o *UserData) GetAuthMethods() []UserAuthMethod {
	if o == nil || IsNil(o.AuthMethods) {
		var ret []UserAuthMethod
		return ret
	}
	return o.AuthMethods
}

// GetAuthMethodsOk returns a tuple with the AuthMethods field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *UserData) GetAuthMethodsOk() ([]UserAuthMethod, bool) {
	if o == nil || IsNil(o.AuthMethods) {
		return nil, false
	}
	return o.AuthMethods, true
}

// HasAuthMethods returns a boolean if a field has been set.
func (o *UserData) HasAuthMethods() bool {
	if o != nil && !IsNil(o.AuthMethods) {
		return true
	}

	return false
}

// SetAuthMethods gets a reference to the given []UserAuthMethod and assigns it to the AuthMethods field.
// Deprecated
func (o *UserData) SetAuthMethods(v []UserAuthMethod) {
	o.AuthMethods = v
}

// GetGender returns the Gender field value if set, zero value otherwise.
// Deprecated
func (o *UserData) GetGender() string {
	if o == nil || IsNil(o.Gender) {
		var ret string
		return ret
	}
	return *o.Gender
}

// GetGenderOk returns a tuple with the Gender field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *UserData) GetGenderOk() (*string, bool) {
	if o == nil || IsNil(o.Gender) {
		return nil, false
	}
	return o.Gender, true
}

// HasGender returns a boolean if a field has been set.
func (o *UserData) HasGender() bool {
	if o != nil && !IsNil(o.Gender) {
		return true
	}

	return false
}

// SetGender gets a reference to the given string and assigns it to the Gender field.
// Deprecated
func (o *UserData) SetGender(v string) {
	o.Gender = &v
}

func (o UserData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["userName"] = o.UserName
	toSerialize["firstName"] = o.FirstName
	toSerialize["lastName"] = o.LastName
	toSerialize["isLocked"] = o.IsLocked
	toSerialize["avatarUuid"] = o.AvatarUuid
	toSerialize["authData"] = o.AuthData
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Phone) {
		toSerialize["phone"] = o.Phone
	}
	if !IsNil(o.ExpireAt) {
		toSerialize["expireAt"] = o.ExpireAt
	}
	if !IsNil(o.HasManageableRooms) {
		toSerialize["hasManageableRooms"] = o.HasManageableRooms
	}
	if !IsNil(o.IsEncryptionEnabled) {
		toSerialize["isEncryptionEnabled"] = o.IsEncryptionEnabled
	}
	if !IsNil(o.LastLoginSuccessAt) {
		toSerialize["lastLoginSuccessAt"] = o.LastLoginSuccessAt
	}
	if !IsNil(o.HomeRoomId) {
		toSerialize["homeRoomId"] = o.HomeRoomId
	}
	if !IsNil(o.PublicKeyContainer) {
		toSerialize["publicKeyContainer"] = o.PublicKeyContainer
	}
	if !IsNil(o.UserRoles) {
		toSerialize["userRoles"] = o.UserRoles
	}
	if !IsNil(o.IsMfaEnabled) {
		toSerialize["isMfaEnabled"] = o.IsMfaEnabled
	}
	if !IsNil(o.IsMfaEnforced) {
		toSerialize["isMfaEnforced"] = o.IsMfaEnforced
	}
	if !IsNil(o.UserAttributes) {
		toSerialize["userAttributes"] = o.UserAttributes
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	toSerialize["lockStatus"] = o.LockStatus
	if !IsNil(o.Login) {
		toSerialize["login"] = o.Login
	}
	if !IsNil(o.AuthMethods) {
		toSerialize["authMethods"] = o.AuthMethods
	}
	if !IsNil(o.Gender) {
		toSerialize["gender"] = o.Gender
	}
	return toSerialize, nil
}

func (o *UserData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"userName",
		"firstName",
		"lastName",
		"isLocked",
		"avatarUuid",
		"authData",
		"lockStatus",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserData := _UserData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserData)

	if err != nil {
		return err
	}

	*o = UserData(varUserData)

	return err
}

type NullableUserData struct {
	value *UserData
	isSet bool
}

func (v NullableUserData) Get() *UserData {
	return v.value
}

func (v *NullableUserData) Set(val *UserData) {
	v.value = val
	v.isSet = true
}

func (v NullableUserData) IsSet() bool {
	return v.isSet
}

func (v *NullableUserData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserData(val *UserData) *NullableUserData {
	return &NullableUserData{value: val, isSet: true}
}

func (v NullableUserData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
