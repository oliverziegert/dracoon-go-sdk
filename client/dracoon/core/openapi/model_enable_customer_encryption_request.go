/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the EnableCustomerEncryptionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnableCustomerEncryptionRequest{}

// EnableCustomerEncryptionRequest Request model for enabling customer encryption
type EnableCustomerEncryptionRequest struct {
	// Set `true` to enable encryption for this customer
	EnableCustomerEncryption bool                 `json:"enableCustomerEncryption"`
	DataSpaceRescueKey       UserKeyPairContainer `json:"dataSpaceRescueKey"`
}

type _EnableCustomerEncryptionRequest EnableCustomerEncryptionRequest

// NewEnableCustomerEncryptionRequest instantiates a new EnableCustomerEncryptionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnableCustomerEncryptionRequest(enableCustomerEncryption bool, dataSpaceRescueKey UserKeyPairContainer) *EnableCustomerEncryptionRequest {
	this := EnableCustomerEncryptionRequest{}
	this.EnableCustomerEncryption = enableCustomerEncryption
	this.DataSpaceRescueKey = dataSpaceRescueKey
	return &this
}

// NewEnableCustomerEncryptionRequestWithDefaults instantiates a new EnableCustomerEncryptionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnableCustomerEncryptionRequestWithDefaults() *EnableCustomerEncryptionRequest {
	this := EnableCustomerEncryptionRequest{}
	return &this
}

// GetEnableCustomerEncryption returns the EnableCustomerEncryption field value
func (o *EnableCustomerEncryptionRequest) GetEnableCustomerEncryption() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.EnableCustomerEncryption
}

// GetEnableCustomerEncryptionOk returns a tuple with the EnableCustomerEncryption field value
// and a boolean to check if the value has been set.
func (o *EnableCustomerEncryptionRequest) GetEnableCustomerEncryptionOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnableCustomerEncryption, true
}

// SetEnableCustomerEncryption sets field value
func (o *EnableCustomerEncryptionRequest) SetEnableCustomerEncryption(v bool) {
	o.EnableCustomerEncryption = v
}

// GetDataSpaceRescueKey returns the DataSpaceRescueKey field value
func (o *EnableCustomerEncryptionRequest) GetDataSpaceRescueKey() UserKeyPairContainer {
	if o == nil {
		var ret UserKeyPairContainer
		return ret
	}

	return o.DataSpaceRescueKey
}

// GetDataSpaceRescueKeyOk returns a tuple with the DataSpaceRescueKey field value
// and a boolean to check if the value has been set.
func (o *EnableCustomerEncryptionRequest) GetDataSpaceRescueKeyOk() (*UserKeyPairContainer, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataSpaceRescueKey, true
}

// SetDataSpaceRescueKey sets field value
func (o *EnableCustomerEncryptionRequest) SetDataSpaceRescueKey(v UserKeyPairContainer) {
	o.DataSpaceRescueKey = v
}

func (o EnableCustomerEncryptionRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnableCustomerEncryptionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enableCustomerEncryption"] = o.EnableCustomerEncryption
	toSerialize["dataSpaceRescueKey"] = o.DataSpaceRescueKey
	return toSerialize, nil
}

func (o *EnableCustomerEncryptionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enableCustomerEncryption",
		"dataSpaceRescueKey",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEnableCustomerEncryptionRequest := _EnableCustomerEncryptionRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEnableCustomerEncryptionRequest)

	if err != nil {
		return err
	}

	*o = EnableCustomerEncryptionRequest(varEnableCustomerEncryptionRequest)

	return err
}

type NullableEnableCustomerEncryptionRequest struct {
	value *EnableCustomerEncryptionRequest
	isSet bool
}

func (v NullableEnableCustomerEncryptionRequest) Get() *EnableCustomerEncryptionRequest {
	return v.value
}

func (v *NullableEnableCustomerEncryptionRequest) Set(val *EnableCustomerEncryptionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEnableCustomerEncryptionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEnableCustomerEncryptionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnableCustomerEncryptionRequest(val *EnableCustomerEncryptionRequest) *NullableEnableCustomerEncryptionRequest {
	return &NullableEnableCustomerEncryptionRequest{value: val, isSet: true}
}

func (v NullableEnableCustomerEncryptionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnableCustomerEncryptionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
