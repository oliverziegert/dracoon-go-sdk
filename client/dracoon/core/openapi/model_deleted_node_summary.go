/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the DeletedNodeSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeletedNodeSummary{}

// DeletedNodeSummary Deleted node information (Deleted node can be a folder or file)
type DeletedNodeSummary struct {
	// Parent node ID (room or folder)
	ParentId int64 `json:"parentId"`
	// &#128640; Since v4.37.0  Reference ID. Identical across all versions of a file
	ReferenceId *int64 `json:"referenceId,omitempty"`
	// Parent node path  `/` if node is a root node (room)
	ParentPath string `json:"parentPath"`
	// Node name
	Name string `json:"name"`
	// Node type
	Type string `json:"type"`
	// Number of deleted versions of this file
	CntVersions int32 `json:"cntVersions"`
	// First deleted version
	FirstDeletedAt time.Time `json:"firstDeletedAt"`
	// Last deleted version
	LastDeletedAt time.Time `json:"lastDeletedAt"`
	// Node ID of last deleted version
	LastDeletedNodeId int64 `json:"lastDeletedNodeId"`
	// &#128640; Since v4.22.0  Time the node was created on external file system
	TimestampCreation *time.Time `json:"timestampCreation,omitempty"`
	// &#128640; Since v4.22.0  Time the content of a node was last modified on external file system
	TimestampModification *time.Time `json:"timestampModification,omitempty"`
}

type _DeletedNodeSummary DeletedNodeSummary

// NewDeletedNodeSummary instantiates a new DeletedNodeSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeletedNodeSummary(parentId int64, parentPath string, name string, type_ string, cntVersions int32, firstDeletedAt time.Time, lastDeletedAt time.Time, lastDeletedNodeId int64) *DeletedNodeSummary {
	this := DeletedNodeSummary{}
	this.ParentId = parentId
	this.ParentPath = parentPath
	this.Name = name
	this.Type = type_
	this.CntVersions = cntVersions
	this.FirstDeletedAt = firstDeletedAt
	this.LastDeletedAt = lastDeletedAt
	this.LastDeletedNodeId = lastDeletedNodeId
	return &this
}

// NewDeletedNodeSummaryWithDefaults instantiates a new DeletedNodeSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeletedNodeSummaryWithDefaults() *DeletedNodeSummary {
	this := DeletedNodeSummary{}
	return &this
}

// GetParentId returns the ParentId field value
func (o *DeletedNodeSummary) GetParentId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value
// and a boolean to check if the value has been set.
func (o *DeletedNodeSummary) GetParentIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParentId, true
}

// SetParentId sets field value
func (o *DeletedNodeSummary) SetParentId(v int64) {
	o.ParentId = v
}

// GetReferenceId returns the ReferenceId field value if set, zero value otherwise.
func (o *DeletedNodeSummary) GetReferenceId() int64 {
	if o == nil || IsNil(o.ReferenceId) {
		var ret int64
		return ret
	}
	return *o.ReferenceId
}

// GetReferenceIdOk returns a tuple with the ReferenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletedNodeSummary) GetReferenceIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ReferenceId) {
		return nil, false
	}
	return o.ReferenceId, true
}

// HasReferenceId returns a boolean if a field has been set.
func (o *DeletedNodeSummary) HasReferenceId() bool {
	if o != nil && !IsNil(o.ReferenceId) {
		return true
	}

	return false
}

// SetReferenceId gets a reference to the given int64 and assigns it to the ReferenceId field.
func (o *DeletedNodeSummary) SetReferenceId(v int64) {
	o.ReferenceId = &v
}

// GetParentPath returns the ParentPath field value
func (o *DeletedNodeSummary) GetParentPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ParentPath
}

// GetParentPathOk returns a tuple with the ParentPath field value
// and a boolean to check if the value has been set.
func (o *DeletedNodeSummary) GetParentPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParentPath, true
}

// SetParentPath sets field value
func (o *DeletedNodeSummary) SetParentPath(v string) {
	o.ParentPath = v
}

// GetName returns the Name field value
func (o *DeletedNodeSummary) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DeletedNodeSummary) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DeletedNodeSummary) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *DeletedNodeSummary) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DeletedNodeSummary) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DeletedNodeSummary) SetType(v string) {
	o.Type = v
}

// GetCntVersions returns the CntVersions field value
func (o *DeletedNodeSummary) GetCntVersions() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CntVersions
}

// GetCntVersionsOk returns a tuple with the CntVersions field value
// and a boolean to check if the value has been set.
func (o *DeletedNodeSummary) GetCntVersionsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CntVersions, true
}

// SetCntVersions sets field value
func (o *DeletedNodeSummary) SetCntVersions(v int32) {
	o.CntVersions = v
}

// GetFirstDeletedAt returns the FirstDeletedAt field value
func (o *DeletedNodeSummary) GetFirstDeletedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.FirstDeletedAt
}

// GetFirstDeletedAtOk returns a tuple with the FirstDeletedAt field value
// and a boolean to check if the value has been set.
func (o *DeletedNodeSummary) GetFirstDeletedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstDeletedAt, true
}

// SetFirstDeletedAt sets field value
func (o *DeletedNodeSummary) SetFirstDeletedAt(v time.Time) {
	o.FirstDeletedAt = v
}

// GetLastDeletedAt returns the LastDeletedAt field value
func (o *DeletedNodeSummary) GetLastDeletedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastDeletedAt
}

// GetLastDeletedAtOk returns a tuple with the LastDeletedAt field value
// and a boolean to check if the value has been set.
func (o *DeletedNodeSummary) GetLastDeletedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastDeletedAt, true
}

// SetLastDeletedAt sets field value
func (o *DeletedNodeSummary) SetLastDeletedAt(v time.Time) {
	o.LastDeletedAt = v
}

// GetLastDeletedNodeId returns the LastDeletedNodeId field value
func (o *DeletedNodeSummary) GetLastDeletedNodeId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.LastDeletedNodeId
}

// GetLastDeletedNodeIdOk returns a tuple with the LastDeletedNodeId field value
// and a boolean to check if the value has been set.
func (o *DeletedNodeSummary) GetLastDeletedNodeIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastDeletedNodeId, true
}

// SetLastDeletedNodeId sets field value
func (o *DeletedNodeSummary) SetLastDeletedNodeId(v int64) {
	o.LastDeletedNodeId = v
}

// GetTimestampCreation returns the TimestampCreation field value if set, zero value otherwise.
func (o *DeletedNodeSummary) GetTimestampCreation() time.Time {
	if o == nil || IsNil(o.TimestampCreation) {
		var ret time.Time
		return ret
	}
	return *o.TimestampCreation
}

// GetTimestampCreationOk returns a tuple with the TimestampCreation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletedNodeSummary) GetTimestampCreationOk() (*time.Time, bool) {
	if o == nil || IsNil(o.TimestampCreation) {
		return nil, false
	}
	return o.TimestampCreation, true
}

// HasTimestampCreation returns a boolean if a field has been set.
func (o *DeletedNodeSummary) HasTimestampCreation() bool {
	if o != nil && !IsNil(o.TimestampCreation) {
		return true
	}

	return false
}

// SetTimestampCreation gets a reference to the given time.Time and assigns it to the TimestampCreation field.
func (o *DeletedNodeSummary) SetTimestampCreation(v time.Time) {
	o.TimestampCreation = &v
}

// GetTimestampModification returns the TimestampModification field value if set, zero value otherwise.
func (o *DeletedNodeSummary) GetTimestampModification() time.Time {
	if o == nil || IsNil(o.TimestampModification) {
		var ret time.Time
		return ret
	}
	return *o.TimestampModification
}

// GetTimestampModificationOk returns a tuple with the TimestampModification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletedNodeSummary) GetTimestampModificationOk() (*time.Time, bool) {
	if o == nil || IsNil(o.TimestampModification) {
		return nil, false
	}
	return o.TimestampModification, true
}

// HasTimestampModification returns a boolean if a field has been set.
func (o *DeletedNodeSummary) HasTimestampModification() bool {
	if o != nil && !IsNil(o.TimestampModification) {
		return true
	}

	return false
}

// SetTimestampModification gets a reference to the given time.Time and assigns it to the TimestampModification field.
func (o *DeletedNodeSummary) SetTimestampModification(v time.Time) {
	o.TimestampModification = &v
}

func (o DeletedNodeSummary) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeletedNodeSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["parentId"] = o.ParentId
	if !IsNil(o.ReferenceId) {
		toSerialize["referenceId"] = o.ReferenceId
	}
	toSerialize["parentPath"] = o.ParentPath
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	toSerialize["cntVersions"] = o.CntVersions
	toSerialize["firstDeletedAt"] = o.FirstDeletedAt
	toSerialize["lastDeletedAt"] = o.LastDeletedAt
	toSerialize["lastDeletedNodeId"] = o.LastDeletedNodeId
	if !IsNil(o.TimestampCreation) {
		toSerialize["timestampCreation"] = o.TimestampCreation
	}
	if !IsNil(o.TimestampModification) {
		toSerialize["timestampModification"] = o.TimestampModification
	}
	return toSerialize, nil
}

func (o *DeletedNodeSummary) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"parentId",
		"parentPath",
		"name",
		"type",
		"cntVersions",
		"firstDeletedAt",
		"lastDeletedAt",
		"lastDeletedNodeId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeletedNodeSummary := _DeletedNodeSummary{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeletedNodeSummary)

	if err != nil {
		return err
	}

	*o = DeletedNodeSummary(varDeletedNodeSummary)

	return err
}

type NullableDeletedNodeSummary struct {
	value *DeletedNodeSummary
	isSet bool
}

func (v NullableDeletedNodeSummary) Get() *DeletedNodeSummary {
	return v.value
}

func (v *NullableDeletedNodeSummary) Set(val *DeletedNodeSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableDeletedNodeSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableDeletedNodeSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeletedNodeSummary(val *DeletedNodeSummary) *NullableDeletedNodeSummary {
	return &NullableDeletedNodeSummary{value: val, isSet: true}
}

func (v NullableDeletedNodeSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeletedNodeSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
