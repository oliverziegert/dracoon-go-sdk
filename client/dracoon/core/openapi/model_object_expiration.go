/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the ObjectExpiration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectExpiration{}

// ObjectExpiration Expiration information
type ObjectExpiration struct {
	// enabled / disabled
	EnableExpiration bool `json:"enableExpiration"`
	// Expiration date
	ExpireAt *time.Time `json:"expireAt,omitempty"`
}

type _ObjectExpiration ObjectExpiration

// NewObjectExpiration instantiates a new ObjectExpiration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectExpiration(enableExpiration bool) *ObjectExpiration {
	this := ObjectExpiration{}
	this.EnableExpiration = enableExpiration
	return &this
}

// NewObjectExpirationWithDefaults instantiates a new ObjectExpiration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectExpirationWithDefaults() *ObjectExpiration {
	this := ObjectExpiration{}
	return &this
}

// GetEnableExpiration returns the EnableExpiration field value
func (o *ObjectExpiration) GetEnableExpiration() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.EnableExpiration
}

// GetEnableExpirationOk returns a tuple with the EnableExpiration field value
// and a boolean to check if the value has been set.
func (o *ObjectExpiration) GetEnableExpirationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnableExpiration, true
}

// SetEnableExpiration sets field value
func (o *ObjectExpiration) SetEnableExpiration(v bool) {
	o.EnableExpiration = v
}

// GetExpireAt returns the ExpireAt field value if set, zero value otherwise.
func (o *ObjectExpiration) GetExpireAt() time.Time {
	if o == nil || IsNil(o.ExpireAt) {
		var ret time.Time
		return ret
	}
	return *o.ExpireAt
}

// GetExpireAtOk returns a tuple with the ExpireAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectExpiration) GetExpireAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpireAt) {
		return nil, false
	}
	return o.ExpireAt, true
}

// HasExpireAt returns a boolean if a field has been set.
func (o *ObjectExpiration) HasExpireAt() bool {
	if o != nil && !IsNil(o.ExpireAt) {
		return true
	}

	return false
}

// SetExpireAt gets a reference to the given time.Time and assigns it to the ExpireAt field.
func (o *ObjectExpiration) SetExpireAt(v time.Time) {
	o.ExpireAt = &v
}

func (o ObjectExpiration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectExpiration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enableExpiration"] = o.EnableExpiration
	if !IsNil(o.ExpireAt) {
		toSerialize["expireAt"] = o.ExpireAt
	}
	return toSerialize, nil
}

func (o *ObjectExpiration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enableExpiration",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varObjectExpiration := _ObjectExpiration{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varObjectExpiration)

	if err != nil {
		return err
	}

	*o = ObjectExpiration(varObjectExpiration)

	return err
}

type NullableObjectExpiration struct {
	value *ObjectExpiration
	isSet bool
}

func (v NullableObjectExpiration) Get() *ObjectExpiration {
	return v.value
}

func (v *NullableObjectExpiration) Set(val *ObjectExpiration) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectExpiration) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectExpiration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectExpiration(val *ObjectExpiration) *NullableObjectExpiration {
	return &NullableObjectExpiration{value: val, isSet: true}
}

func (v NullableObjectExpiration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectExpiration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
