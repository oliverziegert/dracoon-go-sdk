/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the EncryptionInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EncryptionInfo{}

// EncryptionInfo Encryption states
type EncryptionInfo struct {
	// User key state
	UserKeyState string `json:"userKeyState"`
	// Room key state
	RoomKeyState string `json:"roomKeyState"`
	// DRACOON key state
	DataSpaceKeyState string `json:"dataSpaceKeyState"`
}

type _EncryptionInfo EncryptionInfo

// NewEncryptionInfo instantiates a new EncryptionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEncryptionInfo(userKeyState string, roomKeyState string, dataSpaceKeyState string) *EncryptionInfo {
	this := EncryptionInfo{}
	this.UserKeyState = userKeyState
	this.RoomKeyState = roomKeyState
	this.DataSpaceKeyState = dataSpaceKeyState
	return &this
}

// NewEncryptionInfoWithDefaults instantiates a new EncryptionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEncryptionInfoWithDefaults() *EncryptionInfo {
	this := EncryptionInfo{}
	return &this
}

// GetUserKeyState returns the UserKeyState field value
func (o *EncryptionInfo) GetUserKeyState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserKeyState
}

// GetUserKeyStateOk returns a tuple with the UserKeyState field value
// and a boolean to check if the value has been set.
func (o *EncryptionInfo) GetUserKeyStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserKeyState, true
}

// SetUserKeyState sets field value
func (o *EncryptionInfo) SetUserKeyState(v string) {
	o.UserKeyState = v
}

// GetRoomKeyState returns the RoomKeyState field value
func (o *EncryptionInfo) GetRoomKeyState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RoomKeyState
}

// GetRoomKeyStateOk returns a tuple with the RoomKeyState field value
// and a boolean to check if the value has been set.
func (o *EncryptionInfo) GetRoomKeyStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RoomKeyState, true
}

// SetRoomKeyState sets field value
func (o *EncryptionInfo) SetRoomKeyState(v string) {
	o.RoomKeyState = v
}

// GetDataSpaceKeyState returns the DataSpaceKeyState field value
func (o *EncryptionInfo) GetDataSpaceKeyState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DataSpaceKeyState
}

// GetDataSpaceKeyStateOk returns a tuple with the DataSpaceKeyState field value
// and a boolean to check if the value has been set.
func (o *EncryptionInfo) GetDataSpaceKeyStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataSpaceKeyState, true
}

// SetDataSpaceKeyState sets field value
func (o *EncryptionInfo) SetDataSpaceKeyState(v string) {
	o.DataSpaceKeyState = v
}

func (o EncryptionInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EncryptionInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["userKeyState"] = o.UserKeyState
	toSerialize["roomKeyState"] = o.RoomKeyState
	toSerialize["dataSpaceKeyState"] = o.DataSpaceKeyState
	return toSerialize, nil
}

func (o *EncryptionInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"userKeyState",
		"roomKeyState",
		"dataSpaceKeyState",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEncryptionInfo := _EncryptionInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEncryptionInfo)

	if err != nil {
		return err
	}

	*o = EncryptionInfo(varEncryptionInfo)

	return err
}

type NullableEncryptionInfo struct {
	value *EncryptionInfo
	isSet bool
}

func (v NullableEncryptionInfo) Get() *EncryptionInfo {
	return v.value
}

func (v *NullableEncryptionInfo) Set(val *EncryptionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableEncryptionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableEncryptionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEncryptionInfo(val *EncryptionInfo) *NullableEncryptionInfo {
	return &NullableEncryptionInfo{value: val, isSet: true}
}

func (v NullableEncryptionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEncryptionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
