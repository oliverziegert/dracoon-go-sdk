/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the DownloadShare type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DownloadShare{}

// DownloadShare Download Share information
type DownloadShare struct {
	// Share ID
	Id int64 `json:"id"`
	// Alias name
	Name string `json:"name"`
	// Source node ID
	NodeId int64 `json:"nodeId"`
	// Share access key to generate secure link
	AccessKey string `json:"accessKey"`
	// Downloads counter (incremented on each download)
	CntDownloads int32 `json:"cntDownloads"`
	// Creation date
	CreatedAt time.Time `json:"createdAt"`
	CreatedBy UserInfo  `json:"createdBy"`
	// Modification date
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	UpdatedBy *UserInfo  `json:"updatedBy,omitempty"`
	// User notes
	Notes *string `json:"notes,omitempty"`
	// &#128640; Since v4.11.0  Internal notes
	InternalNotes *string `json:"internalNotes,omitempty"`
	// Show creator first and last name.
	ShowCreatorName *bool `json:"showCreatorName,omitempty"`
	// Show creator email address.
	ShowCreatorUsername *bool `json:"showCreatorUsername,omitempty"`
	// Is share protected by password
	IsProtected *bool `json:"isProtected,omitempty"`
	// Expiration date
	ExpireAt *time.Time `json:"expireAt,omitempty"`
	// Max allowed downloads
	MaxDownloads *int32 `json:"maxDownloads,omitempty"`
	// Path to shared download node
	NodePath *string `json:"nodePath,omitempty"`
	// Path to shared download node
	DataUrl *string `json:"dataUrl,omitempty"`
	// Encrypted share  (this only applies to shared files, not folders)
	IsEncrypted *bool `json:"isEncrypted,omitempty"`
	// Node type
	NodeType *string `json:"nodeType,omitempty"`
	// &#128679; Deprecated since v4.11.0  Classification ID:  * `1` - public  * `2` - internal  * `3` - confidential  * `4` - strictly confidential    (default: classification from parent room)
	Classification *int32 `json:"classification,omitempty"`
	// &#128679; Deprecated since v4.20.0  Notify creator on every download.
	// Deprecated
	NotifyCreator bool `json:"notifyCreator"`
	// &#128679; Deprecated since v4.11.0  CSV string of recipient email addresses
	// Deprecated
	Recipients *string `json:"recipients,omitempty"`
	// &#128679; Deprecated since v4.11.0  CSV string of recipient MSISDNs
	// Deprecated
	SmsRecipients *string `json:"smsRecipients,omitempty"`
}

type _DownloadShare DownloadShare

// NewDownloadShare instantiates a new DownloadShare object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDownloadShare(id int64, name string, nodeId int64, accessKey string, cntDownloads int32, createdAt time.Time, createdBy UserInfo, notifyCreator bool) *DownloadShare {
	this := DownloadShare{}
	this.Id = id
	this.Name = name
	this.NodeId = nodeId
	this.AccessKey = accessKey
	this.CntDownloads = cntDownloads
	this.CreatedAt = createdAt
	this.CreatedBy = createdBy
	this.NotifyCreator = notifyCreator
	return &this
}

// NewDownloadShareWithDefaults instantiates a new DownloadShare object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDownloadShareWithDefaults() *DownloadShare {
	this := DownloadShare{}
	return &this
}

// GetId returns the Id field value
func (o *DownloadShare) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DownloadShare) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DownloadShare) SetId(v int64) {
	o.Id = v
}

// GetName returns the Name field value
func (o *DownloadShare) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DownloadShare) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DownloadShare) SetName(v string) {
	o.Name = v
}

// GetNodeId returns the NodeId field value
func (o *DownloadShare) GetNodeId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value
// and a boolean to check if the value has been set.
func (o *DownloadShare) GetNodeIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeId, true
}

// SetNodeId sets field value
func (o *DownloadShare) SetNodeId(v int64) {
	o.NodeId = v
}

// GetAccessKey returns the AccessKey field value
func (o *DownloadShare) GetAccessKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessKey
}

// GetAccessKeyOk returns a tuple with the AccessKey field value
// and a boolean to check if the value has been set.
func (o *DownloadShare) GetAccessKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessKey, true
}

// SetAccessKey sets field value
func (o *DownloadShare) SetAccessKey(v string) {
	o.AccessKey = v
}

// GetCntDownloads returns the CntDownloads field value
func (o *DownloadShare) GetCntDownloads() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CntDownloads
}

// GetCntDownloadsOk returns a tuple with the CntDownloads field value
// and a boolean to check if the value has been set.
func (o *DownloadShare) GetCntDownloadsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CntDownloads, true
}

// SetCntDownloads sets field value
func (o *DownloadShare) SetCntDownloads(v int32) {
	o.CntDownloads = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *DownloadShare) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *DownloadShare) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *DownloadShare) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetCreatedBy returns the CreatedBy field value
func (o *DownloadShare) GetCreatedBy() UserInfo {
	if o == nil {
		var ret UserInfo
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *DownloadShare) GetCreatedByOk() (*UserInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *DownloadShare) SetCreatedBy(v UserInfo) {
	o.CreatedBy = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *DownloadShare) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DownloadShare) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *DownloadShare) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *DownloadShare) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *DownloadShare) GetUpdatedBy() UserInfo {
	if o == nil || IsNil(o.UpdatedBy) {
		var ret UserInfo
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DownloadShare) GetUpdatedByOk() (*UserInfo, bool) {
	if o == nil || IsNil(o.UpdatedBy) {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *DownloadShare) HasUpdatedBy() bool {
	if o != nil && !IsNil(o.UpdatedBy) {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given UserInfo and assigns it to the UpdatedBy field.
func (o *DownloadShare) SetUpdatedBy(v UserInfo) {
	o.UpdatedBy = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *DownloadShare) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DownloadShare) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *DownloadShare) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *DownloadShare) SetNotes(v string) {
	o.Notes = &v
}

// GetInternalNotes returns the InternalNotes field value if set, zero value otherwise.
func (o *DownloadShare) GetInternalNotes() string {
	if o == nil || IsNil(o.InternalNotes) {
		var ret string
		return ret
	}
	return *o.InternalNotes
}

// GetInternalNotesOk returns a tuple with the InternalNotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DownloadShare) GetInternalNotesOk() (*string, bool) {
	if o == nil || IsNil(o.InternalNotes) {
		return nil, false
	}
	return o.InternalNotes, true
}

// HasInternalNotes returns a boolean if a field has been set.
func (o *DownloadShare) HasInternalNotes() bool {
	if o != nil && !IsNil(o.InternalNotes) {
		return true
	}

	return false
}

// SetInternalNotes gets a reference to the given string and assigns it to the InternalNotes field.
func (o *DownloadShare) SetInternalNotes(v string) {
	o.InternalNotes = &v
}

// GetShowCreatorName returns the ShowCreatorName field value if set, zero value otherwise.
func (o *DownloadShare) GetShowCreatorName() bool {
	if o == nil || IsNil(o.ShowCreatorName) {
		var ret bool
		return ret
	}
	return *o.ShowCreatorName
}

// GetShowCreatorNameOk returns a tuple with the ShowCreatorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DownloadShare) GetShowCreatorNameOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowCreatorName) {
		return nil, false
	}
	return o.ShowCreatorName, true
}

// HasShowCreatorName returns a boolean if a field has been set.
func (o *DownloadShare) HasShowCreatorName() bool {
	if o != nil && !IsNil(o.ShowCreatorName) {
		return true
	}

	return false
}

// SetShowCreatorName gets a reference to the given bool and assigns it to the ShowCreatorName field.
func (o *DownloadShare) SetShowCreatorName(v bool) {
	o.ShowCreatorName = &v
}

// GetShowCreatorUsername returns the ShowCreatorUsername field value if set, zero value otherwise.
func (o *DownloadShare) GetShowCreatorUsername() bool {
	if o == nil || IsNil(o.ShowCreatorUsername) {
		var ret bool
		return ret
	}
	return *o.ShowCreatorUsername
}

// GetShowCreatorUsernameOk returns a tuple with the ShowCreatorUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DownloadShare) GetShowCreatorUsernameOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowCreatorUsername) {
		return nil, false
	}
	return o.ShowCreatorUsername, true
}

// HasShowCreatorUsername returns a boolean if a field has been set.
func (o *DownloadShare) HasShowCreatorUsername() bool {
	if o != nil && !IsNil(o.ShowCreatorUsername) {
		return true
	}

	return false
}

// SetShowCreatorUsername gets a reference to the given bool and assigns it to the ShowCreatorUsername field.
func (o *DownloadShare) SetShowCreatorUsername(v bool) {
	o.ShowCreatorUsername = &v
}

// GetIsProtected returns the IsProtected field value if set, zero value otherwise.
func (o *DownloadShare) GetIsProtected() bool {
	if o == nil || IsNil(o.IsProtected) {
		var ret bool
		return ret
	}
	return *o.IsProtected
}

// GetIsProtectedOk returns a tuple with the IsProtected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DownloadShare) GetIsProtectedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsProtected) {
		return nil, false
	}
	return o.IsProtected, true
}

// HasIsProtected returns a boolean if a field has been set.
func (o *DownloadShare) HasIsProtected() bool {
	if o != nil && !IsNil(o.IsProtected) {
		return true
	}

	return false
}

// SetIsProtected gets a reference to the given bool and assigns it to the IsProtected field.
func (o *DownloadShare) SetIsProtected(v bool) {
	o.IsProtected = &v
}

// GetExpireAt returns the ExpireAt field value if set, zero value otherwise.
func (o *DownloadShare) GetExpireAt() time.Time {
	if o == nil || IsNil(o.ExpireAt) {
		var ret time.Time
		return ret
	}
	return *o.ExpireAt
}

// GetExpireAtOk returns a tuple with the ExpireAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DownloadShare) GetExpireAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpireAt) {
		return nil, false
	}
	return o.ExpireAt, true
}

// HasExpireAt returns a boolean if a field has been set.
func (o *DownloadShare) HasExpireAt() bool {
	if o != nil && !IsNil(o.ExpireAt) {
		return true
	}

	return false
}

// SetExpireAt gets a reference to the given time.Time and assigns it to the ExpireAt field.
func (o *DownloadShare) SetExpireAt(v time.Time) {
	o.ExpireAt = &v
}

// GetMaxDownloads returns the MaxDownloads field value if set, zero value otherwise.
func (o *DownloadShare) GetMaxDownloads() int32 {
	if o == nil || IsNil(o.MaxDownloads) {
		var ret int32
		return ret
	}
	return *o.MaxDownloads
}

// GetMaxDownloadsOk returns a tuple with the MaxDownloads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DownloadShare) GetMaxDownloadsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxDownloads) {
		return nil, false
	}
	return o.MaxDownloads, true
}

// HasMaxDownloads returns a boolean if a field has been set.
func (o *DownloadShare) HasMaxDownloads() bool {
	if o != nil && !IsNil(o.MaxDownloads) {
		return true
	}

	return false
}

// SetMaxDownloads gets a reference to the given int32 and assigns it to the MaxDownloads field.
func (o *DownloadShare) SetMaxDownloads(v int32) {
	o.MaxDownloads = &v
}

// GetNodePath returns the NodePath field value if set, zero value otherwise.
func (o *DownloadShare) GetNodePath() string {
	if o == nil || IsNil(o.NodePath) {
		var ret string
		return ret
	}
	return *o.NodePath
}

// GetNodePathOk returns a tuple with the NodePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DownloadShare) GetNodePathOk() (*string, bool) {
	if o == nil || IsNil(o.NodePath) {
		return nil, false
	}
	return o.NodePath, true
}

// HasNodePath returns a boolean if a field has been set.
func (o *DownloadShare) HasNodePath() bool {
	if o != nil && !IsNil(o.NodePath) {
		return true
	}

	return false
}

// SetNodePath gets a reference to the given string and assigns it to the NodePath field.
func (o *DownloadShare) SetNodePath(v string) {
	o.NodePath = &v
}

// GetDataUrl returns the DataUrl field value if set, zero value otherwise.
func (o *DownloadShare) GetDataUrl() string {
	if o == nil || IsNil(o.DataUrl) {
		var ret string
		return ret
	}
	return *o.DataUrl
}

// GetDataUrlOk returns a tuple with the DataUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DownloadShare) GetDataUrlOk() (*string, bool) {
	if o == nil || IsNil(o.DataUrl) {
		return nil, false
	}
	return o.DataUrl, true
}

// HasDataUrl returns a boolean if a field has been set.
func (o *DownloadShare) HasDataUrl() bool {
	if o != nil && !IsNil(o.DataUrl) {
		return true
	}

	return false
}

// SetDataUrl gets a reference to the given string and assigns it to the DataUrl field.
func (o *DownloadShare) SetDataUrl(v string) {
	o.DataUrl = &v
}

// GetIsEncrypted returns the IsEncrypted field value if set, zero value otherwise.
func (o *DownloadShare) GetIsEncrypted() bool {
	if o == nil || IsNil(o.IsEncrypted) {
		var ret bool
		return ret
	}
	return *o.IsEncrypted
}

// GetIsEncryptedOk returns a tuple with the IsEncrypted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DownloadShare) GetIsEncryptedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEncrypted) {
		return nil, false
	}
	return o.IsEncrypted, true
}

// HasIsEncrypted returns a boolean if a field has been set.
func (o *DownloadShare) HasIsEncrypted() bool {
	if o != nil && !IsNil(o.IsEncrypted) {
		return true
	}

	return false
}

// SetIsEncrypted gets a reference to the given bool and assigns it to the IsEncrypted field.
func (o *DownloadShare) SetIsEncrypted(v bool) {
	o.IsEncrypted = &v
}

// GetNodeType returns the NodeType field value if set, zero value otherwise.
func (o *DownloadShare) GetNodeType() string {
	if o == nil || IsNil(o.NodeType) {
		var ret string
		return ret
	}
	return *o.NodeType
}

// GetNodeTypeOk returns a tuple with the NodeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DownloadShare) GetNodeTypeOk() (*string, bool) {
	if o == nil || IsNil(o.NodeType) {
		return nil, false
	}
	return o.NodeType, true
}

// HasNodeType returns a boolean if a field has been set.
func (o *DownloadShare) HasNodeType() bool {
	if o != nil && !IsNil(o.NodeType) {
		return true
	}

	return false
}

// SetNodeType gets a reference to the given string and assigns it to the NodeType field.
func (o *DownloadShare) SetNodeType(v string) {
	o.NodeType = &v
}

// GetClassification returns the Classification field value if set, zero value otherwise.
func (o *DownloadShare) GetClassification() int32 {
	if o == nil || IsNil(o.Classification) {
		var ret int32
		return ret
	}
	return *o.Classification
}

// GetClassificationOk returns a tuple with the Classification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DownloadShare) GetClassificationOk() (*int32, bool) {
	if o == nil || IsNil(o.Classification) {
		return nil, false
	}
	return o.Classification, true
}

// HasClassification returns a boolean if a field has been set.
func (o *DownloadShare) HasClassification() bool {
	if o != nil && !IsNil(o.Classification) {
		return true
	}

	return false
}

// SetClassification gets a reference to the given int32 and assigns it to the Classification field.
func (o *DownloadShare) SetClassification(v int32) {
	o.Classification = &v
}

// GetNotifyCreator returns the NotifyCreator field value
// Deprecated
func (o *DownloadShare) GetNotifyCreator() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.NotifyCreator
}

// GetNotifyCreatorOk returns a tuple with the NotifyCreator field value
// and a boolean to check if the value has been set.
// Deprecated
func (o *DownloadShare) GetNotifyCreatorOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotifyCreator, true
}

// SetNotifyCreator sets field value
// Deprecated
func (o *DownloadShare) SetNotifyCreator(v bool) {
	o.NotifyCreator = v
}

// GetRecipients returns the Recipients field value if set, zero value otherwise.
// Deprecated
func (o *DownloadShare) GetRecipients() string {
	if o == nil || IsNil(o.Recipients) {
		var ret string
		return ret
	}
	return *o.Recipients
}

// GetRecipientsOk returns a tuple with the Recipients field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *DownloadShare) GetRecipientsOk() (*string, bool) {
	if o == nil || IsNil(o.Recipients) {
		return nil, false
	}
	return o.Recipients, true
}

// HasRecipients returns a boolean if a field has been set.
func (o *DownloadShare) HasRecipients() bool {
	if o != nil && !IsNil(o.Recipients) {
		return true
	}

	return false
}

// SetRecipients gets a reference to the given string and assigns it to the Recipients field.
// Deprecated
func (o *DownloadShare) SetRecipients(v string) {
	o.Recipients = &v
}

// GetSmsRecipients returns the SmsRecipients field value if set, zero value otherwise.
// Deprecated
func (o *DownloadShare) GetSmsRecipients() string {
	if o == nil || IsNil(o.SmsRecipients) {
		var ret string
		return ret
	}
	return *o.SmsRecipients
}

// GetSmsRecipientsOk returns a tuple with the SmsRecipients field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *DownloadShare) GetSmsRecipientsOk() (*string, bool) {
	if o == nil || IsNil(o.SmsRecipients) {
		return nil, false
	}
	return o.SmsRecipients, true
}

// HasSmsRecipients returns a boolean if a field has been set.
func (o *DownloadShare) HasSmsRecipients() bool {
	if o != nil && !IsNil(o.SmsRecipients) {
		return true
	}

	return false
}

// SetSmsRecipients gets a reference to the given string and assigns it to the SmsRecipients field.
// Deprecated
func (o *DownloadShare) SetSmsRecipients(v string) {
	o.SmsRecipients = &v
}

func (o DownloadShare) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DownloadShare) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["nodeId"] = o.NodeId
	toSerialize["accessKey"] = o.AccessKey
	toSerialize["cntDownloads"] = o.CntDownloads
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["createdBy"] = o.CreatedBy
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !IsNil(o.UpdatedBy) {
		toSerialize["updatedBy"] = o.UpdatedBy
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.InternalNotes) {
		toSerialize["internalNotes"] = o.InternalNotes
	}
	if !IsNil(o.ShowCreatorName) {
		toSerialize["showCreatorName"] = o.ShowCreatorName
	}
	if !IsNil(o.ShowCreatorUsername) {
		toSerialize["showCreatorUsername"] = o.ShowCreatorUsername
	}
	if !IsNil(o.IsProtected) {
		toSerialize["isProtected"] = o.IsProtected
	}
	if !IsNil(o.ExpireAt) {
		toSerialize["expireAt"] = o.ExpireAt
	}
	if !IsNil(o.MaxDownloads) {
		toSerialize["maxDownloads"] = o.MaxDownloads
	}
	if !IsNil(o.NodePath) {
		toSerialize["nodePath"] = o.NodePath
	}
	if !IsNil(o.DataUrl) {
		toSerialize["dataUrl"] = o.DataUrl
	}
	if !IsNil(o.IsEncrypted) {
		toSerialize["isEncrypted"] = o.IsEncrypted
	}
	if !IsNil(o.NodeType) {
		toSerialize["nodeType"] = o.NodeType
	}
	if !IsNil(o.Classification) {
		toSerialize["classification"] = o.Classification
	}
	toSerialize["notifyCreator"] = o.NotifyCreator
	if !IsNil(o.Recipients) {
		toSerialize["recipients"] = o.Recipients
	}
	if !IsNil(o.SmsRecipients) {
		toSerialize["smsRecipients"] = o.SmsRecipients
	}
	return toSerialize, nil
}

func (o *DownloadShare) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"nodeId",
		"accessKey",
		"cntDownloads",
		"createdAt",
		"createdBy",
		"notifyCreator",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDownloadShare := _DownloadShare{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDownloadShare)

	if err != nil {
		return err
	}

	*o = DownloadShare(varDownloadShare)

	return err
}

type NullableDownloadShare struct {
	value *DownloadShare
	isSet bool
}

func (v NullableDownloadShare) Get() *DownloadShare {
	return v.value
}

func (v *NullableDownloadShare) Set(val *DownloadShare) {
	v.value = val
	v.isSet = true
}

func (v NullableDownloadShare) IsSet() bool {
	return v.isSet
}

func (v *NullableDownloadShare) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDownloadShare(val *DownloadShare) *NullableDownloadShare {
	return &NullableDownloadShare{value: val, isSet: true}
}

func (v NullableDownloadShare) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDownloadShare) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
