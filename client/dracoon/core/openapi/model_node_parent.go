/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the NodeParent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeParent{}

// NodeParent Parent node
type NodeParent struct {
	// Node ID
	Id int64 `json:"id"`
	// Node name
	Name string `json:"name"`
	// Node type
	Type string `json:"type"`
	// Parent node ID (room or folder)
	ParentId *int64 `json:"parentId,omitempty"`
}

type _NodeParent NodeParent

// NewNodeParent instantiates a new NodeParent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeParent(id int64, name string, type_ string) *NodeParent {
	this := NodeParent{}
	this.Id = id
	this.Name = name
	this.Type = type_
	return &this
}

// NewNodeParentWithDefaults instantiates a new NodeParent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeParentWithDefaults() *NodeParent {
	this := NodeParent{}
	return &this
}

// GetId returns the Id field value
func (o *NodeParent) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *NodeParent) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *NodeParent) SetId(v int64) {
	o.Id = v
}

// GetName returns the Name field value
func (o *NodeParent) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *NodeParent) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *NodeParent) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *NodeParent) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *NodeParent) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *NodeParent) SetType(v string) {
	o.Type = v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *NodeParent) GetParentId() int64 {
	if o == nil || IsNil(o.ParentId) {
		var ret int64
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeParent) GetParentIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ParentId) {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *NodeParent) HasParentId() bool {
	if o != nil && !IsNil(o.ParentId) {
		return true
	}

	return false
}

// SetParentId gets a reference to the given int64 and assigns it to the ParentId field.
func (o *NodeParent) SetParentId(v int64) {
	o.ParentId = &v
}

func (o NodeParent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeParent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	if !IsNil(o.ParentId) {
		toSerialize["parentId"] = o.ParentId
	}
	return toSerialize, nil
}

func (o *NodeParent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNodeParent := _NodeParent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNodeParent)

	if err != nil {
		return err
	}

	*o = NodeParent(varNodeParent)

	return err
}

type NullableNodeParent struct {
	value *NodeParent
	isSet bool
}

func (v NullableNodeParent) Get() *NodeParent {
	return v.value
}

func (v *NullableNodeParent) Set(val *NodeParent) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeParent) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeParent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeParent(val *NodeParent) *NullableNodeParent {
	return &NullableNodeParent{value: val, isSet: true}
}

func (v NullableNodeParent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeParent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
