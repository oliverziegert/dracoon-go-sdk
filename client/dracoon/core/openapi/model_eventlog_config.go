/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EventlogConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventlogConfig{}

// EventlogConfig Eventlog settings
type EventlogConfig struct {
	// Is eventlog enabled?
	Enabled *bool `json:"enabled,omitempty"`
	// Retention period (in days) of event log entries.  After that period, all entries are deleted.  Recommended value: 7
	RetentionPeriod *int32 `json:"retentionPeriod,omitempty"`
	// Determines whether userâ€™s IP address is logged.
	LogIpEnabled *bool `json:"logIpEnabled,omitempty"`
}

// NewEventlogConfig instantiates a new EventlogConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventlogConfig() *EventlogConfig {
	this := EventlogConfig{}
	return &this
}

// NewEventlogConfigWithDefaults instantiates a new EventlogConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventlogConfigWithDefaults() *EventlogConfig {
	this := EventlogConfig{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *EventlogConfig) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventlogConfig) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *EventlogConfig) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *EventlogConfig) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetRetentionPeriod returns the RetentionPeriod field value if set, zero value otherwise.
func (o *EventlogConfig) GetRetentionPeriod() int32 {
	if o == nil || IsNil(o.RetentionPeriod) {
		var ret int32
		return ret
	}
	return *o.RetentionPeriod
}

// GetRetentionPeriodOk returns a tuple with the RetentionPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventlogConfig) GetRetentionPeriodOk() (*int32, bool) {
	if o == nil || IsNil(o.RetentionPeriod) {
		return nil, false
	}
	return o.RetentionPeriod, true
}

// HasRetentionPeriod returns a boolean if a field has been set.
func (o *EventlogConfig) HasRetentionPeriod() bool {
	if o != nil && !IsNil(o.RetentionPeriod) {
		return true
	}

	return false
}

// SetRetentionPeriod gets a reference to the given int32 and assigns it to the RetentionPeriod field.
func (o *EventlogConfig) SetRetentionPeriod(v int32) {
	o.RetentionPeriod = &v
}

// GetLogIpEnabled returns the LogIpEnabled field value if set, zero value otherwise.
func (o *EventlogConfig) GetLogIpEnabled() bool {
	if o == nil || IsNil(o.LogIpEnabled) {
		var ret bool
		return ret
	}
	return *o.LogIpEnabled
}

// GetLogIpEnabledOk returns a tuple with the LogIpEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventlogConfig) GetLogIpEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.LogIpEnabled) {
		return nil, false
	}
	return o.LogIpEnabled, true
}

// HasLogIpEnabled returns a boolean if a field has been set.
func (o *EventlogConfig) HasLogIpEnabled() bool {
	if o != nil && !IsNil(o.LogIpEnabled) {
		return true
	}

	return false
}

// SetLogIpEnabled gets a reference to the given bool and assigns it to the LogIpEnabled field.
func (o *EventlogConfig) SetLogIpEnabled(v bool) {
	o.LogIpEnabled = &v
}

func (o EventlogConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventlogConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.RetentionPeriod) {
		toSerialize["retentionPeriod"] = o.RetentionPeriod
	}
	if !IsNil(o.LogIpEnabled) {
		toSerialize["logIpEnabled"] = o.LogIpEnabled
	}
	return toSerialize, nil
}

type NullableEventlogConfig struct {
	value *EventlogConfig
	isSet bool
}

func (v NullableEventlogConfig) Get() *EventlogConfig {
	return v.value
}

func (v *NullableEventlogConfig) Set(val *EventlogConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableEventlogConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableEventlogConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventlogConfig(val *EventlogConfig) *NullableEventlogConfig {
	return &NullableEventlogConfig{value: val, isSet: true}
}

func (v NullableEventlogConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventlogConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
