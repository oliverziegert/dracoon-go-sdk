/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the RoomData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomData{}

// RoomData Room information
type RoomData struct {
	// Node type
	Type *string `json:"type,omitempty"`
	// Room ID
	Id int64 `json:"id"`
	// Is user granted room permissions
	IsGranted bool `json:"isGranted"`
	// Name
	Name string `json:"name"`
	// Encryption state
	IsEncrypted bool `json:"isEncrypted"`
	// Retention period for deleted nodes in days
	RecycleBinRetentionPeriod int32 `json:"recycleBinRetentionPeriod"`
	// Parent node ID (room or folder)
	ParentId *int64 `json:"parentId,omitempty"`
	// Room size
	Size        *int64           `json:"size,omitempty"`
	Permissions *NodePermissions `json:"permissions,omitempty"`
	// Expiration date
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	CreatedBy *UserInfo  `json:"createdBy,omitempty"`
	// Modification date
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	UpdatedBy *UserInfo  `json:"updatedBy,omitempty"`
	// Quota in byte
	Quota *int64 `json:"quota,omitempty"`
	// Returns the number of Download Shares of this node.
	CntDownloadShares *int32 `json:"cntDownloadShares,omitempty"`
	// Returns the number of Upload Shares of this node.
	CntUploadShares *int32 `json:"cntUploadShares,omitempty"`
	// Node is marked as favorite (for rooms / folders only)
	IsFavorite *bool `json:"isFavorite,omitempty"`
	// &#128679; Deprecated since v4.10.0  Is recycle bin active (for rooms only)  Recycle bin is always on (disabling is not possible).
	// Deprecated
	HasRecycleBin bool `json:"hasRecycleBin"`
	// &#128679; Deprecated since v4.10.0  List of rooms, where this room is a parent (if exist)
	// Deprecated
	Children []RoomData `json:"children,omitempty"`
}

type _RoomData RoomData

// NewRoomData instantiates a new RoomData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomData(id int64, isGranted bool, name string, isEncrypted bool, recycleBinRetentionPeriod int32, hasRecycleBin bool) *RoomData {
	this := RoomData{}
	this.Id = id
	this.IsGranted = isGranted
	this.Name = name
	this.IsEncrypted = isEncrypted
	this.RecycleBinRetentionPeriod = recycleBinRetentionPeriod
	this.HasRecycleBin = hasRecycleBin
	return &this
}

// NewRoomDataWithDefaults instantiates a new RoomData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomDataWithDefaults() *RoomData {
	this := RoomData{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RoomData) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomData) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RoomData) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RoomData) SetType(v string) {
	o.Type = &v
}

// GetId returns the Id field value
func (o *RoomData) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RoomData) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RoomData) SetId(v int64) {
	o.Id = v
}

// GetIsGranted returns the IsGranted field value
func (o *RoomData) GetIsGranted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsGranted
}

// GetIsGrantedOk returns a tuple with the IsGranted field value
// and a boolean to check if the value has been set.
func (o *RoomData) GetIsGrantedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsGranted, true
}

// SetIsGranted sets field value
func (o *RoomData) SetIsGranted(v bool) {
	o.IsGranted = v
}

// GetName returns the Name field value
func (o *RoomData) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RoomData) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RoomData) SetName(v string) {
	o.Name = v
}

// GetIsEncrypted returns the IsEncrypted field value
func (o *RoomData) GetIsEncrypted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsEncrypted
}

// GetIsEncryptedOk returns a tuple with the IsEncrypted field value
// and a boolean to check if the value has been set.
func (o *RoomData) GetIsEncryptedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsEncrypted, true
}

// SetIsEncrypted sets field value
func (o *RoomData) SetIsEncrypted(v bool) {
	o.IsEncrypted = v
}

// GetRecycleBinRetentionPeriod returns the RecycleBinRetentionPeriod field value
func (o *RoomData) GetRecycleBinRetentionPeriod() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RecycleBinRetentionPeriod
}

// GetRecycleBinRetentionPeriodOk returns a tuple with the RecycleBinRetentionPeriod field value
// and a boolean to check if the value has been set.
func (o *RoomData) GetRecycleBinRetentionPeriodOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecycleBinRetentionPeriod, true
}

// SetRecycleBinRetentionPeriod sets field value
func (o *RoomData) SetRecycleBinRetentionPeriod(v int32) {
	o.RecycleBinRetentionPeriod = v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *RoomData) GetParentId() int64 {
	if o == nil || IsNil(o.ParentId) {
		var ret int64
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomData) GetParentIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ParentId) {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *RoomData) HasParentId() bool {
	if o != nil && !IsNil(o.ParentId) {
		return true
	}

	return false
}

// SetParentId gets a reference to the given int64 and assigns it to the ParentId field.
func (o *RoomData) SetParentId(v int64) {
	o.ParentId = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *RoomData) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomData) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *RoomData) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *RoomData) SetSize(v int64) {
	o.Size = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *RoomData) GetPermissions() NodePermissions {
	if o == nil || IsNil(o.Permissions) {
		var ret NodePermissions
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomData) GetPermissionsOk() (*NodePermissions, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *RoomData) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given NodePermissions and assigns it to the Permissions field.
func (o *RoomData) SetPermissions(v NodePermissions) {
	o.Permissions = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *RoomData) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomData) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *RoomData) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *RoomData) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *RoomData) GetCreatedBy() UserInfo {
	if o == nil || IsNil(o.CreatedBy) {
		var ret UserInfo
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomData) GetCreatedByOk() (*UserInfo, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *RoomData) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given UserInfo and assigns it to the CreatedBy field.
func (o *RoomData) SetCreatedBy(v UserInfo) {
	o.CreatedBy = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *RoomData) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomData) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *RoomData) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *RoomData) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *RoomData) GetUpdatedBy() UserInfo {
	if o == nil || IsNil(o.UpdatedBy) {
		var ret UserInfo
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomData) GetUpdatedByOk() (*UserInfo, bool) {
	if o == nil || IsNil(o.UpdatedBy) {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *RoomData) HasUpdatedBy() bool {
	if o != nil && !IsNil(o.UpdatedBy) {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given UserInfo and assigns it to the UpdatedBy field.
func (o *RoomData) SetUpdatedBy(v UserInfo) {
	o.UpdatedBy = &v
}

// GetQuota returns the Quota field value if set, zero value otherwise.
func (o *RoomData) GetQuota() int64 {
	if o == nil || IsNil(o.Quota) {
		var ret int64
		return ret
	}
	return *o.Quota
}

// GetQuotaOk returns a tuple with the Quota field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomData) GetQuotaOk() (*int64, bool) {
	if o == nil || IsNil(o.Quota) {
		return nil, false
	}
	return o.Quota, true
}

// HasQuota returns a boolean if a field has been set.
func (o *RoomData) HasQuota() bool {
	if o != nil && !IsNil(o.Quota) {
		return true
	}

	return false
}

// SetQuota gets a reference to the given int64 and assigns it to the Quota field.
func (o *RoomData) SetQuota(v int64) {
	o.Quota = &v
}

// GetCntDownloadShares returns the CntDownloadShares field value if set, zero value otherwise.
func (o *RoomData) GetCntDownloadShares() int32 {
	if o == nil || IsNil(o.CntDownloadShares) {
		var ret int32
		return ret
	}
	return *o.CntDownloadShares
}

// GetCntDownloadSharesOk returns a tuple with the CntDownloadShares field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomData) GetCntDownloadSharesOk() (*int32, bool) {
	if o == nil || IsNil(o.CntDownloadShares) {
		return nil, false
	}
	return o.CntDownloadShares, true
}

// HasCntDownloadShares returns a boolean if a field has been set.
func (o *RoomData) HasCntDownloadShares() bool {
	if o != nil && !IsNil(o.CntDownloadShares) {
		return true
	}

	return false
}

// SetCntDownloadShares gets a reference to the given int32 and assigns it to the CntDownloadShares field.
func (o *RoomData) SetCntDownloadShares(v int32) {
	o.CntDownloadShares = &v
}

// GetCntUploadShares returns the CntUploadShares field value if set, zero value otherwise.
func (o *RoomData) GetCntUploadShares() int32 {
	if o == nil || IsNil(o.CntUploadShares) {
		var ret int32
		return ret
	}
	return *o.CntUploadShares
}

// GetCntUploadSharesOk returns a tuple with the CntUploadShares field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomData) GetCntUploadSharesOk() (*int32, bool) {
	if o == nil || IsNil(o.CntUploadShares) {
		return nil, false
	}
	return o.CntUploadShares, true
}

// HasCntUploadShares returns a boolean if a field has been set.
func (o *RoomData) HasCntUploadShares() bool {
	if o != nil && !IsNil(o.CntUploadShares) {
		return true
	}

	return false
}

// SetCntUploadShares gets a reference to the given int32 and assigns it to the CntUploadShares field.
func (o *RoomData) SetCntUploadShares(v int32) {
	o.CntUploadShares = &v
}

// GetIsFavorite returns the IsFavorite field value if set, zero value otherwise.
func (o *RoomData) GetIsFavorite() bool {
	if o == nil || IsNil(o.IsFavorite) {
		var ret bool
		return ret
	}
	return *o.IsFavorite
}

// GetIsFavoriteOk returns a tuple with the IsFavorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomData) GetIsFavoriteOk() (*bool, bool) {
	if o == nil || IsNil(o.IsFavorite) {
		return nil, false
	}
	return o.IsFavorite, true
}

// HasIsFavorite returns a boolean if a field has been set.
func (o *RoomData) HasIsFavorite() bool {
	if o != nil && !IsNil(o.IsFavorite) {
		return true
	}

	return false
}

// SetIsFavorite gets a reference to the given bool and assigns it to the IsFavorite field.
func (o *RoomData) SetIsFavorite(v bool) {
	o.IsFavorite = &v
}

// GetHasRecycleBin returns the HasRecycleBin field value
// Deprecated
func (o *RoomData) GetHasRecycleBin() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasRecycleBin
}

// GetHasRecycleBinOk returns a tuple with the HasRecycleBin field value
// and a boolean to check if the value has been set.
// Deprecated
func (o *RoomData) GetHasRecycleBinOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasRecycleBin, true
}

// SetHasRecycleBin sets field value
// Deprecated
func (o *RoomData) SetHasRecycleBin(v bool) {
	o.HasRecycleBin = v
}

// GetChildren returns the Children field value if set, zero value otherwise.
// Deprecated
func (o *RoomData) GetChildren() []RoomData {
	if o == nil || IsNil(o.Children) {
		var ret []RoomData
		return ret
	}
	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RoomData) GetChildrenOk() ([]RoomData, bool) {
	if o == nil || IsNil(o.Children) {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *RoomData) HasChildren() bool {
	if o != nil && !IsNil(o.Children) {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []RoomData and assigns it to the Children field.
// Deprecated
func (o *RoomData) SetChildren(v []RoomData) {
	o.Children = v
}

func (o RoomData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["id"] = o.Id
	toSerialize["isGranted"] = o.IsGranted
	toSerialize["name"] = o.Name
	toSerialize["isEncrypted"] = o.IsEncrypted
	toSerialize["recycleBinRetentionPeriod"] = o.RecycleBinRetentionPeriod
	if !IsNil(o.ParentId) {
		toSerialize["parentId"] = o.ParentId
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !IsNil(o.UpdatedBy) {
		toSerialize["updatedBy"] = o.UpdatedBy
	}
	if !IsNil(o.Quota) {
		toSerialize["quota"] = o.Quota
	}
	if !IsNil(o.CntDownloadShares) {
		toSerialize["cntDownloadShares"] = o.CntDownloadShares
	}
	if !IsNil(o.CntUploadShares) {
		toSerialize["cntUploadShares"] = o.CntUploadShares
	}
	if !IsNil(o.IsFavorite) {
		toSerialize["isFavorite"] = o.IsFavorite
	}
	toSerialize["hasRecycleBin"] = o.HasRecycleBin
	if !IsNil(o.Children) {
		toSerialize["children"] = o.Children
	}
	return toSerialize, nil
}

func (o *RoomData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"isGranted",
		"name",
		"isEncrypted",
		"recycleBinRetentionPeriod",
		"hasRecycleBin",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRoomData := _RoomData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRoomData)

	if err != nil {
		return err
	}

	*o = RoomData(varRoomData)

	return err
}

type NullableRoomData struct {
	value *RoomData
	isSet bool
}

func (v NullableRoomData) Get() *RoomData {
	return v.value
}

func (v *NullableRoomData) Set(val *RoomData) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomData) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomData(val *RoomData) *NullableRoomData {
	return &NullableRoomData{value: val, isSet: true}
}

func (v NullableRoomData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
