/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CompleteS3ShareUploadRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompleteS3ShareUploadRequest{}

// CompleteS3ShareUploadRequest Request model for completing a S3 file upload
type CompleteS3ShareUploadRequest struct {
	// List of S3 file upload parts
	Parts []S3FileUploadPart `json:"parts"`
	// List of user file keys
	UserFileKeyList []UserFileKey `json:"userFileKeyList,omitempty"`
}

type _CompleteS3ShareUploadRequest CompleteS3ShareUploadRequest

// NewCompleteS3ShareUploadRequest instantiates a new CompleteS3ShareUploadRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompleteS3ShareUploadRequest(parts []S3FileUploadPart) *CompleteS3ShareUploadRequest {
	this := CompleteS3ShareUploadRequest{}
	this.Parts = parts
	return &this
}

// NewCompleteS3ShareUploadRequestWithDefaults instantiates a new CompleteS3ShareUploadRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompleteS3ShareUploadRequestWithDefaults() *CompleteS3ShareUploadRequest {
	this := CompleteS3ShareUploadRequest{}
	return &this
}

// GetParts returns the Parts field value
func (o *CompleteS3ShareUploadRequest) GetParts() []S3FileUploadPart {
	if o == nil {
		var ret []S3FileUploadPart
		return ret
	}

	return o.Parts
}

// GetPartsOk returns a tuple with the Parts field value
// and a boolean to check if the value has been set.
func (o *CompleteS3ShareUploadRequest) GetPartsOk() ([]S3FileUploadPart, bool) {
	if o == nil {
		return nil, false
	}
	return o.Parts, true
}

// SetParts sets field value
func (o *CompleteS3ShareUploadRequest) SetParts(v []S3FileUploadPart) {
	o.Parts = v
}

// GetUserFileKeyList returns the UserFileKeyList field value if set, zero value otherwise.
func (o *CompleteS3ShareUploadRequest) GetUserFileKeyList() []UserFileKey {
	if o == nil || IsNil(o.UserFileKeyList) {
		var ret []UserFileKey
		return ret
	}
	return o.UserFileKeyList
}

// GetUserFileKeyListOk returns a tuple with the UserFileKeyList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompleteS3ShareUploadRequest) GetUserFileKeyListOk() ([]UserFileKey, bool) {
	if o == nil || IsNil(o.UserFileKeyList) {
		return nil, false
	}
	return o.UserFileKeyList, true
}

// HasUserFileKeyList returns a boolean if a field has been set.
func (o *CompleteS3ShareUploadRequest) HasUserFileKeyList() bool {
	if o != nil && !IsNil(o.UserFileKeyList) {
		return true
	}

	return false
}

// SetUserFileKeyList gets a reference to the given []UserFileKey and assigns it to the UserFileKeyList field.
func (o *CompleteS3ShareUploadRequest) SetUserFileKeyList(v []UserFileKey) {
	o.UserFileKeyList = v
}

func (o CompleteS3ShareUploadRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompleteS3ShareUploadRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["parts"] = o.Parts
	if !IsNil(o.UserFileKeyList) {
		toSerialize["userFileKeyList"] = o.UserFileKeyList
	}
	return toSerialize, nil
}

func (o *CompleteS3ShareUploadRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"parts",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCompleteS3ShareUploadRequest := _CompleteS3ShareUploadRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCompleteS3ShareUploadRequest)

	if err != nil {
		return err
	}

	*o = CompleteS3ShareUploadRequest(varCompleteS3ShareUploadRequest)

	return err
}

type NullableCompleteS3ShareUploadRequest struct {
	value *CompleteS3ShareUploadRequest
	isSet bool
}

func (v NullableCompleteS3ShareUploadRequest) Get() *CompleteS3ShareUploadRequest {
	return v.value
}

func (v *NullableCompleteS3ShareUploadRequest) Set(val *CompleteS3ShareUploadRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCompleteS3ShareUploadRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCompleteS3ShareUploadRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompleteS3ShareUploadRequest(val *CompleteS3ShareUploadRequest) *NullableCompleteS3ShareUploadRequest {
	return &NullableCompleteS3ShareUploadRequest{value: val, isSet: true}
}

func (v NullableCompleteS3ShareUploadRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompleteS3ShareUploadRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
