/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PendingAssignmentData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PendingAssignmentData{}

// PendingAssignmentData Pending assignment information
type PendingAssignmentData struct {
	// Room ID
	RoomId int64 `json:"roomId"`
	// Room name
	RoomName string `json:"roomName"`
	// Acceptance state:  * `ACCEPTED`  * `WAITING`  * `DENIED`
	State     string    `json:"state"`
	UserInfo  UserInfo  `json:"userInfo"`
	GroupInfo GroupInfo `json:"groupInfo"`
	// Deprecated
	PendingUserData PendingUserData `json:"pendingUserData"`
	// Deprecated
	PendingGroupData PendingGroupData `json:"pendingGroupData"`
}

type _PendingAssignmentData PendingAssignmentData

// NewPendingAssignmentData instantiates a new PendingAssignmentData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPendingAssignmentData(roomId int64, roomName string, state string, userInfo UserInfo, groupInfo GroupInfo, pendingUserData PendingUserData, pendingGroupData PendingGroupData) *PendingAssignmentData {
	this := PendingAssignmentData{}
	this.RoomId = roomId
	this.RoomName = roomName
	this.State = state
	this.UserInfo = userInfo
	this.GroupInfo = groupInfo
	this.PendingUserData = pendingUserData
	this.PendingGroupData = pendingGroupData
	return &this
}

// NewPendingAssignmentDataWithDefaults instantiates a new PendingAssignmentData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPendingAssignmentDataWithDefaults() *PendingAssignmentData {
	this := PendingAssignmentData{}
	return &this
}

// GetRoomId returns the RoomId field value
func (o *PendingAssignmentData) GetRoomId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.RoomId
}

// GetRoomIdOk returns a tuple with the RoomId field value
// and a boolean to check if the value has been set.
func (o *PendingAssignmentData) GetRoomIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RoomId, true
}

// SetRoomId sets field value
func (o *PendingAssignmentData) SetRoomId(v int64) {
	o.RoomId = v
}

// GetRoomName returns the RoomName field value
func (o *PendingAssignmentData) GetRoomName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RoomName
}

// GetRoomNameOk returns a tuple with the RoomName field value
// and a boolean to check if the value has been set.
func (o *PendingAssignmentData) GetRoomNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RoomName, true
}

// SetRoomName sets field value
func (o *PendingAssignmentData) SetRoomName(v string) {
	o.RoomName = v
}

// GetState returns the State field value
func (o *PendingAssignmentData) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *PendingAssignmentData) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *PendingAssignmentData) SetState(v string) {
	o.State = v
}

// GetUserInfo returns the UserInfo field value
func (o *PendingAssignmentData) GetUserInfo() UserInfo {
	if o == nil {
		var ret UserInfo
		return ret
	}

	return o.UserInfo
}

// GetUserInfoOk returns a tuple with the UserInfo field value
// and a boolean to check if the value has been set.
func (o *PendingAssignmentData) GetUserInfoOk() (*UserInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserInfo, true
}

// SetUserInfo sets field value
func (o *PendingAssignmentData) SetUserInfo(v UserInfo) {
	o.UserInfo = v
}

// GetGroupInfo returns the GroupInfo field value
func (o *PendingAssignmentData) GetGroupInfo() GroupInfo {
	if o == nil {
		var ret GroupInfo
		return ret
	}

	return o.GroupInfo
}

// GetGroupInfoOk returns a tuple with the GroupInfo field value
// and a boolean to check if the value has been set.
func (o *PendingAssignmentData) GetGroupInfoOk() (*GroupInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupInfo, true
}

// SetGroupInfo sets field value
func (o *PendingAssignmentData) SetGroupInfo(v GroupInfo) {
	o.GroupInfo = v
}

// GetPendingUserData returns the PendingUserData field value
// Deprecated
func (o *PendingAssignmentData) GetPendingUserData() PendingUserData {
	if o == nil {
		var ret PendingUserData
		return ret
	}

	return o.PendingUserData
}

// GetPendingUserDataOk returns a tuple with the PendingUserData field value
// and a boolean to check if the value has been set.
// Deprecated
func (o *PendingAssignmentData) GetPendingUserDataOk() (*PendingUserData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PendingUserData, true
}

// SetPendingUserData sets field value
// Deprecated
func (o *PendingAssignmentData) SetPendingUserData(v PendingUserData) {
	o.PendingUserData = v
}

// GetPendingGroupData returns the PendingGroupData field value
// Deprecated
func (o *PendingAssignmentData) GetPendingGroupData() PendingGroupData {
	if o == nil {
		var ret PendingGroupData
		return ret
	}

	return o.PendingGroupData
}

// GetPendingGroupDataOk returns a tuple with the PendingGroupData field value
// and a boolean to check if the value has been set.
// Deprecated
func (o *PendingAssignmentData) GetPendingGroupDataOk() (*PendingGroupData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PendingGroupData, true
}

// SetPendingGroupData sets field value
// Deprecated
func (o *PendingAssignmentData) SetPendingGroupData(v PendingGroupData) {
	o.PendingGroupData = v
}

func (o PendingAssignmentData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PendingAssignmentData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["roomId"] = o.RoomId
	toSerialize["roomName"] = o.RoomName
	toSerialize["state"] = o.State
	toSerialize["userInfo"] = o.UserInfo
	toSerialize["groupInfo"] = o.GroupInfo
	toSerialize["pendingUserData"] = o.PendingUserData
	toSerialize["pendingGroupData"] = o.PendingGroupData
	return toSerialize, nil
}

func (o *PendingAssignmentData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"roomId",
		"roomName",
		"state",
		"userInfo",
		"groupInfo",
		"pendingUserData",
		"pendingGroupData",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPendingAssignmentData := _PendingAssignmentData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPendingAssignmentData)

	if err != nil {
		return err
	}

	*o = PendingAssignmentData(varPendingAssignmentData)

	return err
}

type NullablePendingAssignmentData struct {
	value *PendingAssignmentData
	isSet bool
}

func (v NullablePendingAssignmentData) Get() *PendingAssignmentData {
	return v.value
}

func (v *NullablePendingAssignmentData) Set(val *PendingAssignmentData) {
	v.value = val
	v.isSet = true
}

func (v NullablePendingAssignmentData) IsSet() bool {
	return v.isSet
}

func (v *NullablePendingAssignmentData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePendingAssignmentData(val *PendingAssignmentData) *NullablePendingAssignmentData {
	return &NullablePendingAssignmentData{value: val, isSet: true}
}

func (v NullablePendingAssignmentData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePendingAssignmentData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
