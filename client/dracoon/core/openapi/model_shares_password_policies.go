/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the SharesPasswordPolicies type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SharesPasswordPolicies{}

// SharesPasswordPolicies Shares password policies
type SharesPasswordPolicies struct {
	CharacterRules *CharacterRules `json:"characterRules,omitempty"`
	// Minimum number of characters a password must contain
	MinLength *int32 `json:"minLength,omitempty"`
	// Determines whether a password must NOT contain word(s) from a dictionary
	RejectDictionaryWords *bool `json:"rejectDictionaryWords,omitempty"`
	// Determines whether a password must NOT contain user info (first name, last name, email, user name)
	RejectUserInfo *bool `json:"rejectUserInfo,omitempty"`
	// Determines whether a password must NOT contain keyboard patterns (e.g. `qwertz`, `asdf`)  (min. 4 character pattern)
	RejectKeyboardPatterns *bool `json:"rejectKeyboardPatterns,omitempty"`
	// Modification date
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	UpdatedBy *UserInfo  `json:"updatedBy,omitempty"`
}

// NewSharesPasswordPolicies instantiates a new SharesPasswordPolicies object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSharesPasswordPolicies() *SharesPasswordPolicies {
	this := SharesPasswordPolicies{}
	return &this
}

// NewSharesPasswordPoliciesWithDefaults instantiates a new SharesPasswordPolicies object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSharesPasswordPoliciesWithDefaults() *SharesPasswordPolicies {
	this := SharesPasswordPolicies{}
	return &this
}

// GetCharacterRules returns the CharacterRules field value if set, zero value otherwise.
func (o *SharesPasswordPolicies) GetCharacterRules() CharacterRules {
	if o == nil || IsNil(o.CharacterRules) {
		var ret CharacterRules
		return ret
	}
	return *o.CharacterRules
}

// GetCharacterRulesOk returns a tuple with the CharacterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharesPasswordPolicies) GetCharacterRulesOk() (*CharacterRules, bool) {
	if o == nil || IsNil(o.CharacterRules) {
		return nil, false
	}
	return o.CharacterRules, true
}

// HasCharacterRules returns a boolean if a field has been set.
func (o *SharesPasswordPolicies) HasCharacterRules() bool {
	if o != nil && !IsNil(o.CharacterRules) {
		return true
	}

	return false
}

// SetCharacterRules gets a reference to the given CharacterRules and assigns it to the CharacterRules field.
func (o *SharesPasswordPolicies) SetCharacterRules(v CharacterRules) {
	o.CharacterRules = &v
}

// GetMinLength returns the MinLength field value if set, zero value otherwise.
func (o *SharesPasswordPolicies) GetMinLength() int32 {
	if o == nil || IsNil(o.MinLength) {
		var ret int32
		return ret
	}
	return *o.MinLength
}

// GetMinLengthOk returns a tuple with the MinLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharesPasswordPolicies) GetMinLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.MinLength) {
		return nil, false
	}
	return o.MinLength, true
}

// HasMinLength returns a boolean if a field has been set.
func (o *SharesPasswordPolicies) HasMinLength() bool {
	if o != nil && !IsNil(o.MinLength) {
		return true
	}

	return false
}

// SetMinLength gets a reference to the given int32 and assigns it to the MinLength field.
func (o *SharesPasswordPolicies) SetMinLength(v int32) {
	o.MinLength = &v
}

// GetRejectDictionaryWords returns the RejectDictionaryWords field value if set, zero value otherwise.
func (o *SharesPasswordPolicies) GetRejectDictionaryWords() bool {
	if o == nil || IsNil(o.RejectDictionaryWords) {
		var ret bool
		return ret
	}
	return *o.RejectDictionaryWords
}

// GetRejectDictionaryWordsOk returns a tuple with the RejectDictionaryWords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharesPasswordPolicies) GetRejectDictionaryWordsOk() (*bool, bool) {
	if o == nil || IsNil(o.RejectDictionaryWords) {
		return nil, false
	}
	return o.RejectDictionaryWords, true
}

// HasRejectDictionaryWords returns a boolean if a field has been set.
func (o *SharesPasswordPolicies) HasRejectDictionaryWords() bool {
	if o != nil && !IsNil(o.RejectDictionaryWords) {
		return true
	}

	return false
}

// SetRejectDictionaryWords gets a reference to the given bool and assigns it to the RejectDictionaryWords field.
func (o *SharesPasswordPolicies) SetRejectDictionaryWords(v bool) {
	o.RejectDictionaryWords = &v
}

// GetRejectUserInfo returns the RejectUserInfo field value if set, zero value otherwise.
func (o *SharesPasswordPolicies) GetRejectUserInfo() bool {
	if o == nil || IsNil(o.RejectUserInfo) {
		var ret bool
		return ret
	}
	return *o.RejectUserInfo
}

// GetRejectUserInfoOk returns a tuple with the RejectUserInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharesPasswordPolicies) GetRejectUserInfoOk() (*bool, bool) {
	if o == nil || IsNil(o.RejectUserInfo) {
		return nil, false
	}
	return o.RejectUserInfo, true
}

// HasRejectUserInfo returns a boolean if a field has been set.
func (o *SharesPasswordPolicies) HasRejectUserInfo() bool {
	if o != nil && !IsNil(o.RejectUserInfo) {
		return true
	}

	return false
}

// SetRejectUserInfo gets a reference to the given bool and assigns it to the RejectUserInfo field.
func (o *SharesPasswordPolicies) SetRejectUserInfo(v bool) {
	o.RejectUserInfo = &v
}

// GetRejectKeyboardPatterns returns the RejectKeyboardPatterns field value if set, zero value otherwise.
func (o *SharesPasswordPolicies) GetRejectKeyboardPatterns() bool {
	if o == nil || IsNil(o.RejectKeyboardPatterns) {
		var ret bool
		return ret
	}
	return *o.RejectKeyboardPatterns
}

// GetRejectKeyboardPatternsOk returns a tuple with the RejectKeyboardPatterns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharesPasswordPolicies) GetRejectKeyboardPatternsOk() (*bool, bool) {
	if o == nil || IsNil(o.RejectKeyboardPatterns) {
		return nil, false
	}
	return o.RejectKeyboardPatterns, true
}

// HasRejectKeyboardPatterns returns a boolean if a field has been set.
func (o *SharesPasswordPolicies) HasRejectKeyboardPatterns() bool {
	if o != nil && !IsNil(o.RejectKeyboardPatterns) {
		return true
	}

	return false
}

// SetRejectKeyboardPatterns gets a reference to the given bool and assigns it to the RejectKeyboardPatterns field.
func (o *SharesPasswordPolicies) SetRejectKeyboardPatterns(v bool) {
	o.RejectKeyboardPatterns = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *SharesPasswordPolicies) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharesPasswordPolicies) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *SharesPasswordPolicies) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *SharesPasswordPolicies) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *SharesPasswordPolicies) GetUpdatedBy() UserInfo {
	if o == nil || IsNil(o.UpdatedBy) {
		var ret UserInfo
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharesPasswordPolicies) GetUpdatedByOk() (*UserInfo, bool) {
	if o == nil || IsNil(o.UpdatedBy) {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *SharesPasswordPolicies) HasUpdatedBy() bool {
	if o != nil && !IsNil(o.UpdatedBy) {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given UserInfo and assigns it to the UpdatedBy field.
func (o *SharesPasswordPolicies) SetUpdatedBy(v UserInfo) {
	o.UpdatedBy = &v
}

func (o SharesPasswordPolicies) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SharesPasswordPolicies) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CharacterRules) {
		toSerialize["characterRules"] = o.CharacterRules
	}
	if !IsNil(o.MinLength) {
		toSerialize["minLength"] = o.MinLength
	}
	if !IsNil(o.RejectDictionaryWords) {
		toSerialize["rejectDictionaryWords"] = o.RejectDictionaryWords
	}
	if !IsNil(o.RejectUserInfo) {
		toSerialize["rejectUserInfo"] = o.RejectUserInfo
	}
	if !IsNil(o.RejectKeyboardPatterns) {
		toSerialize["rejectKeyboardPatterns"] = o.RejectKeyboardPatterns
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !IsNil(o.UpdatedBy) {
		toSerialize["updatedBy"] = o.UpdatedBy
	}
	return toSerialize, nil
}

type NullableSharesPasswordPolicies struct {
	value *SharesPasswordPolicies
	isSet bool
}

func (v NullableSharesPasswordPolicies) Get() *SharesPasswordPolicies {
	return v.value
}

func (v *NullableSharesPasswordPolicies) Set(val *SharesPasswordPolicies) {
	v.value = val
	v.isSet = true
}

func (v NullableSharesPasswordPolicies) IsSet() bool {
	return v.isSet
}

func (v *NullableSharesPasswordPolicies) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharesPasswordPolicies(val *SharesPasswordPolicies) *NullableSharesPasswordPolicies {
	return &NullableSharesPasswordPolicies{value: val, isSet: true}
}

func (v NullableSharesPasswordPolicies) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharesPasswordPolicies) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
