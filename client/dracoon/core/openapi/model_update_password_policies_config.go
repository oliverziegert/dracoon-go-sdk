/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdatePasswordPoliciesConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdatePasswordPoliciesConfig{}

// UpdatePasswordPoliciesConfig Request model for updating a set of password policies
type UpdatePasswordPoliciesConfig struct {
	LoginPasswordPolicies      *UpdateLoginPasswordPolicies      `json:"loginPasswordPolicies,omitempty"`
	SharesPasswordPolicies     *UpdateSharesPasswordPolicies     `json:"sharesPasswordPolicies,omitempty"`
	EncryptionPasswordPolicies *UpdateEncryptionPasswordPolicies `json:"encryptionPasswordPolicies,omitempty"`
}

// NewUpdatePasswordPoliciesConfig instantiates a new UpdatePasswordPoliciesConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdatePasswordPoliciesConfig() *UpdatePasswordPoliciesConfig {
	this := UpdatePasswordPoliciesConfig{}
	return &this
}

// NewUpdatePasswordPoliciesConfigWithDefaults instantiates a new UpdatePasswordPoliciesConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdatePasswordPoliciesConfigWithDefaults() *UpdatePasswordPoliciesConfig {
	this := UpdatePasswordPoliciesConfig{}
	return &this
}

// GetLoginPasswordPolicies returns the LoginPasswordPolicies field value if set, zero value otherwise.
func (o *UpdatePasswordPoliciesConfig) GetLoginPasswordPolicies() UpdateLoginPasswordPolicies {
	if o == nil || IsNil(o.LoginPasswordPolicies) {
		var ret UpdateLoginPasswordPolicies
		return ret
	}
	return *o.LoginPasswordPolicies
}

// GetLoginPasswordPoliciesOk returns a tuple with the LoginPasswordPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePasswordPoliciesConfig) GetLoginPasswordPoliciesOk() (*UpdateLoginPasswordPolicies, bool) {
	if o == nil || IsNil(o.LoginPasswordPolicies) {
		return nil, false
	}
	return o.LoginPasswordPolicies, true
}

// HasLoginPasswordPolicies returns a boolean if a field has been set.
func (o *UpdatePasswordPoliciesConfig) HasLoginPasswordPolicies() bool {
	if o != nil && !IsNil(o.LoginPasswordPolicies) {
		return true
	}

	return false
}

// SetLoginPasswordPolicies gets a reference to the given UpdateLoginPasswordPolicies and assigns it to the LoginPasswordPolicies field.
func (o *UpdatePasswordPoliciesConfig) SetLoginPasswordPolicies(v UpdateLoginPasswordPolicies) {
	o.LoginPasswordPolicies = &v
}

// GetSharesPasswordPolicies returns the SharesPasswordPolicies field value if set, zero value otherwise.
func (o *UpdatePasswordPoliciesConfig) GetSharesPasswordPolicies() UpdateSharesPasswordPolicies {
	if o == nil || IsNil(o.SharesPasswordPolicies) {
		var ret UpdateSharesPasswordPolicies
		return ret
	}
	return *o.SharesPasswordPolicies
}

// GetSharesPasswordPoliciesOk returns a tuple with the SharesPasswordPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePasswordPoliciesConfig) GetSharesPasswordPoliciesOk() (*UpdateSharesPasswordPolicies, bool) {
	if o == nil || IsNil(o.SharesPasswordPolicies) {
		return nil, false
	}
	return o.SharesPasswordPolicies, true
}

// HasSharesPasswordPolicies returns a boolean if a field has been set.
func (o *UpdatePasswordPoliciesConfig) HasSharesPasswordPolicies() bool {
	if o != nil && !IsNil(o.SharesPasswordPolicies) {
		return true
	}

	return false
}

// SetSharesPasswordPolicies gets a reference to the given UpdateSharesPasswordPolicies and assigns it to the SharesPasswordPolicies field.
func (o *UpdatePasswordPoliciesConfig) SetSharesPasswordPolicies(v UpdateSharesPasswordPolicies) {
	o.SharesPasswordPolicies = &v
}

// GetEncryptionPasswordPolicies returns the EncryptionPasswordPolicies field value if set, zero value otherwise.
func (o *UpdatePasswordPoliciesConfig) GetEncryptionPasswordPolicies() UpdateEncryptionPasswordPolicies {
	if o == nil || IsNil(o.EncryptionPasswordPolicies) {
		var ret UpdateEncryptionPasswordPolicies
		return ret
	}
	return *o.EncryptionPasswordPolicies
}

// GetEncryptionPasswordPoliciesOk returns a tuple with the EncryptionPasswordPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePasswordPoliciesConfig) GetEncryptionPasswordPoliciesOk() (*UpdateEncryptionPasswordPolicies, bool) {
	if o == nil || IsNil(o.EncryptionPasswordPolicies) {
		return nil, false
	}
	return o.EncryptionPasswordPolicies, true
}

// HasEncryptionPasswordPolicies returns a boolean if a field has been set.
func (o *UpdatePasswordPoliciesConfig) HasEncryptionPasswordPolicies() bool {
	if o != nil && !IsNil(o.EncryptionPasswordPolicies) {
		return true
	}

	return false
}

// SetEncryptionPasswordPolicies gets a reference to the given UpdateEncryptionPasswordPolicies and assigns it to the EncryptionPasswordPolicies field.
func (o *UpdatePasswordPoliciesConfig) SetEncryptionPasswordPolicies(v UpdateEncryptionPasswordPolicies) {
	o.EncryptionPasswordPolicies = &v
}

func (o UpdatePasswordPoliciesConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdatePasswordPoliciesConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LoginPasswordPolicies) {
		toSerialize["loginPasswordPolicies"] = o.LoginPasswordPolicies
	}
	if !IsNil(o.SharesPasswordPolicies) {
		toSerialize["sharesPasswordPolicies"] = o.SharesPasswordPolicies
	}
	if !IsNil(o.EncryptionPasswordPolicies) {
		toSerialize["encryptionPasswordPolicies"] = o.EncryptionPasswordPolicies
	}
	return toSerialize, nil
}

type NullableUpdatePasswordPoliciesConfig struct {
	value *UpdatePasswordPoliciesConfig
	isSet bool
}

func (v NullableUpdatePasswordPoliciesConfig) Get() *UpdatePasswordPoliciesConfig {
	return v.value
}

func (v *NullableUpdatePasswordPoliciesConfig) Set(val *UpdatePasswordPoliciesConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdatePasswordPoliciesConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdatePasswordPoliciesConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdatePasswordPoliciesConfig(val *UpdatePasswordPoliciesConfig) *NullableUpdatePasswordPoliciesConfig {
	return &NullableUpdatePasswordPoliciesConfig{value: val, isSet: true}
}

func (v NullableUpdatePasswordPoliciesConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdatePasswordPoliciesConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
