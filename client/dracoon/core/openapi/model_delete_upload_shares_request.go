/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DeleteUploadSharesRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteUploadSharesRequest{}

// DeleteUploadSharesRequest Request model for deleting Upload Shares
type DeleteUploadSharesRequest struct {
	// List of share IDs
	ShareIds []int64 `json:"shareIds"`
}

type _DeleteUploadSharesRequest DeleteUploadSharesRequest

// NewDeleteUploadSharesRequest instantiates a new DeleteUploadSharesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteUploadSharesRequest(shareIds []int64) *DeleteUploadSharesRequest {
	this := DeleteUploadSharesRequest{}
	this.ShareIds = shareIds
	return &this
}

// NewDeleteUploadSharesRequestWithDefaults instantiates a new DeleteUploadSharesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteUploadSharesRequestWithDefaults() *DeleteUploadSharesRequest {
	this := DeleteUploadSharesRequest{}
	return &this
}

// GetShareIds returns the ShareIds field value
func (o *DeleteUploadSharesRequest) GetShareIds() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}

	return o.ShareIds
}

// GetShareIdsOk returns a tuple with the ShareIds field value
// and a boolean to check if the value has been set.
func (o *DeleteUploadSharesRequest) GetShareIdsOk() ([]int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ShareIds, true
}

// SetShareIds sets field value
func (o *DeleteUploadSharesRequest) SetShareIds(v []int64) {
	o.ShareIds = v
}

func (o DeleteUploadSharesRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteUploadSharesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["shareIds"] = o.ShareIds
	return toSerialize, nil
}

func (o *DeleteUploadSharesRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"shareIds",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeleteUploadSharesRequest := _DeleteUploadSharesRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeleteUploadSharesRequest)

	if err != nil {
		return err
	}

	*o = DeleteUploadSharesRequest(varDeleteUploadSharesRequest)

	return err
}

type NullableDeleteUploadSharesRequest struct {
	value *DeleteUploadSharesRequest
	isSet bool
}

func (v NullableDeleteUploadSharesRequest) Get() *DeleteUploadSharesRequest {
	return v.value
}

func (v *NullableDeleteUploadSharesRequest) Set(val *DeleteUploadSharesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteUploadSharesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteUploadSharesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteUploadSharesRequest(val *DeleteUploadSharesRequest) *NullableDeleteUploadSharesRequest {
	return &NullableDeleteUploadSharesRequest{value: val, isSet: true}
}

func (v NullableDeleteUploadSharesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteUploadSharesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
