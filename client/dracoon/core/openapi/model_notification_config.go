/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the NotificationConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationConfig{}

// NotificationConfig Notification configuration information
type NotificationConfig struct {
	// Notification configuration ID
	Id int64 `json:"id"`
	// Scope ID
	ScopeId int32 `json:"scopeId"`
	// Event type name
	EventTypeName string `json:"eventTypeName"`
	// List of notification channel IDs
	ChannelIds []int32 `json:"channelIds"`
}

type _NotificationConfig NotificationConfig

// NewNotificationConfig instantiates a new NotificationConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationConfig(id int64, scopeId int32, eventTypeName string, channelIds []int32) *NotificationConfig {
	this := NotificationConfig{}
	this.Id = id
	this.ScopeId = scopeId
	this.EventTypeName = eventTypeName
	this.ChannelIds = channelIds
	return &this
}

// NewNotificationConfigWithDefaults instantiates a new NotificationConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationConfigWithDefaults() *NotificationConfig {
	this := NotificationConfig{}
	return &this
}

// GetId returns the Id field value
func (o *NotificationConfig) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *NotificationConfig) SetId(v int64) {
	o.Id = v
}

// GetScopeId returns the ScopeId field value
func (o *NotificationConfig) GetScopeId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ScopeId
}

// GetScopeIdOk returns a tuple with the ScopeId field value
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetScopeIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScopeId, true
}

// SetScopeId sets field value
func (o *NotificationConfig) SetScopeId(v int32) {
	o.ScopeId = v
}

// GetEventTypeName returns the EventTypeName field value
func (o *NotificationConfig) GetEventTypeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventTypeName
}

// GetEventTypeNameOk returns a tuple with the EventTypeName field value
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetEventTypeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventTypeName, true
}

// SetEventTypeName sets field value
func (o *NotificationConfig) SetEventTypeName(v string) {
	o.EventTypeName = v
}

// GetChannelIds returns the ChannelIds field value
func (o *NotificationConfig) GetChannelIds() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.ChannelIds
}

// GetChannelIdsOk returns a tuple with the ChannelIds field value
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetChannelIdsOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChannelIds, true
}

// SetChannelIds sets field value
func (o *NotificationConfig) SetChannelIds(v []int32) {
	o.ChannelIds = v
}

func (o NotificationConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["scopeId"] = o.ScopeId
	toSerialize["eventTypeName"] = o.EventTypeName
	toSerialize["channelIds"] = o.ChannelIds
	return toSerialize, nil
}

func (o *NotificationConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"scopeId",
		"eventTypeName",
		"channelIds",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNotificationConfig := _NotificationConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNotificationConfig)

	if err != nil {
		return err
	}

	*o = NotificationConfig(varNotificationConfig)

	return err
}

type NullableNotificationConfig struct {
	value *NotificationConfig
	isSet bool
}

func (v NullableNotificationConfig) Get() *NotificationConfig {
	return v.value
}

func (v *NullableNotificationConfig) Set(val *NotificationConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationConfig(val *NotificationConfig) *NullableNotificationConfig {
	return &NullableNotificationConfig{value: val, isSet: true}
}

func (v NullableNotificationConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
