/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the RoomUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomUser{}

// RoomUser User information
type RoomUser struct {
	UserInfo UserInfo `json:"userInfo"`
	// Is user granted room permissions
	IsGranted          bool                `json:"isGranted"`
	Permissions        *NodePermissions    `json:"permissions,omitempty"`
	PublicKeyContainer *PublicKeyContainer `json:"publicKeyContainer,omitempty"`
	// &#128679; Deprecated since v4.11.0  Unique identifier for the user  use `id` from `UserInfo` instead
	// Deprecated
	Id int64 `json:"id"`
	// &#128679; Deprecated since v4.11.0  User login name
	// Deprecated
	Login string `json:"login"`
	// &#128679; Deprecated since v4.11.0  Display name  use information from `UserInfo` instead to combine a display name
	// Deprecated
	DisplayName string `json:"displayName"`
	// &#128679; Deprecated since v4.11.0  Email   use `email` from `UserInfo` instead
	// Deprecated
	Email string `json:"email"`
}

type _RoomUser RoomUser

// NewRoomUser instantiates a new RoomUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomUser(userInfo UserInfo, isGranted bool, id int64, login string, displayName string, email string) *RoomUser {
	this := RoomUser{}
	this.UserInfo = userInfo
	this.IsGranted = isGranted
	this.Id = id
	this.Login = login
	this.DisplayName = displayName
	this.Email = email
	return &this
}

// NewRoomUserWithDefaults instantiates a new RoomUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomUserWithDefaults() *RoomUser {
	this := RoomUser{}
	return &this
}

// GetUserInfo returns the UserInfo field value
func (o *RoomUser) GetUserInfo() UserInfo {
	if o == nil {
		var ret UserInfo
		return ret
	}

	return o.UserInfo
}

// GetUserInfoOk returns a tuple with the UserInfo field value
// and a boolean to check if the value has been set.
func (o *RoomUser) GetUserInfoOk() (*UserInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserInfo, true
}

// SetUserInfo sets field value
func (o *RoomUser) SetUserInfo(v UserInfo) {
	o.UserInfo = v
}

// GetIsGranted returns the IsGranted field value
func (o *RoomUser) GetIsGranted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsGranted
}

// GetIsGrantedOk returns a tuple with the IsGranted field value
// and a boolean to check if the value has been set.
func (o *RoomUser) GetIsGrantedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsGranted, true
}

// SetIsGranted sets field value
func (o *RoomUser) SetIsGranted(v bool) {
	o.IsGranted = v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *RoomUser) GetPermissions() NodePermissions {
	if o == nil || IsNil(o.Permissions) {
		var ret NodePermissions
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomUser) GetPermissionsOk() (*NodePermissions, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *RoomUser) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given NodePermissions and assigns it to the Permissions field.
func (o *RoomUser) SetPermissions(v NodePermissions) {
	o.Permissions = &v
}

// GetPublicKeyContainer returns the PublicKeyContainer field value if set, zero value otherwise.
func (o *RoomUser) GetPublicKeyContainer() PublicKeyContainer {
	if o == nil || IsNil(o.PublicKeyContainer) {
		var ret PublicKeyContainer
		return ret
	}
	return *o.PublicKeyContainer
}

// GetPublicKeyContainerOk returns a tuple with the PublicKeyContainer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomUser) GetPublicKeyContainerOk() (*PublicKeyContainer, bool) {
	if o == nil || IsNil(o.PublicKeyContainer) {
		return nil, false
	}
	return o.PublicKeyContainer, true
}

// HasPublicKeyContainer returns a boolean if a field has been set.
func (o *RoomUser) HasPublicKeyContainer() bool {
	if o != nil && !IsNil(o.PublicKeyContainer) {
		return true
	}

	return false
}

// SetPublicKeyContainer gets a reference to the given PublicKeyContainer and assigns it to the PublicKeyContainer field.
func (o *RoomUser) SetPublicKeyContainer(v PublicKeyContainer) {
	o.PublicKeyContainer = &v
}

// GetId returns the Id field value
// Deprecated
func (o *RoomUser) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
// Deprecated
func (o *RoomUser) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
// Deprecated
func (o *RoomUser) SetId(v int64) {
	o.Id = v
}

// GetLogin returns the Login field value
// Deprecated
func (o *RoomUser) GetLogin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Login
}

// GetLoginOk returns a tuple with the Login field value
// and a boolean to check if the value has been set.
// Deprecated
func (o *RoomUser) GetLoginOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Login, true
}

// SetLogin sets field value
// Deprecated
func (o *RoomUser) SetLogin(v string) {
	o.Login = v
}

// GetDisplayName returns the DisplayName field value
// Deprecated
func (o *RoomUser) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
// Deprecated
func (o *RoomUser) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
// Deprecated
func (o *RoomUser) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetEmail returns the Email field value
// Deprecated
func (o *RoomUser) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
// Deprecated
func (o *RoomUser) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
// Deprecated
func (o *RoomUser) SetEmail(v string) {
	o.Email = v
}

func (o RoomUser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["userInfo"] = o.UserInfo
	toSerialize["isGranted"] = o.IsGranted
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	if !IsNil(o.PublicKeyContainer) {
		toSerialize["publicKeyContainer"] = o.PublicKeyContainer
	}
	toSerialize["id"] = o.Id
	toSerialize["login"] = o.Login
	toSerialize["displayName"] = o.DisplayName
	toSerialize["email"] = o.Email
	return toSerialize, nil
}

func (o *RoomUser) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"userInfo",
		"isGranted",
		"id",
		"login",
		"displayName",
		"email",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRoomUser := _RoomUser{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRoomUser)

	if err != nil {
		return err
	}

	*o = RoomUser(varRoomUser)

	return err
}

type NullableRoomUser struct {
	value *RoomUser
	isSet bool
}

func (v NullableRoomUser) Get() *RoomUser {
	return v.value
}

func (v *NullableRoomUser) Set(val *RoomUser) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomUser) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomUser(val *RoomUser) *NullableRoomUser {
	return &NullableRoomUser{value: val, isSet: true}
}

func (v NullableRoomUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
