/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateLoginPasswordPolicies type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateLoginPasswordPolicies{}

// UpdateLoginPasswordPolicies Request model for updating login password policies
type UpdateLoginPasswordPolicies struct {
	CharacterRules *CharacterRules `json:"characterRules,omitempty"`
	// Minimum number of characters a password must contain
	MinLength *int32 `json:"minLength,omitempty"`
	// Determines whether a password must NOT contain word(s) from a dictionary
	RejectDictionaryWords *bool `json:"rejectDictionaryWords,omitempty"`
	// Determines whether a password must NOT contain user info (first name, last name, email, user name)
	RejectUserInfo *bool `json:"rejectUserInfo,omitempty"`
	// Determines whether a password must NOT contain keyboard patterns (e.g. `qwertz`, `asdf`)  (min. 4 character pattern)
	RejectKeyboardPatterns *bool `json:"rejectKeyboardPatterns,omitempty"`
	// Number of passwords to archive  (must be between `0` and `10`; `0` means that password history is disabled)
	NumberOfArchivedPasswords *int32              `json:"numberOfArchivedPasswords,omitempty"`
	PasswordExpiration        *PasswordExpiration `json:"passwordExpiration,omitempty"`
	UserLockout               *UserLockout        `json:"userLockout,omitempty"`
	// &#128679; Deprecated since v4.24.0  Determines whether a login password change should be enforced for all users  Only takes effect, if login password policies get stricter
	// Deprecated
	EnforceLoginPasswordChange *bool `json:"enforceLoginPasswordChange,omitempty"`
}

// NewUpdateLoginPasswordPolicies instantiates a new UpdateLoginPasswordPolicies object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateLoginPasswordPolicies() *UpdateLoginPasswordPolicies {
	this := UpdateLoginPasswordPolicies{}
	var enforceLoginPasswordChange bool = false
	this.EnforceLoginPasswordChange = &enforceLoginPasswordChange
	return &this
}

// NewUpdateLoginPasswordPoliciesWithDefaults instantiates a new UpdateLoginPasswordPolicies object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateLoginPasswordPoliciesWithDefaults() *UpdateLoginPasswordPolicies {
	this := UpdateLoginPasswordPolicies{}
	var enforceLoginPasswordChange bool = false
	this.EnforceLoginPasswordChange = &enforceLoginPasswordChange
	return &this
}

// GetCharacterRules returns the CharacterRules field value if set, zero value otherwise.
func (o *UpdateLoginPasswordPolicies) GetCharacterRules() CharacterRules {
	if o == nil || IsNil(o.CharacterRules) {
		var ret CharacterRules
		return ret
	}
	return *o.CharacterRules
}

// GetCharacterRulesOk returns a tuple with the CharacterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLoginPasswordPolicies) GetCharacterRulesOk() (*CharacterRules, bool) {
	if o == nil || IsNil(o.CharacterRules) {
		return nil, false
	}
	return o.CharacterRules, true
}

// HasCharacterRules returns a boolean if a field has been set.
func (o *UpdateLoginPasswordPolicies) HasCharacterRules() bool {
	if o != nil && !IsNil(o.CharacterRules) {
		return true
	}

	return false
}

// SetCharacterRules gets a reference to the given CharacterRules and assigns it to the CharacterRules field.
func (o *UpdateLoginPasswordPolicies) SetCharacterRules(v CharacterRules) {
	o.CharacterRules = &v
}

// GetMinLength returns the MinLength field value if set, zero value otherwise.
func (o *UpdateLoginPasswordPolicies) GetMinLength() int32 {
	if o == nil || IsNil(o.MinLength) {
		var ret int32
		return ret
	}
	return *o.MinLength
}

// GetMinLengthOk returns a tuple with the MinLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLoginPasswordPolicies) GetMinLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.MinLength) {
		return nil, false
	}
	return o.MinLength, true
}

// HasMinLength returns a boolean if a field has been set.
func (o *UpdateLoginPasswordPolicies) HasMinLength() bool {
	if o != nil && !IsNil(o.MinLength) {
		return true
	}

	return false
}

// SetMinLength gets a reference to the given int32 and assigns it to the MinLength field.
func (o *UpdateLoginPasswordPolicies) SetMinLength(v int32) {
	o.MinLength = &v
}

// GetRejectDictionaryWords returns the RejectDictionaryWords field value if set, zero value otherwise.
func (o *UpdateLoginPasswordPolicies) GetRejectDictionaryWords() bool {
	if o == nil || IsNil(o.RejectDictionaryWords) {
		var ret bool
		return ret
	}
	return *o.RejectDictionaryWords
}

// GetRejectDictionaryWordsOk returns a tuple with the RejectDictionaryWords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLoginPasswordPolicies) GetRejectDictionaryWordsOk() (*bool, bool) {
	if o == nil || IsNil(o.RejectDictionaryWords) {
		return nil, false
	}
	return o.RejectDictionaryWords, true
}

// HasRejectDictionaryWords returns a boolean if a field has been set.
func (o *UpdateLoginPasswordPolicies) HasRejectDictionaryWords() bool {
	if o != nil && !IsNil(o.RejectDictionaryWords) {
		return true
	}

	return false
}

// SetRejectDictionaryWords gets a reference to the given bool and assigns it to the RejectDictionaryWords field.
func (o *UpdateLoginPasswordPolicies) SetRejectDictionaryWords(v bool) {
	o.RejectDictionaryWords = &v
}

// GetRejectUserInfo returns the RejectUserInfo field value if set, zero value otherwise.
func (o *UpdateLoginPasswordPolicies) GetRejectUserInfo() bool {
	if o == nil || IsNil(o.RejectUserInfo) {
		var ret bool
		return ret
	}
	return *o.RejectUserInfo
}

// GetRejectUserInfoOk returns a tuple with the RejectUserInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLoginPasswordPolicies) GetRejectUserInfoOk() (*bool, bool) {
	if o == nil || IsNil(o.RejectUserInfo) {
		return nil, false
	}
	return o.RejectUserInfo, true
}

// HasRejectUserInfo returns a boolean if a field has been set.
func (o *UpdateLoginPasswordPolicies) HasRejectUserInfo() bool {
	if o != nil && !IsNil(o.RejectUserInfo) {
		return true
	}

	return false
}

// SetRejectUserInfo gets a reference to the given bool and assigns it to the RejectUserInfo field.
func (o *UpdateLoginPasswordPolicies) SetRejectUserInfo(v bool) {
	o.RejectUserInfo = &v
}

// GetRejectKeyboardPatterns returns the RejectKeyboardPatterns field value if set, zero value otherwise.
func (o *UpdateLoginPasswordPolicies) GetRejectKeyboardPatterns() bool {
	if o == nil || IsNil(o.RejectKeyboardPatterns) {
		var ret bool
		return ret
	}
	return *o.RejectKeyboardPatterns
}

// GetRejectKeyboardPatternsOk returns a tuple with the RejectKeyboardPatterns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLoginPasswordPolicies) GetRejectKeyboardPatternsOk() (*bool, bool) {
	if o == nil || IsNil(o.RejectKeyboardPatterns) {
		return nil, false
	}
	return o.RejectKeyboardPatterns, true
}

// HasRejectKeyboardPatterns returns a boolean if a field has been set.
func (o *UpdateLoginPasswordPolicies) HasRejectKeyboardPatterns() bool {
	if o != nil && !IsNil(o.RejectKeyboardPatterns) {
		return true
	}

	return false
}

// SetRejectKeyboardPatterns gets a reference to the given bool and assigns it to the RejectKeyboardPatterns field.
func (o *UpdateLoginPasswordPolicies) SetRejectKeyboardPatterns(v bool) {
	o.RejectKeyboardPatterns = &v
}

// GetNumberOfArchivedPasswords returns the NumberOfArchivedPasswords field value if set, zero value otherwise.
func (o *UpdateLoginPasswordPolicies) GetNumberOfArchivedPasswords() int32 {
	if o == nil || IsNil(o.NumberOfArchivedPasswords) {
		var ret int32
		return ret
	}
	return *o.NumberOfArchivedPasswords
}

// GetNumberOfArchivedPasswordsOk returns a tuple with the NumberOfArchivedPasswords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLoginPasswordPolicies) GetNumberOfArchivedPasswordsOk() (*int32, bool) {
	if o == nil || IsNil(o.NumberOfArchivedPasswords) {
		return nil, false
	}
	return o.NumberOfArchivedPasswords, true
}

// HasNumberOfArchivedPasswords returns a boolean if a field has been set.
func (o *UpdateLoginPasswordPolicies) HasNumberOfArchivedPasswords() bool {
	if o != nil && !IsNil(o.NumberOfArchivedPasswords) {
		return true
	}

	return false
}

// SetNumberOfArchivedPasswords gets a reference to the given int32 and assigns it to the NumberOfArchivedPasswords field.
func (o *UpdateLoginPasswordPolicies) SetNumberOfArchivedPasswords(v int32) {
	o.NumberOfArchivedPasswords = &v
}

// GetPasswordExpiration returns the PasswordExpiration field value if set, zero value otherwise.
func (o *UpdateLoginPasswordPolicies) GetPasswordExpiration() PasswordExpiration {
	if o == nil || IsNil(o.PasswordExpiration) {
		var ret PasswordExpiration
		return ret
	}
	return *o.PasswordExpiration
}

// GetPasswordExpirationOk returns a tuple with the PasswordExpiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLoginPasswordPolicies) GetPasswordExpirationOk() (*PasswordExpiration, bool) {
	if o == nil || IsNil(o.PasswordExpiration) {
		return nil, false
	}
	return o.PasswordExpiration, true
}

// HasPasswordExpiration returns a boolean if a field has been set.
func (o *UpdateLoginPasswordPolicies) HasPasswordExpiration() bool {
	if o != nil && !IsNil(o.PasswordExpiration) {
		return true
	}

	return false
}

// SetPasswordExpiration gets a reference to the given PasswordExpiration and assigns it to the PasswordExpiration field.
func (o *UpdateLoginPasswordPolicies) SetPasswordExpiration(v PasswordExpiration) {
	o.PasswordExpiration = &v
}

// GetUserLockout returns the UserLockout field value if set, zero value otherwise.
func (o *UpdateLoginPasswordPolicies) GetUserLockout() UserLockout {
	if o == nil || IsNil(o.UserLockout) {
		var ret UserLockout
		return ret
	}
	return *o.UserLockout
}

// GetUserLockoutOk returns a tuple with the UserLockout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLoginPasswordPolicies) GetUserLockoutOk() (*UserLockout, bool) {
	if o == nil || IsNil(o.UserLockout) {
		return nil, false
	}
	return o.UserLockout, true
}

// HasUserLockout returns a boolean if a field has been set.
func (o *UpdateLoginPasswordPolicies) HasUserLockout() bool {
	if o != nil && !IsNil(o.UserLockout) {
		return true
	}

	return false
}

// SetUserLockout gets a reference to the given UserLockout and assigns it to the UserLockout field.
func (o *UpdateLoginPasswordPolicies) SetUserLockout(v UserLockout) {
	o.UserLockout = &v
}

// GetEnforceLoginPasswordChange returns the EnforceLoginPasswordChange field value if set, zero value otherwise.
// Deprecated
func (o *UpdateLoginPasswordPolicies) GetEnforceLoginPasswordChange() bool {
	if o == nil || IsNil(o.EnforceLoginPasswordChange) {
		var ret bool
		return ret
	}
	return *o.EnforceLoginPasswordChange
}

// GetEnforceLoginPasswordChangeOk returns a tuple with the EnforceLoginPasswordChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *UpdateLoginPasswordPolicies) GetEnforceLoginPasswordChangeOk() (*bool, bool) {
	if o == nil || IsNil(o.EnforceLoginPasswordChange) {
		return nil, false
	}
	return o.EnforceLoginPasswordChange, true
}

// HasEnforceLoginPasswordChange returns a boolean if a field has been set.
func (o *UpdateLoginPasswordPolicies) HasEnforceLoginPasswordChange() bool {
	if o != nil && !IsNil(o.EnforceLoginPasswordChange) {
		return true
	}

	return false
}

// SetEnforceLoginPasswordChange gets a reference to the given bool and assigns it to the EnforceLoginPasswordChange field.
// Deprecated
func (o *UpdateLoginPasswordPolicies) SetEnforceLoginPasswordChange(v bool) {
	o.EnforceLoginPasswordChange = &v
}

func (o UpdateLoginPasswordPolicies) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateLoginPasswordPolicies) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CharacterRules) {
		toSerialize["characterRules"] = o.CharacterRules
	}
	if !IsNil(o.MinLength) {
		toSerialize["minLength"] = o.MinLength
	}
	if !IsNil(o.RejectDictionaryWords) {
		toSerialize["rejectDictionaryWords"] = o.RejectDictionaryWords
	}
	if !IsNil(o.RejectUserInfo) {
		toSerialize["rejectUserInfo"] = o.RejectUserInfo
	}
	if !IsNil(o.RejectKeyboardPatterns) {
		toSerialize["rejectKeyboardPatterns"] = o.RejectKeyboardPatterns
	}
	if !IsNil(o.NumberOfArchivedPasswords) {
		toSerialize["numberOfArchivedPasswords"] = o.NumberOfArchivedPasswords
	}
	if !IsNil(o.PasswordExpiration) {
		toSerialize["passwordExpiration"] = o.PasswordExpiration
	}
	if !IsNil(o.UserLockout) {
		toSerialize["userLockout"] = o.UserLockout
	}
	if !IsNil(o.EnforceLoginPasswordChange) {
		toSerialize["enforceLoginPasswordChange"] = o.EnforceLoginPasswordChange
	}
	return toSerialize, nil
}

type NullableUpdateLoginPasswordPolicies struct {
	value *UpdateLoginPasswordPolicies
	isSet bool
}

func (v NullableUpdateLoginPasswordPolicies) Get() *UpdateLoginPasswordPolicies {
	return v.value
}

func (v *NullableUpdateLoginPasswordPolicies) Set(val *UpdateLoginPasswordPolicies) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateLoginPasswordPolicies) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateLoginPasswordPolicies) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateLoginPasswordPolicies(val *UpdateLoginPasswordPolicies) *NullableUpdateLoginPasswordPolicies {
	return &NullableUpdateLoginPasswordPolicies{value: val, isSet: true}
}

func (v NullableUpdateLoginPasswordPolicies) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateLoginPasswordPolicies) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
