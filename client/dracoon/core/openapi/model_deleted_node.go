/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the DeletedNode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeletedNode{}

// DeletedNode Deleted node information (Deleted node can be a folder or file)
type DeletedNode struct {
	// Node ID
	Id *int64 `json:"id,omitempty"`
	// &#128640; Since v4.37.0  Reference ID. Identical across all versions of a file
	ReferenceId *int64 `json:"referenceId,omitempty"`
	// Parent node ID (room or folder)
	ParentId int64 `json:"parentId"`
	// Parent node path  `/` if node is a root node (room)
	ParentPath string `json:"parentPath"`
	// Node type
	Type string `json:"type"`
	// Node name
	Name string `json:"name"`
	// Expiration date
	ExpireAt *time.Time `json:"expireAt,omitempty"`
	// Last access date
	AccessedAt *time.Time `json:"accessedAt,omitempty"`
	// Encryption state
	IsEncrypted *bool `json:"isEncrypted,omitempty"`
	// User notes
	Notes *string `json:"notes,omitempty"`
	// Node size in byte
	Size *int64 `json:"size,omitempty"`
	// Classification ID:  * `1` - public  * `2` - internal  * `3` - confidential  * `4` - strictly confidential    (default: classification from parent room)
	Classification *int32 `json:"classification,omitempty"`
	// Creation date
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	CreatedBy *UserInfo  `json:"createdBy,omitempty"`
	// Modification date
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	UpdatedBy *UserInfo  `json:"updatedBy,omitempty"`
	// Deletion date
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
	DeletedBy *UserInfo  `json:"deletedBy,omitempty"`
}

type _DeletedNode DeletedNode

// NewDeletedNode instantiates a new DeletedNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeletedNode(parentId int64, parentPath string, type_ string, name string) *DeletedNode {
	this := DeletedNode{}
	this.ParentId = parentId
	this.ParentPath = parentPath
	this.Type = type_
	this.Name = name
	return &this
}

// NewDeletedNodeWithDefaults instantiates a new DeletedNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeletedNodeWithDefaults() *DeletedNode {
	this := DeletedNode{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DeletedNode) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletedNode) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DeletedNode) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *DeletedNode) SetId(v int64) {
	o.Id = &v
}

// GetReferenceId returns the ReferenceId field value if set, zero value otherwise.
func (o *DeletedNode) GetReferenceId() int64 {
	if o == nil || IsNil(o.ReferenceId) {
		var ret int64
		return ret
	}
	return *o.ReferenceId
}

// GetReferenceIdOk returns a tuple with the ReferenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletedNode) GetReferenceIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ReferenceId) {
		return nil, false
	}
	return o.ReferenceId, true
}

// HasReferenceId returns a boolean if a field has been set.
func (o *DeletedNode) HasReferenceId() bool {
	if o != nil && !IsNil(o.ReferenceId) {
		return true
	}

	return false
}

// SetReferenceId gets a reference to the given int64 and assigns it to the ReferenceId field.
func (o *DeletedNode) SetReferenceId(v int64) {
	o.ReferenceId = &v
}

// GetParentId returns the ParentId field value
func (o *DeletedNode) GetParentId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value
// and a boolean to check if the value has been set.
func (o *DeletedNode) GetParentIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParentId, true
}

// SetParentId sets field value
func (o *DeletedNode) SetParentId(v int64) {
	o.ParentId = v
}

// GetParentPath returns the ParentPath field value
func (o *DeletedNode) GetParentPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ParentPath
}

// GetParentPathOk returns a tuple with the ParentPath field value
// and a boolean to check if the value has been set.
func (o *DeletedNode) GetParentPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParentPath, true
}

// SetParentPath sets field value
func (o *DeletedNode) SetParentPath(v string) {
	o.ParentPath = v
}

// GetType returns the Type field value
func (o *DeletedNode) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DeletedNode) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DeletedNode) SetType(v string) {
	o.Type = v
}

// GetName returns the Name field value
func (o *DeletedNode) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DeletedNode) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DeletedNode) SetName(v string) {
	o.Name = v
}

// GetExpireAt returns the ExpireAt field value if set, zero value otherwise.
func (o *DeletedNode) GetExpireAt() time.Time {
	if o == nil || IsNil(o.ExpireAt) {
		var ret time.Time
		return ret
	}
	return *o.ExpireAt
}

// GetExpireAtOk returns a tuple with the ExpireAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletedNode) GetExpireAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpireAt) {
		return nil, false
	}
	return o.ExpireAt, true
}

// HasExpireAt returns a boolean if a field has been set.
func (o *DeletedNode) HasExpireAt() bool {
	if o != nil && !IsNil(o.ExpireAt) {
		return true
	}

	return false
}

// SetExpireAt gets a reference to the given time.Time and assigns it to the ExpireAt field.
func (o *DeletedNode) SetExpireAt(v time.Time) {
	o.ExpireAt = &v
}

// GetAccessedAt returns the AccessedAt field value if set, zero value otherwise.
func (o *DeletedNode) GetAccessedAt() time.Time {
	if o == nil || IsNil(o.AccessedAt) {
		var ret time.Time
		return ret
	}
	return *o.AccessedAt
}

// GetAccessedAtOk returns a tuple with the AccessedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletedNode) GetAccessedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.AccessedAt) {
		return nil, false
	}
	return o.AccessedAt, true
}

// HasAccessedAt returns a boolean if a field has been set.
func (o *DeletedNode) HasAccessedAt() bool {
	if o != nil && !IsNil(o.AccessedAt) {
		return true
	}

	return false
}

// SetAccessedAt gets a reference to the given time.Time and assigns it to the AccessedAt field.
func (o *DeletedNode) SetAccessedAt(v time.Time) {
	o.AccessedAt = &v
}

// GetIsEncrypted returns the IsEncrypted field value if set, zero value otherwise.
func (o *DeletedNode) GetIsEncrypted() bool {
	if o == nil || IsNil(o.IsEncrypted) {
		var ret bool
		return ret
	}
	return *o.IsEncrypted
}

// GetIsEncryptedOk returns a tuple with the IsEncrypted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletedNode) GetIsEncryptedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEncrypted) {
		return nil, false
	}
	return o.IsEncrypted, true
}

// HasIsEncrypted returns a boolean if a field has been set.
func (o *DeletedNode) HasIsEncrypted() bool {
	if o != nil && !IsNil(o.IsEncrypted) {
		return true
	}

	return false
}

// SetIsEncrypted gets a reference to the given bool and assigns it to the IsEncrypted field.
func (o *DeletedNode) SetIsEncrypted(v bool) {
	o.IsEncrypted = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *DeletedNode) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletedNode) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *DeletedNode) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *DeletedNode) SetNotes(v string) {
	o.Notes = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *DeletedNode) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletedNode) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *DeletedNode) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *DeletedNode) SetSize(v int64) {
	o.Size = &v
}

// GetClassification returns the Classification field value if set, zero value otherwise.
func (o *DeletedNode) GetClassification() int32 {
	if o == nil || IsNil(o.Classification) {
		var ret int32
		return ret
	}
	return *o.Classification
}

// GetClassificationOk returns a tuple with the Classification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletedNode) GetClassificationOk() (*int32, bool) {
	if o == nil || IsNil(o.Classification) {
		return nil, false
	}
	return o.Classification, true
}

// HasClassification returns a boolean if a field has been set.
func (o *DeletedNode) HasClassification() bool {
	if o != nil && !IsNil(o.Classification) {
		return true
	}

	return false
}

// SetClassification gets a reference to the given int32 and assigns it to the Classification field.
func (o *DeletedNode) SetClassification(v int32) {
	o.Classification = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *DeletedNode) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletedNode) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *DeletedNode) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *DeletedNode) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *DeletedNode) GetCreatedBy() UserInfo {
	if o == nil || IsNil(o.CreatedBy) {
		var ret UserInfo
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletedNode) GetCreatedByOk() (*UserInfo, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *DeletedNode) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given UserInfo and assigns it to the CreatedBy field.
func (o *DeletedNode) SetCreatedBy(v UserInfo) {
	o.CreatedBy = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *DeletedNode) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletedNode) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *DeletedNode) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *DeletedNode) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *DeletedNode) GetUpdatedBy() UserInfo {
	if o == nil || IsNil(o.UpdatedBy) {
		var ret UserInfo
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletedNode) GetUpdatedByOk() (*UserInfo, bool) {
	if o == nil || IsNil(o.UpdatedBy) {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *DeletedNode) HasUpdatedBy() bool {
	if o != nil && !IsNil(o.UpdatedBy) {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given UserInfo and assigns it to the UpdatedBy field.
func (o *DeletedNode) SetUpdatedBy(v UserInfo) {
	o.UpdatedBy = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *DeletedNode) GetDeletedAt() time.Time {
	if o == nil || IsNil(o.DeletedAt) {
		var ret time.Time
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletedNode) GetDeletedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *DeletedNode) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given time.Time and assigns it to the DeletedAt field.
func (o *DeletedNode) SetDeletedAt(v time.Time) {
	o.DeletedAt = &v
}

// GetDeletedBy returns the DeletedBy field value if set, zero value otherwise.
func (o *DeletedNode) GetDeletedBy() UserInfo {
	if o == nil || IsNil(o.DeletedBy) {
		var ret UserInfo
		return ret
	}
	return *o.DeletedBy
}

// GetDeletedByOk returns a tuple with the DeletedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletedNode) GetDeletedByOk() (*UserInfo, bool) {
	if o == nil || IsNil(o.DeletedBy) {
		return nil, false
	}
	return o.DeletedBy, true
}

// HasDeletedBy returns a boolean if a field has been set.
func (o *DeletedNode) HasDeletedBy() bool {
	if o != nil && !IsNil(o.DeletedBy) {
		return true
	}

	return false
}

// SetDeletedBy gets a reference to the given UserInfo and assigns it to the DeletedBy field.
func (o *DeletedNode) SetDeletedBy(v UserInfo) {
	o.DeletedBy = &v
}

func (o DeletedNode) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeletedNode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ReferenceId) {
		toSerialize["referenceId"] = o.ReferenceId
	}
	toSerialize["parentId"] = o.ParentId
	toSerialize["parentPath"] = o.ParentPath
	toSerialize["type"] = o.Type
	toSerialize["name"] = o.Name
	if !IsNil(o.ExpireAt) {
		toSerialize["expireAt"] = o.ExpireAt
	}
	if !IsNil(o.AccessedAt) {
		toSerialize["accessedAt"] = o.AccessedAt
	}
	if !IsNil(o.IsEncrypted) {
		toSerialize["isEncrypted"] = o.IsEncrypted
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Classification) {
		toSerialize["classification"] = o.Classification
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !IsNil(o.UpdatedBy) {
		toSerialize["updatedBy"] = o.UpdatedBy
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deletedAt"] = o.DeletedAt
	}
	if !IsNil(o.DeletedBy) {
		toSerialize["deletedBy"] = o.DeletedBy
	}
	return toSerialize, nil
}

func (o *DeletedNode) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"parentId",
		"parentPath",
		"type",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeletedNode := _DeletedNode{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeletedNode)

	if err != nil {
		return err
	}

	*o = DeletedNode(varDeletedNode)

	return err
}

type NullableDeletedNode struct {
	value *DeletedNode
	isSet bool
}

func (v NullableDeletedNode) Get() *DeletedNode {
	return v.value
}

func (v *NullableDeletedNode) Set(val *DeletedNode) {
	v.value = val
	v.isSet = true
}

func (v NullableDeletedNode) IsSet() bool {
	return v.isSet
}

func (v *NullableDeletedNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeletedNode(val *DeletedNode) *NullableDeletedNode {
	return &NullableDeletedNode{value: val, isSet: true}
}

func (v NullableDeletedNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeletedNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
