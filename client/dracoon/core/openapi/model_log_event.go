/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the LogEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogEvent{}

// LogEvent Log event information
type LogEvent struct {
	// Event ID
	Id int64 `json:"id"`
	// Event timestamp
	Time time.Time `json:"time"`
	// Unique identifier for the user
	UserId int64 `json:"userId"`
	// Event description
	Message string `json:"message"`
	// Operation type ID
	OperationId *int32 `json:"operationId,omitempty"`
	// Operation name
	OperationName *string `json:"operationName,omitempty"`
	// Operation status:  * `0` - Success  * `2` - Error
	Status *int32 `json:"status,omitempty"`
	// Client
	UserClient *string `json:"userClient,omitempty"`
	// Unique identifier for the customer
	CustomerId *int64 `json:"customerId,omitempty"`
	// Username
	UserName *string `json:"userName,omitempty"`
	// User IP
	UserIp *string `json:"userIp,omitempty"`
	// Auth parent source ID
	AuthParentSource *string `json:"authParentSource,omitempty"`
	// Auth parent target ID
	AuthParentTarget *string `json:"authParentTarget,omitempty"`
	// Object ID 1
	ObjectId1 *int64 `json:"objectId1,omitempty"`
	// Object type 1
	ObjectType1 *int32 `json:"objectType1,omitempty"`
	// Object name 1
	ObjectName1 *string `json:"objectName1,omitempty"`
	// Object ID 2
	ObjectId2 *int64 `json:"objectId2,omitempty"`
	// Object type 2
	ObjectType2 *int32 `json:"objectType2,omitempty"`
	// Object name 2
	ObjectName2 *string `json:"objectName2,omitempty"`
	// Attribute 1
	Attribute1 *string `json:"attribute1,omitempty"`
	// Attribute 2
	Attribute2 *string `json:"attribute2,omitempty"`
	// Attribute 3
	Attribute3 *string `json:"attribute3,omitempty"`
}

type _LogEvent LogEvent

// NewLogEvent instantiates a new LogEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogEvent(id int64, time time.Time, userId int64, message string) *LogEvent {
	this := LogEvent{}
	this.Id = id
	this.Time = time
	this.UserId = userId
	this.Message = message
	return &this
}

// NewLogEventWithDefaults instantiates a new LogEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogEventWithDefaults() *LogEvent {
	this := LogEvent{}
	return &this
}

// GetId returns the Id field value
func (o *LogEvent) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *LogEvent) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *LogEvent) SetId(v int64) {
	o.Id = v
}

// GetTime returns the Time field value
func (o *LogEvent) GetTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Time
}

// GetTimeOk returns a tuple with the Time field value
// and a boolean to check if the value has been set.
func (o *LogEvent) GetTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Time, true
}

// SetTime sets field value
func (o *LogEvent) SetTime(v time.Time) {
	o.Time = v
}

// GetUserId returns the UserId field value
func (o *LogEvent) GetUserId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *LogEvent) GetUserIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *LogEvent) SetUserId(v int64) {
	o.UserId = v
}

// GetMessage returns the Message field value
func (o *LogEvent) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *LogEvent) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *LogEvent) SetMessage(v string) {
	o.Message = v
}

// GetOperationId returns the OperationId field value if set, zero value otherwise.
func (o *LogEvent) GetOperationId() int32 {
	if o == nil || IsNil(o.OperationId) {
		var ret int32
		return ret
	}
	return *o.OperationId
}

// GetOperationIdOk returns a tuple with the OperationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogEvent) GetOperationIdOk() (*int32, bool) {
	if o == nil || IsNil(o.OperationId) {
		return nil, false
	}
	return o.OperationId, true
}

// HasOperationId returns a boolean if a field has been set.
func (o *LogEvent) HasOperationId() bool {
	if o != nil && !IsNil(o.OperationId) {
		return true
	}

	return false
}

// SetOperationId gets a reference to the given int32 and assigns it to the OperationId field.
func (o *LogEvent) SetOperationId(v int32) {
	o.OperationId = &v
}

// GetOperationName returns the OperationName field value if set, zero value otherwise.
func (o *LogEvent) GetOperationName() string {
	if o == nil || IsNil(o.OperationName) {
		var ret string
		return ret
	}
	return *o.OperationName
}

// GetOperationNameOk returns a tuple with the OperationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogEvent) GetOperationNameOk() (*string, bool) {
	if o == nil || IsNil(o.OperationName) {
		return nil, false
	}
	return o.OperationName, true
}

// HasOperationName returns a boolean if a field has been set.
func (o *LogEvent) HasOperationName() bool {
	if o != nil && !IsNil(o.OperationName) {
		return true
	}

	return false
}

// SetOperationName gets a reference to the given string and assigns it to the OperationName field.
func (o *LogEvent) SetOperationName(v string) {
	o.OperationName = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *LogEvent) GetStatus() int32 {
	if o == nil || IsNil(o.Status) {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogEvent) GetStatusOk() (*int32, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *LogEvent) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *LogEvent) SetStatus(v int32) {
	o.Status = &v
}

// GetUserClient returns the UserClient field value if set, zero value otherwise.
func (o *LogEvent) GetUserClient() string {
	if o == nil || IsNil(o.UserClient) {
		var ret string
		return ret
	}
	return *o.UserClient
}

// GetUserClientOk returns a tuple with the UserClient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogEvent) GetUserClientOk() (*string, bool) {
	if o == nil || IsNil(o.UserClient) {
		return nil, false
	}
	return o.UserClient, true
}

// HasUserClient returns a boolean if a field has been set.
func (o *LogEvent) HasUserClient() bool {
	if o != nil && !IsNil(o.UserClient) {
		return true
	}

	return false
}

// SetUserClient gets a reference to the given string and assigns it to the UserClient field.
func (o *LogEvent) SetUserClient(v string) {
	o.UserClient = &v
}

// GetCustomerId returns the CustomerId field value if set, zero value otherwise.
func (o *LogEvent) GetCustomerId() int64 {
	if o == nil || IsNil(o.CustomerId) {
		var ret int64
		return ret
	}
	return *o.CustomerId
}

// GetCustomerIdOk returns a tuple with the CustomerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogEvent) GetCustomerIdOk() (*int64, bool) {
	if o == nil || IsNil(o.CustomerId) {
		return nil, false
	}
	return o.CustomerId, true
}

// HasCustomerId returns a boolean if a field has been set.
func (o *LogEvent) HasCustomerId() bool {
	if o != nil && !IsNil(o.CustomerId) {
		return true
	}

	return false
}

// SetCustomerId gets a reference to the given int64 and assigns it to the CustomerId field.
func (o *LogEvent) SetCustomerId(v int64) {
	o.CustomerId = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *LogEvent) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogEvent) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *LogEvent) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *LogEvent) SetUserName(v string) {
	o.UserName = &v
}

// GetUserIp returns the UserIp field value if set, zero value otherwise.
func (o *LogEvent) GetUserIp() string {
	if o == nil || IsNil(o.UserIp) {
		var ret string
		return ret
	}
	return *o.UserIp
}

// GetUserIpOk returns a tuple with the UserIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogEvent) GetUserIpOk() (*string, bool) {
	if o == nil || IsNil(o.UserIp) {
		return nil, false
	}
	return o.UserIp, true
}

// HasUserIp returns a boolean if a field has been set.
func (o *LogEvent) HasUserIp() bool {
	if o != nil && !IsNil(o.UserIp) {
		return true
	}

	return false
}

// SetUserIp gets a reference to the given string and assigns it to the UserIp field.
func (o *LogEvent) SetUserIp(v string) {
	o.UserIp = &v
}

// GetAuthParentSource returns the AuthParentSource field value if set, zero value otherwise.
func (o *LogEvent) GetAuthParentSource() string {
	if o == nil || IsNil(o.AuthParentSource) {
		var ret string
		return ret
	}
	return *o.AuthParentSource
}

// GetAuthParentSourceOk returns a tuple with the AuthParentSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogEvent) GetAuthParentSourceOk() (*string, bool) {
	if o == nil || IsNil(o.AuthParentSource) {
		return nil, false
	}
	return o.AuthParentSource, true
}

// HasAuthParentSource returns a boolean if a field has been set.
func (o *LogEvent) HasAuthParentSource() bool {
	if o != nil && !IsNil(o.AuthParentSource) {
		return true
	}

	return false
}

// SetAuthParentSource gets a reference to the given string and assigns it to the AuthParentSource field.
func (o *LogEvent) SetAuthParentSource(v string) {
	o.AuthParentSource = &v
}

// GetAuthParentTarget returns the AuthParentTarget field value if set, zero value otherwise.
func (o *LogEvent) GetAuthParentTarget() string {
	if o == nil || IsNil(o.AuthParentTarget) {
		var ret string
		return ret
	}
	return *o.AuthParentTarget
}

// GetAuthParentTargetOk returns a tuple with the AuthParentTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogEvent) GetAuthParentTargetOk() (*string, bool) {
	if o == nil || IsNil(o.AuthParentTarget) {
		return nil, false
	}
	return o.AuthParentTarget, true
}

// HasAuthParentTarget returns a boolean if a field has been set.
func (o *LogEvent) HasAuthParentTarget() bool {
	if o != nil && !IsNil(o.AuthParentTarget) {
		return true
	}

	return false
}

// SetAuthParentTarget gets a reference to the given string and assigns it to the AuthParentTarget field.
func (o *LogEvent) SetAuthParentTarget(v string) {
	o.AuthParentTarget = &v
}

// GetObjectId1 returns the ObjectId1 field value if set, zero value otherwise.
func (o *LogEvent) GetObjectId1() int64 {
	if o == nil || IsNil(o.ObjectId1) {
		var ret int64
		return ret
	}
	return *o.ObjectId1
}

// GetObjectId1Ok returns a tuple with the ObjectId1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogEvent) GetObjectId1Ok() (*int64, bool) {
	if o == nil || IsNil(o.ObjectId1) {
		return nil, false
	}
	return o.ObjectId1, true
}

// HasObjectId1 returns a boolean if a field has been set.
func (o *LogEvent) HasObjectId1() bool {
	if o != nil && !IsNil(o.ObjectId1) {
		return true
	}

	return false
}

// SetObjectId1 gets a reference to the given int64 and assigns it to the ObjectId1 field.
func (o *LogEvent) SetObjectId1(v int64) {
	o.ObjectId1 = &v
}

// GetObjectType1 returns the ObjectType1 field value if set, zero value otherwise.
func (o *LogEvent) GetObjectType1() int32 {
	if o == nil || IsNil(o.ObjectType1) {
		var ret int32
		return ret
	}
	return *o.ObjectType1
}

// GetObjectType1Ok returns a tuple with the ObjectType1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogEvent) GetObjectType1Ok() (*int32, bool) {
	if o == nil || IsNil(o.ObjectType1) {
		return nil, false
	}
	return o.ObjectType1, true
}

// HasObjectType1 returns a boolean if a field has been set.
func (o *LogEvent) HasObjectType1() bool {
	if o != nil && !IsNil(o.ObjectType1) {
		return true
	}

	return false
}

// SetObjectType1 gets a reference to the given int32 and assigns it to the ObjectType1 field.
func (o *LogEvent) SetObjectType1(v int32) {
	o.ObjectType1 = &v
}

// GetObjectName1 returns the ObjectName1 field value if set, zero value otherwise.
func (o *LogEvent) GetObjectName1() string {
	if o == nil || IsNil(o.ObjectName1) {
		var ret string
		return ret
	}
	return *o.ObjectName1
}

// GetObjectName1Ok returns a tuple with the ObjectName1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogEvent) GetObjectName1Ok() (*string, bool) {
	if o == nil || IsNil(o.ObjectName1) {
		return nil, false
	}
	return o.ObjectName1, true
}

// HasObjectName1 returns a boolean if a field has been set.
func (o *LogEvent) HasObjectName1() bool {
	if o != nil && !IsNil(o.ObjectName1) {
		return true
	}

	return false
}

// SetObjectName1 gets a reference to the given string and assigns it to the ObjectName1 field.
func (o *LogEvent) SetObjectName1(v string) {
	o.ObjectName1 = &v
}

// GetObjectId2 returns the ObjectId2 field value if set, zero value otherwise.
func (o *LogEvent) GetObjectId2() int64 {
	if o == nil || IsNil(o.ObjectId2) {
		var ret int64
		return ret
	}
	return *o.ObjectId2
}

// GetObjectId2Ok returns a tuple with the ObjectId2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogEvent) GetObjectId2Ok() (*int64, bool) {
	if o == nil || IsNil(o.ObjectId2) {
		return nil, false
	}
	return o.ObjectId2, true
}

// HasObjectId2 returns a boolean if a field has been set.
func (o *LogEvent) HasObjectId2() bool {
	if o != nil && !IsNil(o.ObjectId2) {
		return true
	}

	return false
}

// SetObjectId2 gets a reference to the given int64 and assigns it to the ObjectId2 field.
func (o *LogEvent) SetObjectId2(v int64) {
	o.ObjectId2 = &v
}

// GetObjectType2 returns the ObjectType2 field value if set, zero value otherwise.
func (o *LogEvent) GetObjectType2() int32 {
	if o == nil || IsNil(o.ObjectType2) {
		var ret int32
		return ret
	}
	return *o.ObjectType2
}

// GetObjectType2Ok returns a tuple with the ObjectType2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogEvent) GetObjectType2Ok() (*int32, bool) {
	if o == nil || IsNil(o.ObjectType2) {
		return nil, false
	}
	return o.ObjectType2, true
}

// HasObjectType2 returns a boolean if a field has been set.
func (o *LogEvent) HasObjectType2() bool {
	if o != nil && !IsNil(o.ObjectType2) {
		return true
	}

	return false
}

// SetObjectType2 gets a reference to the given int32 and assigns it to the ObjectType2 field.
func (o *LogEvent) SetObjectType2(v int32) {
	o.ObjectType2 = &v
}

// GetObjectName2 returns the ObjectName2 field value if set, zero value otherwise.
func (o *LogEvent) GetObjectName2() string {
	if o == nil || IsNil(o.ObjectName2) {
		var ret string
		return ret
	}
	return *o.ObjectName2
}

// GetObjectName2Ok returns a tuple with the ObjectName2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogEvent) GetObjectName2Ok() (*string, bool) {
	if o == nil || IsNil(o.ObjectName2) {
		return nil, false
	}
	return o.ObjectName2, true
}

// HasObjectName2 returns a boolean if a field has been set.
func (o *LogEvent) HasObjectName2() bool {
	if o != nil && !IsNil(o.ObjectName2) {
		return true
	}

	return false
}

// SetObjectName2 gets a reference to the given string and assigns it to the ObjectName2 field.
func (o *LogEvent) SetObjectName2(v string) {
	o.ObjectName2 = &v
}

// GetAttribute1 returns the Attribute1 field value if set, zero value otherwise.
func (o *LogEvent) GetAttribute1() string {
	if o == nil || IsNil(o.Attribute1) {
		var ret string
		return ret
	}
	return *o.Attribute1
}

// GetAttribute1Ok returns a tuple with the Attribute1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogEvent) GetAttribute1Ok() (*string, bool) {
	if o == nil || IsNil(o.Attribute1) {
		return nil, false
	}
	return o.Attribute1, true
}

// HasAttribute1 returns a boolean if a field has been set.
func (o *LogEvent) HasAttribute1() bool {
	if o != nil && !IsNil(o.Attribute1) {
		return true
	}

	return false
}

// SetAttribute1 gets a reference to the given string and assigns it to the Attribute1 field.
func (o *LogEvent) SetAttribute1(v string) {
	o.Attribute1 = &v
}

// GetAttribute2 returns the Attribute2 field value if set, zero value otherwise.
func (o *LogEvent) GetAttribute2() string {
	if o == nil || IsNil(o.Attribute2) {
		var ret string
		return ret
	}
	return *o.Attribute2
}

// GetAttribute2Ok returns a tuple with the Attribute2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogEvent) GetAttribute2Ok() (*string, bool) {
	if o == nil || IsNil(o.Attribute2) {
		return nil, false
	}
	return o.Attribute2, true
}

// HasAttribute2 returns a boolean if a field has been set.
func (o *LogEvent) HasAttribute2() bool {
	if o != nil && !IsNil(o.Attribute2) {
		return true
	}

	return false
}

// SetAttribute2 gets a reference to the given string and assigns it to the Attribute2 field.
func (o *LogEvent) SetAttribute2(v string) {
	o.Attribute2 = &v
}

// GetAttribute3 returns the Attribute3 field value if set, zero value otherwise.
func (o *LogEvent) GetAttribute3() string {
	if o == nil || IsNil(o.Attribute3) {
		var ret string
		return ret
	}
	return *o.Attribute3
}

// GetAttribute3Ok returns a tuple with the Attribute3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogEvent) GetAttribute3Ok() (*string, bool) {
	if o == nil || IsNil(o.Attribute3) {
		return nil, false
	}
	return o.Attribute3, true
}

// HasAttribute3 returns a boolean if a field has been set.
func (o *LogEvent) HasAttribute3() bool {
	if o != nil && !IsNil(o.Attribute3) {
		return true
	}

	return false
}

// SetAttribute3 gets a reference to the given string and assigns it to the Attribute3 field.
func (o *LogEvent) SetAttribute3(v string) {
	o.Attribute3 = &v
}

func (o LogEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["time"] = o.Time
	toSerialize["userId"] = o.UserId
	toSerialize["message"] = o.Message
	if !IsNil(o.OperationId) {
		toSerialize["operationId"] = o.OperationId
	}
	if !IsNil(o.OperationName) {
		toSerialize["operationName"] = o.OperationName
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.UserClient) {
		toSerialize["userClient"] = o.UserClient
	}
	if !IsNil(o.CustomerId) {
		toSerialize["customerId"] = o.CustomerId
	}
	if !IsNil(o.UserName) {
		toSerialize["userName"] = o.UserName
	}
	if !IsNil(o.UserIp) {
		toSerialize["userIp"] = o.UserIp
	}
	if !IsNil(o.AuthParentSource) {
		toSerialize["authParentSource"] = o.AuthParentSource
	}
	if !IsNil(o.AuthParentTarget) {
		toSerialize["authParentTarget"] = o.AuthParentTarget
	}
	if !IsNil(o.ObjectId1) {
		toSerialize["objectId1"] = o.ObjectId1
	}
	if !IsNil(o.ObjectType1) {
		toSerialize["objectType1"] = o.ObjectType1
	}
	if !IsNil(o.ObjectName1) {
		toSerialize["objectName1"] = o.ObjectName1
	}
	if !IsNil(o.ObjectId2) {
		toSerialize["objectId2"] = o.ObjectId2
	}
	if !IsNil(o.ObjectType2) {
		toSerialize["objectType2"] = o.ObjectType2
	}
	if !IsNil(o.ObjectName2) {
		toSerialize["objectName2"] = o.ObjectName2
	}
	if !IsNil(o.Attribute1) {
		toSerialize["attribute1"] = o.Attribute1
	}
	if !IsNil(o.Attribute2) {
		toSerialize["attribute2"] = o.Attribute2
	}
	if !IsNil(o.Attribute3) {
		toSerialize["attribute3"] = o.Attribute3
	}
	return toSerialize, nil
}

func (o *LogEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"time",
		"userId",
		"message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLogEvent := _LogEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLogEvent)

	if err != nil {
		return err
	}

	*o = LogEvent(varLogEvent)

	return err
}

type NullableLogEvent struct {
	value *LogEvent
	isSet bool
}

func (v NullableLogEvent) Get() *LogEvent {
	return v.value
}

func (v *NullableLogEvent) Set(val *LogEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableLogEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableLogEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogEvent(val *LogEvent) *NullableLogEvent {
	return &NullableLogEvent{value: val, isSet: true}
}

func (v NullableLogEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
