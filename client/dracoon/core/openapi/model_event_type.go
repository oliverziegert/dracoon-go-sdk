/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the EventType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventType{}

// EventType Event type information
type EventType struct {
	// ID
	Id int32 `json:"id"`
	// Name
	Name string `json:"name"`
	// Usable as tenant webhook
	UsableTenantWebhook bool `json:"usableTenantWebhook"`
	// Usable as customer admin webhook
	UsableCustomerAdminWebhook bool `json:"usableCustomerAdminWebhook"`
	// Usable as node webhook
	UsableNodeWebhook bool `json:"usableNodeWebhook"`
	// Usable as push notification
	UsablePushNotification bool `json:"usablePushNotification"`
}

type _EventType EventType

// NewEventType instantiates a new EventType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventType(id int32, name string, usableTenantWebhook bool, usableCustomerAdminWebhook bool, usableNodeWebhook bool, usablePushNotification bool) *EventType {
	this := EventType{}
	this.Id = id
	this.Name = name
	this.UsableTenantWebhook = usableTenantWebhook
	this.UsableCustomerAdminWebhook = usableCustomerAdminWebhook
	this.UsableNodeWebhook = usableNodeWebhook
	this.UsablePushNotification = usablePushNotification
	return &this
}

// NewEventTypeWithDefaults instantiates a new EventType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventTypeWithDefaults() *EventType {
	this := EventType{}
	return &this
}

// GetId returns the Id field value
func (o *EventType) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *EventType) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *EventType) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *EventType) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EventType) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EventType) SetName(v string) {
	o.Name = v
}

// GetUsableTenantWebhook returns the UsableTenantWebhook field value
func (o *EventType) GetUsableTenantWebhook() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.UsableTenantWebhook
}

// GetUsableTenantWebhookOk returns a tuple with the UsableTenantWebhook field value
// and a boolean to check if the value has been set.
func (o *EventType) GetUsableTenantWebhookOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UsableTenantWebhook, true
}

// SetUsableTenantWebhook sets field value
func (o *EventType) SetUsableTenantWebhook(v bool) {
	o.UsableTenantWebhook = v
}

// GetUsableCustomerAdminWebhook returns the UsableCustomerAdminWebhook field value
func (o *EventType) GetUsableCustomerAdminWebhook() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.UsableCustomerAdminWebhook
}

// GetUsableCustomerAdminWebhookOk returns a tuple with the UsableCustomerAdminWebhook field value
// and a boolean to check if the value has been set.
func (o *EventType) GetUsableCustomerAdminWebhookOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UsableCustomerAdminWebhook, true
}

// SetUsableCustomerAdminWebhook sets field value
func (o *EventType) SetUsableCustomerAdminWebhook(v bool) {
	o.UsableCustomerAdminWebhook = v
}

// GetUsableNodeWebhook returns the UsableNodeWebhook field value
func (o *EventType) GetUsableNodeWebhook() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.UsableNodeWebhook
}

// GetUsableNodeWebhookOk returns a tuple with the UsableNodeWebhook field value
// and a boolean to check if the value has been set.
func (o *EventType) GetUsableNodeWebhookOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UsableNodeWebhook, true
}

// SetUsableNodeWebhook sets field value
func (o *EventType) SetUsableNodeWebhook(v bool) {
	o.UsableNodeWebhook = v
}

// GetUsablePushNotification returns the UsablePushNotification field value
func (o *EventType) GetUsablePushNotification() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.UsablePushNotification
}

// GetUsablePushNotificationOk returns a tuple with the UsablePushNotification field value
// and a boolean to check if the value has been set.
func (o *EventType) GetUsablePushNotificationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UsablePushNotification, true
}

// SetUsablePushNotification sets field value
func (o *EventType) SetUsablePushNotification(v bool) {
	o.UsablePushNotification = v
}

func (o EventType) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["usableTenantWebhook"] = o.UsableTenantWebhook
	toSerialize["usableCustomerAdminWebhook"] = o.UsableCustomerAdminWebhook
	toSerialize["usableNodeWebhook"] = o.UsableNodeWebhook
	toSerialize["usablePushNotification"] = o.UsablePushNotification
	return toSerialize, nil
}

func (o *EventType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"usableTenantWebhook",
		"usableCustomerAdminWebhook",
		"usableNodeWebhook",
		"usablePushNotification",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventType := _EventType{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEventType)

	if err != nil {
		return err
	}

	*o = EventType(varEventType)

	return err
}

type NullableEventType struct {
	value *EventType
	isSet bool
}

func (v NullableEventType) Get() *EventType {
	return v.value
}

func (v *NullableEventType) Set(val *EventType) {
	v.value = val
	v.isSet = true
}

func (v NullableEventType) IsSet() bool {
	return v.isSet
}

func (v *NullableEventType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventType(val *EventType) *NullableEventType {
	return &NullableEventType{value: val, isSet: true}
}

func (v NullableEventType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
