/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the InfrastructureProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InfrastructureProperties{}

// InfrastructureProperties Infrastructure properties
type InfrastructureProperties struct {
	// Allow sending of share passwords via SMS
	SmsConfigEnabled *bool `json:"smsConfigEnabled,omitempty"`
	// Determines if the media server is enabled
	MediaServerConfigEnabled *bool `json:"mediaServerConfigEnabled,omitempty"`
	// Suggested S3 Region
	S3DefaultRegion *string `json:"s3DefaultRegion,omitempty"`
	// &#128640; Since v4.15.0  Enforce direct upload to S3
	S3EnforceDirectUpload *bool `json:"s3EnforceDirectUpload,omitempty"`
	// &#128640; Since v4.21.0  Determines if the DRACOON Core is deployed in the cloud environment
	IsDracoonCloud *bool `json:"isDracoonCloud,omitempty"`
	// &#128640; Since v4.21.0  Current tenant UUID
	TenantUuid *string `json:"tenantUuid,omitempty"`
}

// NewInfrastructureProperties instantiates a new InfrastructureProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInfrastructureProperties() *InfrastructureProperties {
	this := InfrastructureProperties{}
	return &this
}

// NewInfrastructurePropertiesWithDefaults instantiates a new InfrastructureProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInfrastructurePropertiesWithDefaults() *InfrastructureProperties {
	this := InfrastructureProperties{}
	return &this
}

// GetSmsConfigEnabled returns the SmsConfigEnabled field value if set, zero value otherwise.
func (o *InfrastructureProperties) GetSmsConfigEnabled() bool {
	if o == nil || IsNil(o.SmsConfigEnabled) {
		var ret bool
		return ret
	}
	return *o.SmsConfigEnabled
}

// GetSmsConfigEnabledOk returns a tuple with the SmsConfigEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureProperties) GetSmsConfigEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.SmsConfigEnabled) {
		return nil, false
	}
	return o.SmsConfigEnabled, true
}

// HasSmsConfigEnabled returns a boolean if a field has been set.
func (o *InfrastructureProperties) HasSmsConfigEnabled() bool {
	if o != nil && !IsNil(o.SmsConfigEnabled) {
		return true
	}

	return false
}

// SetSmsConfigEnabled gets a reference to the given bool and assigns it to the SmsConfigEnabled field.
func (o *InfrastructureProperties) SetSmsConfigEnabled(v bool) {
	o.SmsConfigEnabled = &v
}

// GetMediaServerConfigEnabled returns the MediaServerConfigEnabled field value if set, zero value otherwise.
func (o *InfrastructureProperties) GetMediaServerConfigEnabled() bool {
	if o == nil || IsNil(o.MediaServerConfigEnabled) {
		var ret bool
		return ret
	}
	return *o.MediaServerConfigEnabled
}

// GetMediaServerConfigEnabledOk returns a tuple with the MediaServerConfigEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureProperties) GetMediaServerConfigEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.MediaServerConfigEnabled) {
		return nil, false
	}
	return o.MediaServerConfigEnabled, true
}

// HasMediaServerConfigEnabled returns a boolean if a field has been set.
func (o *InfrastructureProperties) HasMediaServerConfigEnabled() bool {
	if o != nil && !IsNil(o.MediaServerConfigEnabled) {
		return true
	}

	return false
}

// SetMediaServerConfigEnabled gets a reference to the given bool and assigns it to the MediaServerConfigEnabled field.
func (o *InfrastructureProperties) SetMediaServerConfigEnabled(v bool) {
	o.MediaServerConfigEnabled = &v
}

// GetS3DefaultRegion returns the S3DefaultRegion field value if set, zero value otherwise.
func (o *InfrastructureProperties) GetS3DefaultRegion() string {
	if o == nil || IsNil(o.S3DefaultRegion) {
		var ret string
		return ret
	}
	return *o.S3DefaultRegion
}

// GetS3DefaultRegionOk returns a tuple with the S3DefaultRegion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureProperties) GetS3DefaultRegionOk() (*string, bool) {
	if o == nil || IsNil(o.S3DefaultRegion) {
		return nil, false
	}
	return o.S3DefaultRegion, true
}

// HasS3DefaultRegion returns a boolean if a field has been set.
func (o *InfrastructureProperties) HasS3DefaultRegion() bool {
	if o != nil && !IsNil(o.S3DefaultRegion) {
		return true
	}

	return false
}

// SetS3DefaultRegion gets a reference to the given string and assigns it to the S3DefaultRegion field.
func (o *InfrastructureProperties) SetS3DefaultRegion(v string) {
	o.S3DefaultRegion = &v
}

// GetS3EnforceDirectUpload returns the S3EnforceDirectUpload field value if set, zero value otherwise.
func (o *InfrastructureProperties) GetS3EnforceDirectUpload() bool {
	if o == nil || IsNil(o.S3EnforceDirectUpload) {
		var ret bool
		return ret
	}
	return *o.S3EnforceDirectUpload
}

// GetS3EnforceDirectUploadOk returns a tuple with the S3EnforceDirectUpload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureProperties) GetS3EnforceDirectUploadOk() (*bool, bool) {
	if o == nil || IsNil(o.S3EnforceDirectUpload) {
		return nil, false
	}
	return o.S3EnforceDirectUpload, true
}

// HasS3EnforceDirectUpload returns a boolean if a field has been set.
func (o *InfrastructureProperties) HasS3EnforceDirectUpload() bool {
	if o != nil && !IsNil(o.S3EnforceDirectUpload) {
		return true
	}

	return false
}

// SetS3EnforceDirectUpload gets a reference to the given bool and assigns it to the S3EnforceDirectUpload field.
func (o *InfrastructureProperties) SetS3EnforceDirectUpload(v bool) {
	o.S3EnforceDirectUpload = &v
}

// GetIsDracoonCloud returns the IsDracoonCloud field value if set, zero value otherwise.
func (o *InfrastructureProperties) GetIsDracoonCloud() bool {
	if o == nil || IsNil(o.IsDracoonCloud) {
		var ret bool
		return ret
	}
	return *o.IsDracoonCloud
}

// GetIsDracoonCloudOk returns a tuple with the IsDracoonCloud field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureProperties) GetIsDracoonCloudOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDracoonCloud) {
		return nil, false
	}
	return o.IsDracoonCloud, true
}

// HasIsDracoonCloud returns a boolean if a field has been set.
func (o *InfrastructureProperties) HasIsDracoonCloud() bool {
	if o != nil && !IsNil(o.IsDracoonCloud) {
		return true
	}

	return false
}

// SetIsDracoonCloud gets a reference to the given bool and assigns it to the IsDracoonCloud field.
func (o *InfrastructureProperties) SetIsDracoonCloud(v bool) {
	o.IsDracoonCloud = &v
}

// GetTenantUuid returns the TenantUuid field value if set, zero value otherwise.
func (o *InfrastructureProperties) GetTenantUuid() string {
	if o == nil || IsNil(o.TenantUuid) {
		var ret string
		return ret
	}
	return *o.TenantUuid
}

// GetTenantUuidOk returns a tuple with the TenantUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureProperties) GetTenantUuidOk() (*string, bool) {
	if o == nil || IsNil(o.TenantUuid) {
		return nil, false
	}
	return o.TenantUuid, true
}

// HasTenantUuid returns a boolean if a field has been set.
func (o *InfrastructureProperties) HasTenantUuid() bool {
	if o != nil && !IsNil(o.TenantUuid) {
		return true
	}

	return false
}

// SetTenantUuid gets a reference to the given string and assigns it to the TenantUuid field.
func (o *InfrastructureProperties) SetTenantUuid(v string) {
	o.TenantUuid = &v
}

func (o InfrastructureProperties) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InfrastructureProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SmsConfigEnabled) {
		toSerialize["smsConfigEnabled"] = o.SmsConfigEnabled
	}
	if !IsNil(o.MediaServerConfigEnabled) {
		toSerialize["mediaServerConfigEnabled"] = o.MediaServerConfigEnabled
	}
	if !IsNil(o.S3DefaultRegion) {
		toSerialize["s3DefaultRegion"] = o.S3DefaultRegion
	}
	if !IsNil(o.S3EnforceDirectUpload) {
		toSerialize["s3EnforceDirectUpload"] = o.S3EnforceDirectUpload
	}
	if !IsNil(o.IsDracoonCloud) {
		toSerialize["isDracoonCloud"] = o.IsDracoonCloud
	}
	if !IsNil(o.TenantUuid) {
		toSerialize["tenantUuid"] = o.TenantUuid
	}
	return toSerialize, nil
}

type NullableInfrastructureProperties struct {
	value *InfrastructureProperties
	isSet bool
}

func (v NullableInfrastructureProperties) Get() *InfrastructureProperties {
	return v.value
}

func (v *NullableInfrastructureProperties) Set(val *InfrastructureProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableInfrastructureProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableInfrastructureProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInfrastructureProperties(val *InfrastructureProperties) *NullableInfrastructureProperties {
	return &NullableInfrastructureProperties{value: val, isSet: true}
}

func (v NullableInfrastructureProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInfrastructureProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
