/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the PublicUploadShare type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicUploadShare{}

// PublicUploadShare Upload Share information
type PublicUploadShare struct {
	// Is share protected by password
	IsProtected bool `json:"isProtected"`
	// Creation date
	CreatedAt time.Time `json:"createdAt"`
	// Share display name (alias name)
	Name *string `json:"name,omitempty"`
	// Encryption state
	IsEncrypted *bool `json:"isEncrypted,omitempty"`
	// Expiration date
	ExpireAt *time.Time `json:"expireAt,omitempty"`
	// User notes
	Notes *string `json:"notes,omitempty"`
	// List of (public) uploaded files
	UploadedFiles         []PublicUploadedFileData `json:"uploadedFiles,omitempty"`
	UserUserPublicKeyList *UserUserPublicKeyList   `json:"userUserPublicKeyList,omitempty"`
	// Allow display of already uploaded files
	ShowUploadedFiles *bool `json:"showUploadedFiles,omitempty"`
	// Remaining size
	RemainingSize *int64 `json:"remainingSize,omitempty"`
	// Remaining slots
	RemainingSlots *int32 `json:"remainingSlots,omitempty"`
	// &#128640; Since v4.11.0  Creator name
	CreatorName string `json:"creatorName"`
	// &#128640; Since v4.11.0  Creator username
	CreatorUsername *string `json:"creatorUsername,omitempty"`
}

type _PublicUploadShare PublicUploadShare

// NewPublicUploadShare instantiates a new PublicUploadShare object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicUploadShare(isProtected bool, createdAt time.Time, creatorName string) *PublicUploadShare {
	this := PublicUploadShare{}
	this.IsProtected = isProtected
	this.CreatedAt = createdAt
	this.CreatorName = creatorName
	return &this
}

// NewPublicUploadShareWithDefaults instantiates a new PublicUploadShare object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicUploadShareWithDefaults() *PublicUploadShare {
	this := PublicUploadShare{}
	return &this
}

// GetIsProtected returns the IsProtected field value
func (o *PublicUploadShare) GetIsProtected() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsProtected
}

// GetIsProtectedOk returns a tuple with the IsProtected field value
// and a boolean to check if the value has been set.
func (o *PublicUploadShare) GetIsProtectedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsProtected, true
}

// SetIsProtected sets field value
func (o *PublicUploadShare) SetIsProtected(v bool) {
	o.IsProtected = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *PublicUploadShare) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *PublicUploadShare) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *PublicUploadShare) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PublicUploadShare) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicUploadShare) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PublicUploadShare) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PublicUploadShare) SetName(v string) {
	o.Name = &v
}

// GetIsEncrypted returns the IsEncrypted field value if set, zero value otherwise.
func (o *PublicUploadShare) GetIsEncrypted() bool {
	if o == nil || IsNil(o.IsEncrypted) {
		var ret bool
		return ret
	}
	return *o.IsEncrypted
}

// GetIsEncryptedOk returns a tuple with the IsEncrypted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicUploadShare) GetIsEncryptedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEncrypted) {
		return nil, false
	}
	return o.IsEncrypted, true
}

// HasIsEncrypted returns a boolean if a field has been set.
func (o *PublicUploadShare) HasIsEncrypted() bool {
	if o != nil && !IsNil(o.IsEncrypted) {
		return true
	}

	return false
}

// SetIsEncrypted gets a reference to the given bool and assigns it to the IsEncrypted field.
func (o *PublicUploadShare) SetIsEncrypted(v bool) {
	o.IsEncrypted = &v
}

// GetExpireAt returns the ExpireAt field value if set, zero value otherwise.
func (o *PublicUploadShare) GetExpireAt() time.Time {
	if o == nil || IsNil(o.ExpireAt) {
		var ret time.Time
		return ret
	}
	return *o.ExpireAt
}

// GetExpireAtOk returns a tuple with the ExpireAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicUploadShare) GetExpireAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpireAt) {
		return nil, false
	}
	return o.ExpireAt, true
}

// HasExpireAt returns a boolean if a field has been set.
func (o *PublicUploadShare) HasExpireAt() bool {
	if o != nil && !IsNil(o.ExpireAt) {
		return true
	}

	return false
}

// SetExpireAt gets a reference to the given time.Time and assigns it to the ExpireAt field.
func (o *PublicUploadShare) SetExpireAt(v time.Time) {
	o.ExpireAt = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *PublicUploadShare) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicUploadShare) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *PublicUploadShare) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *PublicUploadShare) SetNotes(v string) {
	o.Notes = &v
}

// GetUploadedFiles returns the UploadedFiles field value if set, zero value otherwise.
func (o *PublicUploadShare) GetUploadedFiles() []PublicUploadedFileData {
	if o == nil || IsNil(o.UploadedFiles) {
		var ret []PublicUploadedFileData
		return ret
	}
	return o.UploadedFiles
}

// GetUploadedFilesOk returns a tuple with the UploadedFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicUploadShare) GetUploadedFilesOk() ([]PublicUploadedFileData, bool) {
	if o == nil || IsNil(o.UploadedFiles) {
		return nil, false
	}
	return o.UploadedFiles, true
}

// HasUploadedFiles returns a boolean if a field has been set.
func (o *PublicUploadShare) HasUploadedFiles() bool {
	if o != nil && !IsNil(o.UploadedFiles) {
		return true
	}

	return false
}

// SetUploadedFiles gets a reference to the given []PublicUploadedFileData and assigns it to the UploadedFiles field.
func (o *PublicUploadShare) SetUploadedFiles(v []PublicUploadedFileData) {
	o.UploadedFiles = v
}

// GetUserUserPublicKeyList returns the UserUserPublicKeyList field value if set, zero value otherwise.
func (o *PublicUploadShare) GetUserUserPublicKeyList() UserUserPublicKeyList {
	if o == nil || IsNil(o.UserUserPublicKeyList) {
		var ret UserUserPublicKeyList
		return ret
	}
	return *o.UserUserPublicKeyList
}

// GetUserUserPublicKeyListOk returns a tuple with the UserUserPublicKeyList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicUploadShare) GetUserUserPublicKeyListOk() (*UserUserPublicKeyList, bool) {
	if o == nil || IsNil(o.UserUserPublicKeyList) {
		return nil, false
	}
	return o.UserUserPublicKeyList, true
}

// HasUserUserPublicKeyList returns a boolean if a field has been set.
func (o *PublicUploadShare) HasUserUserPublicKeyList() bool {
	if o != nil && !IsNil(o.UserUserPublicKeyList) {
		return true
	}

	return false
}

// SetUserUserPublicKeyList gets a reference to the given UserUserPublicKeyList and assigns it to the UserUserPublicKeyList field.
func (o *PublicUploadShare) SetUserUserPublicKeyList(v UserUserPublicKeyList) {
	o.UserUserPublicKeyList = &v
}

// GetShowUploadedFiles returns the ShowUploadedFiles field value if set, zero value otherwise.
func (o *PublicUploadShare) GetShowUploadedFiles() bool {
	if o == nil || IsNil(o.ShowUploadedFiles) {
		var ret bool
		return ret
	}
	return *o.ShowUploadedFiles
}

// GetShowUploadedFilesOk returns a tuple with the ShowUploadedFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicUploadShare) GetShowUploadedFilesOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowUploadedFiles) {
		return nil, false
	}
	return o.ShowUploadedFiles, true
}

// HasShowUploadedFiles returns a boolean if a field has been set.
func (o *PublicUploadShare) HasShowUploadedFiles() bool {
	if o != nil && !IsNil(o.ShowUploadedFiles) {
		return true
	}

	return false
}

// SetShowUploadedFiles gets a reference to the given bool and assigns it to the ShowUploadedFiles field.
func (o *PublicUploadShare) SetShowUploadedFiles(v bool) {
	o.ShowUploadedFiles = &v
}

// GetRemainingSize returns the RemainingSize field value if set, zero value otherwise.
func (o *PublicUploadShare) GetRemainingSize() int64 {
	if o == nil || IsNil(o.RemainingSize) {
		var ret int64
		return ret
	}
	return *o.RemainingSize
}

// GetRemainingSizeOk returns a tuple with the RemainingSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicUploadShare) GetRemainingSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.RemainingSize) {
		return nil, false
	}
	return o.RemainingSize, true
}

// HasRemainingSize returns a boolean if a field has been set.
func (o *PublicUploadShare) HasRemainingSize() bool {
	if o != nil && !IsNil(o.RemainingSize) {
		return true
	}

	return false
}

// SetRemainingSize gets a reference to the given int64 and assigns it to the RemainingSize field.
func (o *PublicUploadShare) SetRemainingSize(v int64) {
	o.RemainingSize = &v
}

// GetRemainingSlots returns the RemainingSlots field value if set, zero value otherwise.
func (o *PublicUploadShare) GetRemainingSlots() int32 {
	if o == nil || IsNil(o.RemainingSlots) {
		var ret int32
		return ret
	}
	return *o.RemainingSlots
}

// GetRemainingSlotsOk returns a tuple with the RemainingSlots field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicUploadShare) GetRemainingSlotsOk() (*int32, bool) {
	if o == nil || IsNil(o.RemainingSlots) {
		return nil, false
	}
	return o.RemainingSlots, true
}

// HasRemainingSlots returns a boolean if a field has been set.
func (o *PublicUploadShare) HasRemainingSlots() bool {
	if o != nil && !IsNil(o.RemainingSlots) {
		return true
	}

	return false
}

// SetRemainingSlots gets a reference to the given int32 and assigns it to the RemainingSlots field.
func (o *PublicUploadShare) SetRemainingSlots(v int32) {
	o.RemainingSlots = &v
}

// GetCreatorName returns the CreatorName field value
func (o *PublicUploadShare) GetCreatorName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatorName
}

// GetCreatorNameOk returns a tuple with the CreatorName field value
// and a boolean to check if the value has been set.
func (o *PublicUploadShare) GetCreatorNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatorName, true
}

// SetCreatorName sets field value
func (o *PublicUploadShare) SetCreatorName(v string) {
	o.CreatorName = v
}

// GetCreatorUsername returns the CreatorUsername field value if set, zero value otherwise.
func (o *PublicUploadShare) GetCreatorUsername() string {
	if o == nil || IsNil(o.CreatorUsername) {
		var ret string
		return ret
	}
	return *o.CreatorUsername
}

// GetCreatorUsernameOk returns a tuple with the CreatorUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicUploadShare) GetCreatorUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.CreatorUsername) {
		return nil, false
	}
	return o.CreatorUsername, true
}

// HasCreatorUsername returns a boolean if a field has been set.
func (o *PublicUploadShare) HasCreatorUsername() bool {
	if o != nil && !IsNil(o.CreatorUsername) {
		return true
	}

	return false
}

// SetCreatorUsername gets a reference to the given string and assigns it to the CreatorUsername field.
func (o *PublicUploadShare) SetCreatorUsername(v string) {
	o.CreatorUsername = &v
}

func (o PublicUploadShare) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicUploadShare) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["isProtected"] = o.IsProtected
	toSerialize["createdAt"] = o.CreatedAt
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.IsEncrypted) {
		toSerialize["isEncrypted"] = o.IsEncrypted
	}
	if !IsNil(o.ExpireAt) {
		toSerialize["expireAt"] = o.ExpireAt
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.UploadedFiles) {
		toSerialize["uploadedFiles"] = o.UploadedFiles
	}
	if !IsNil(o.UserUserPublicKeyList) {
		toSerialize["userUserPublicKeyList"] = o.UserUserPublicKeyList
	}
	if !IsNil(o.ShowUploadedFiles) {
		toSerialize["showUploadedFiles"] = o.ShowUploadedFiles
	}
	if !IsNil(o.RemainingSize) {
		toSerialize["remainingSize"] = o.RemainingSize
	}
	if !IsNil(o.RemainingSlots) {
		toSerialize["remainingSlots"] = o.RemainingSlots
	}
	toSerialize["creatorName"] = o.CreatorName
	if !IsNil(o.CreatorUsername) {
		toSerialize["creatorUsername"] = o.CreatorUsername
	}
	return toSerialize, nil
}

func (o *PublicUploadShare) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"isProtected",
		"createdAt",
		"creatorName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicUploadShare := _PublicUploadShare{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicUploadShare)

	if err != nil {
		return err
	}

	*o = PublicUploadShare(varPublicUploadShare)

	return err
}

type NullablePublicUploadShare struct {
	value *PublicUploadShare
	isSet bool
}

func (v NullablePublicUploadShare) Get() *PublicUploadShare {
	return v.value
}

func (v *NullablePublicUploadShare) Set(val *PublicUploadShare) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicUploadShare) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicUploadShare) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicUploadShare(val *PublicUploadShare) *NullablePublicUploadShare {
	return &NullablePublicUploadShare{value: val, isSet: true}
}

func (v NullablePublicUploadShare) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicUploadShare) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
