/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the NotificationChannelActivationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationChannelActivationRequest{}

// NotificationChannelActivationRequest Request model for switching notification channel status
type NotificationChannelActivationRequest struct {
	// Channel ID
	ChannelId int32 `json:"channelId"`
	// Determines whether channel is enabled
	IsEnabled bool `json:"isEnabled"`
}

type _NotificationChannelActivationRequest NotificationChannelActivationRequest

// NewNotificationChannelActivationRequest instantiates a new NotificationChannelActivationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationChannelActivationRequest(channelId int32, isEnabled bool) *NotificationChannelActivationRequest {
	this := NotificationChannelActivationRequest{}
	this.ChannelId = channelId
	this.IsEnabled = isEnabled
	return &this
}

// NewNotificationChannelActivationRequestWithDefaults instantiates a new NotificationChannelActivationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationChannelActivationRequestWithDefaults() *NotificationChannelActivationRequest {
	this := NotificationChannelActivationRequest{}
	return &this
}

// GetChannelId returns the ChannelId field value
func (o *NotificationChannelActivationRequest) GetChannelId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ChannelId
}

// GetChannelIdOk returns a tuple with the ChannelId field value
// and a boolean to check if the value has been set.
func (o *NotificationChannelActivationRequest) GetChannelIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChannelId, true
}

// SetChannelId sets field value
func (o *NotificationChannelActivationRequest) SetChannelId(v int32) {
	o.ChannelId = v
}

// GetIsEnabled returns the IsEnabled field value
func (o *NotificationChannelActivationRequest) GetIsEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value
// and a boolean to check if the value has been set.
func (o *NotificationChannelActivationRequest) GetIsEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsEnabled, true
}

// SetIsEnabled sets field value
func (o *NotificationChannelActivationRequest) SetIsEnabled(v bool) {
	o.IsEnabled = v
}

func (o NotificationChannelActivationRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationChannelActivationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["channelId"] = o.ChannelId
	toSerialize["isEnabled"] = o.IsEnabled
	return toSerialize, nil
}

func (o *NotificationChannelActivationRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"channelId",
		"isEnabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNotificationChannelActivationRequest := _NotificationChannelActivationRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNotificationChannelActivationRequest)

	if err != nil {
		return err
	}

	*o = NotificationChannelActivationRequest(varNotificationChannelActivationRequest)

	return err
}

type NullableNotificationChannelActivationRequest struct {
	value *NotificationChannelActivationRequest
	isSet bool
}

func (v NullableNotificationChannelActivationRequest) Get() *NotificationChannelActivationRequest {
	return v.value
}

func (v *NullableNotificationChannelActivationRequest) Set(val *NotificationChannelActivationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationChannelActivationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationChannelActivationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationChannelActivationRequest(val *NotificationChannelActivationRequest) *NullableNotificationChannelActivationRequest {
	return &NullableNotificationChannelActivationRequest{value: val, isSet: true}
}

func (v NullableNotificationChannelActivationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationChannelActivationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
