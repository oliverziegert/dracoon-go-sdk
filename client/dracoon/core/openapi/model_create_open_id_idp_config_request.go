/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateOpenIdIdpConfigRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateOpenIdIdpConfigRequest{}

// CreateOpenIdIdpConfigRequest Request model for creating an OpenID Connect IDP configuration
type CreateOpenIdIdpConfigRequest struct {
	// Name of the IDP
	Name string `json:"name"`
	// Issuer identifier of the IDP  The value is a case sensitive URL.
	Issuer string `json:"issuer"`
	// URL of the authorization endpoint
	AuthorizationEndPointUrl string `json:"authorizationEndPointUrl"`
	// URL of the token endpoint
	TokenEndPointUrl string `json:"tokenEndPointUrl"`
	// URL of the user info endpoint
	UserInfoEndPointUrl string `json:"userInfoEndPointUrl"`
	// URL of the JWKS endpoint
	JwksEndPointUrl string `json:"jwksEndPointUrl"`
	// ID of the OpenID client
	ClientId string `json:"clientId"`
	// Secret, which client uses at authentication.
	ClientSecret string `json:"clientSecret"`
	// List of requested scopes
	Scopes []string `json:"scopes"`
	// URIs, to which a user is redirected after authorization.
	RedirectUris []string `json:"redirectUris"`
	// Name of the claim which is used for the user mapping.
	MappingClaim string `json:"mappingClaim"`
	// &#128640; Since v4.11.0  Flow, which is used at authentication
	Flow *string `json:"flow,omitempty"`
	// Determines whether PKCE is enabled.  cf. [RFC 7636](https://tools.ietf.org/html/rfc7636)
	PkceEnabled *bool `json:"pkceEnabled,omitempty"`
	// PKCE code challenge method.  cf. [RFC 7636](https://tools.ietf.org/html/rfc7636)
	PkceChallengeMethod *string `json:"pkceChallengeMethod,omitempty"`
	// Name of the claim which is used for the user mapping fallback.
	FallbackMappingClaim *string `json:"fallbackMappingClaim,omitempty"`
	// &#128640; Since v4.23.0  Source, which is used to get user information at the import or update of a user.
	UserInfoSource *string `json:"userInfoSource,omitempty"`
	// Determines if a DRACOON account is automatically created for a new user  who successfully logs on with his / her AD / IDP account.
	UserImportEnabled *bool `json:"userImportEnabled,omitempty"`
	// User group that is assigned to users who are created by automatic import.  Reset with `0`
	UserImportGroup *int64 `json:"userImportGroup,omitempty"`
	// Determines if the DRACOON account is updated with data from AD / IDP.  For OpenID Connect, the scopes `email` and `profile` are needed.
	UserUpdateEnabled *bool `json:"userUpdateEnabled,omitempty"`
	// URL of the user management UI.  Use empty string to remove.
	UserManagementUrl *string `json:"userManagementUrl,omitempty"`
}

type _CreateOpenIdIdpConfigRequest CreateOpenIdIdpConfigRequest

// NewCreateOpenIdIdpConfigRequest instantiates a new CreateOpenIdIdpConfigRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateOpenIdIdpConfigRequest(name string, issuer string, authorizationEndPointUrl string, tokenEndPointUrl string, userInfoEndPointUrl string, jwksEndPointUrl string, clientId string, clientSecret string, scopes []string, redirectUris []string, mappingClaim string) *CreateOpenIdIdpConfigRequest {
	this := CreateOpenIdIdpConfigRequest{}
	this.Name = name
	this.Issuer = issuer
	this.AuthorizationEndPointUrl = authorizationEndPointUrl
	this.TokenEndPointUrl = tokenEndPointUrl
	this.UserInfoEndPointUrl = userInfoEndPointUrl
	this.JwksEndPointUrl = jwksEndPointUrl
	this.ClientId = clientId
	this.ClientSecret = clientSecret
	this.Scopes = scopes
	this.RedirectUris = redirectUris
	this.MappingClaim = mappingClaim
	var pkceEnabled bool = false
	this.PkceEnabled = &pkceEnabled
	var pkceChallengeMethod string = "plain"
	this.PkceChallengeMethod = &pkceChallengeMethod
	var userImportEnabled bool = false
	this.UserImportEnabled = &userImportEnabled
	var userUpdateEnabled bool = false
	this.UserUpdateEnabled = &userUpdateEnabled
	return &this
}

// NewCreateOpenIdIdpConfigRequestWithDefaults instantiates a new CreateOpenIdIdpConfigRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateOpenIdIdpConfigRequestWithDefaults() *CreateOpenIdIdpConfigRequest {
	this := CreateOpenIdIdpConfigRequest{}
	var pkceEnabled bool = false
	this.PkceEnabled = &pkceEnabled
	var pkceChallengeMethod string = "plain"
	this.PkceChallengeMethod = &pkceChallengeMethod
	var userImportEnabled bool = false
	this.UserImportEnabled = &userImportEnabled
	var userUpdateEnabled bool = false
	this.UserUpdateEnabled = &userUpdateEnabled
	return &this
}

// GetName returns the Name field value
func (o *CreateOpenIdIdpConfigRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateOpenIdIdpConfigRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateOpenIdIdpConfigRequest) SetName(v string) {
	o.Name = v
}

// GetIssuer returns the Issuer field value
func (o *CreateOpenIdIdpConfigRequest) GetIssuer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Issuer
}

// GetIssuerOk returns a tuple with the Issuer field value
// and a boolean to check if the value has been set.
func (o *CreateOpenIdIdpConfigRequest) GetIssuerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Issuer, true
}

// SetIssuer sets field value
func (o *CreateOpenIdIdpConfigRequest) SetIssuer(v string) {
	o.Issuer = v
}

// GetAuthorizationEndPointUrl returns the AuthorizationEndPointUrl field value
func (o *CreateOpenIdIdpConfigRequest) GetAuthorizationEndPointUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuthorizationEndPointUrl
}

// GetAuthorizationEndPointUrlOk returns a tuple with the AuthorizationEndPointUrl field value
// and a boolean to check if the value has been set.
func (o *CreateOpenIdIdpConfigRequest) GetAuthorizationEndPointUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthorizationEndPointUrl, true
}

// SetAuthorizationEndPointUrl sets field value
func (o *CreateOpenIdIdpConfigRequest) SetAuthorizationEndPointUrl(v string) {
	o.AuthorizationEndPointUrl = v
}

// GetTokenEndPointUrl returns the TokenEndPointUrl field value
func (o *CreateOpenIdIdpConfigRequest) GetTokenEndPointUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenEndPointUrl
}

// GetTokenEndPointUrlOk returns a tuple with the TokenEndPointUrl field value
// and a boolean to check if the value has been set.
func (o *CreateOpenIdIdpConfigRequest) GetTokenEndPointUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenEndPointUrl, true
}

// SetTokenEndPointUrl sets field value
func (o *CreateOpenIdIdpConfigRequest) SetTokenEndPointUrl(v string) {
	o.TokenEndPointUrl = v
}

// GetUserInfoEndPointUrl returns the UserInfoEndPointUrl field value
func (o *CreateOpenIdIdpConfigRequest) GetUserInfoEndPointUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserInfoEndPointUrl
}

// GetUserInfoEndPointUrlOk returns a tuple with the UserInfoEndPointUrl field value
// and a boolean to check if the value has been set.
func (o *CreateOpenIdIdpConfigRequest) GetUserInfoEndPointUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserInfoEndPointUrl, true
}

// SetUserInfoEndPointUrl sets field value
func (o *CreateOpenIdIdpConfigRequest) SetUserInfoEndPointUrl(v string) {
	o.UserInfoEndPointUrl = v
}

// GetJwksEndPointUrl returns the JwksEndPointUrl field value
func (o *CreateOpenIdIdpConfigRequest) GetJwksEndPointUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.JwksEndPointUrl
}

// GetJwksEndPointUrlOk returns a tuple with the JwksEndPointUrl field value
// and a boolean to check if the value has been set.
func (o *CreateOpenIdIdpConfigRequest) GetJwksEndPointUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JwksEndPointUrl, true
}

// SetJwksEndPointUrl sets field value
func (o *CreateOpenIdIdpConfigRequest) SetJwksEndPointUrl(v string) {
	o.JwksEndPointUrl = v
}

// GetClientId returns the ClientId field value
func (o *CreateOpenIdIdpConfigRequest) GetClientId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value
// and a boolean to check if the value has been set.
func (o *CreateOpenIdIdpConfigRequest) GetClientIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientId, true
}

// SetClientId sets field value
func (o *CreateOpenIdIdpConfigRequest) SetClientId(v string) {
	o.ClientId = v
}

// GetClientSecret returns the ClientSecret field value
func (o *CreateOpenIdIdpConfigRequest) GetClientSecret() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientSecret
}

// GetClientSecretOk returns a tuple with the ClientSecret field value
// and a boolean to check if the value has been set.
func (o *CreateOpenIdIdpConfigRequest) GetClientSecretOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientSecret, true
}

// SetClientSecret sets field value
func (o *CreateOpenIdIdpConfigRequest) SetClientSecret(v string) {
	o.ClientSecret = v
}

// GetScopes returns the Scopes field value
func (o *CreateOpenIdIdpConfigRequest) GetScopes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value
// and a boolean to check if the value has been set.
func (o *CreateOpenIdIdpConfigRequest) GetScopesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Scopes, true
}

// SetScopes sets field value
func (o *CreateOpenIdIdpConfigRequest) SetScopes(v []string) {
	o.Scopes = v
}

// GetRedirectUris returns the RedirectUris field value
func (o *CreateOpenIdIdpConfigRequest) GetRedirectUris() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.RedirectUris
}

// GetRedirectUrisOk returns a tuple with the RedirectUris field value
// and a boolean to check if the value has been set.
func (o *CreateOpenIdIdpConfigRequest) GetRedirectUrisOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RedirectUris, true
}

// SetRedirectUris sets field value
func (o *CreateOpenIdIdpConfigRequest) SetRedirectUris(v []string) {
	o.RedirectUris = v
}

// GetMappingClaim returns the MappingClaim field value
func (o *CreateOpenIdIdpConfigRequest) GetMappingClaim() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MappingClaim
}

// GetMappingClaimOk returns a tuple with the MappingClaim field value
// and a boolean to check if the value has been set.
func (o *CreateOpenIdIdpConfigRequest) GetMappingClaimOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MappingClaim, true
}

// SetMappingClaim sets field value
func (o *CreateOpenIdIdpConfigRequest) SetMappingClaim(v string) {
	o.MappingClaim = v
}

// GetFlow returns the Flow field value if set, zero value otherwise.
func (o *CreateOpenIdIdpConfigRequest) GetFlow() string {
	if o == nil || IsNil(o.Flow) {
		var ret string
		return ret
	}
	return *o.Flow
}

// GetFlowOk returns a tuple with the Flow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOpenIdIdpConfigRequest) GetFlowOk() (*string, bool) {
	if o == nil || IsNil(o.Flow) {
		return nil, false
	}
	return o.Flow, true
}

// HasFlow returns a boolean if a field has been set.
func (o *CreateOpenIdIdpConfigRequest) HasFlow() bool {
	if o != nil && !IsNil(o.Flow) {
		return true
	}

	return false
}

// SetFlow gets a reference to the given string and assigns it to the Flow field.
func (o *CreateOpenIdIdpConfigRequest) SetFlow(v string) {
	o.Flow = &v
}

// GetPkceEnabled returns the PkceEnabled field value if set, zero value otherwise.
func (o *CreateOpenIdIdpConfigRequest) GetPkceEnabled() bool {
	if o == nil || IsNil(o.PkceEnabled) {
		var ret bool
		return ret
	}
	return *o.PkceEnabled
}

// GetPkceEnabledOk returns a tuple with the PkceEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOpenIdIdpConfigRequest) GetPkceEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.PkceEnabled) {
		return nil, false
	}
	return o.PkceEnabled, true
}

// HasPkceEnabled returns a boolean if a field has been set.
func (o *CreateOpenIdIdpConfigRequest) HasPkceEnabled() bool {
	if o != nil && !IsNil(o.PkceEnabled) {
		return true
	}

	return false
}

// SetPkceEnabled gets a reference to the given bool and assigns it to the PkceEnabled field.
func (o *CreateOpenIdIdpConfigRequest) SetPkceEnabled(v bool) {
	o.PkceEnabled = &v
}

// GetPkceChallengeMethod returns the PkceChallengeMethod field value if set, zero value otherwise.
func (o *CreateOpenIdIdpConfigRequest) GetPkceChallengeMethod() string {
	if o == nil || IsNil(o.PkceChallengeMethod) {
		var ret string
		return ret
	}
	return *o.PkceChallengeMethod
}

// GetPkceChallengeMethodOk returns a tuple with the PkceChallengeMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOpenIdIdpConfigRequest) GetPkceChallengeMethodOk() (*string, bool) {
	if o == nil || IsNil(o.PkceChallengeMethod) {
		return nil, false
	}
	return o.PkceChallengeMethod, true
}

// HasPkceChallengeMethod returns a boolean if a field has been set.
func (o *CreateOpenIdIdpConfigRequest) HasPkceChallengeMethod() bool {
	if o != nil && !IsNil(o.PkceChallengeMethod) {
		return true
	}

	return false
}

// SetPkceChallengeMethod gets a reference to the given string and assigns it to the PkceChallengeMethod field.
func (o *CreateOpenIdIdpConfigRequest) SetPkceChallengeMethod(v string) {
	o.PkceChallengeMethod = &v
}

// GetFallbackMappingClaim returns the FallbackMappingClaim field value if set, zero value otherwise.
func (o *CreateOpenIdIdpConfigRequest) GetFallbackMappingClaim() string {
	if o == nil || IsNil(o.FallbackMappingClaim) {
		var ret string
		return ret
	}
	return *o.FallbackMappingClaim
}

// GetFallbackMappingClaimOk returns a tuple with the FallbackMappingClaim field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOpenIdIdpConfigRequest) GetFallbackMappingClaimOk() (*string, bool) {
	if o == nil || IsNil(o.FallbackMappingClaim) {
		return nil, false
	}
	return o.FallbackMappingClaim, true
}

// HasFallbackMappingClaim returns a boolean if a field has been set.
func (o *CreateOpenIdIdpConfigRequest) HasFallbackMappingClaim() bool {
	if o != nil && !IsNil(o.FallbackMappingClaim) {
		return true
	}

	return false
}

// SetFallbackMappingClaim gets a reference to the given string and assigns it to the FallbackMappingClaim field.
func (o *CreateOpenIdIdpConfigRequest) SetFallbackMappingClaim(v string) {
	o.FallbackMappingClaim = &v
}

// GetUserInfoSource returns the UserInfoSource field value if set, zero value otherwise.
func (o *CreateOpenIdIdpConfigRequest) GetUserInfoSource() string {
	if o == nil || IsNil(o.UserInfoSource) {
		var ret string
		return ret
	}
	return *o.UserInfoSource
}

// GetUserInfoSourceOk returns a tuple with the UserInfoSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOpenIdIdpConfigRequest) GetUserInfoSourceOk() (*string, bool) {
	if o == nil || IsNil(o.UserInfoSource) {
		return nil, false
	}
	return o.UserInfoSource, true
}

// HasUserInfoSource returns a boolean if a field has been set.
func (o *CreateOpenIdIdpConfigRequest) HasUserInfoSource() bool {
	if o != nil && !IsNil(o.UserInfoSource) {
		return true
	}

	return false
}

// SetUserInfoSource gets a reference to the given string and assigns it to the UserInfoSource field.
func (o *CreateOpenIdIdpConfigRequest) SetUserInfoSource(v string) {
	o.UserInfoSource = &v
}

// GetUserImportEnabled returns the UserImportEnabled field value if set, zero value otherwise.
func (o *CreateOpenIdIdpConfigRequest) GetUserImportEnabled() bool {
	if o == nil || IsNil(o.UserImportEnabled) {
		var ret bool
		return ret
	}
	return *o.UserImportEnabled
}

// GetUserImportEnabledOk returns a tuple with the UserImportEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOpenIdIdpConfigRequest) GetUserImportEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.UserImportEnabled) {
		return nil, false
	}
	return o.UserImportEnabled, true
}

// HasUserImportEnabled returns a boolean if a field has been set.
func (o *CreateOpenIdIdpConfigRequest) HasUserImportEnabled() bool {
	if o != nil && !IsNil(o.UserImportEnabled) {
		return true
	}

	return false
}

// SetUserImportEnabled gets a reference to the given bool and assigns it to the UserImportEnabled field.
func (o *CreateOpenIdIdpConfigRequest) SetUserImportEnabled(v bool) {
	o.UserImportEnabled = &v
}

// GetUserImportGroup returns the UserImportGroup field value if set, zero value otherwise.
func (o *CreateOpenIdIdpConfigRequest) GetUserImportGroup() int64 {
	if o == nil || IsNil(o.UserImportGroup) {
		var ret int64
		return ret
	}
	return *o.UserImportGroup
}

// GetUserImportGroupOk returns a tuple with the UserImportGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOpenIdIdpConfigRequest) GetUserImportGroupOk() (*int64, bool) {
	if o == nil || IsNil(o.UserImportGroup) {
		return nil, false
	}
	return o.UserImportGroup, true
}

// HasUserImportGroup returns a boolean if a field has been set.
func (o *CreateOpenIdIdpConfigRequest) HasUserImportGroup() bool {
	if o != nil && !IsNil(o.UserImportGroup) {
		return true
	}

	return false
}

// SetUserImportGroup gets a reference to the given int64 and assigns it to the UserImportGroup field.
func (o *CreateOpenIdIdpConfigRequest) SetUserImportGroup(v int64) {
	o.UserImportGroup = &v
}

// GetUserUpdateEnabled returns the UserUpdateEnabled field value if set, zero value otherwise.
func (o *CreateOpenIdIdpConfigRequest) GetUserUpdateEnabled() bool {
	if o == nil || IsNil(o.UserUpdateEnabled) {
		var ret bool
		return ret
	}
	return *o.UserUpdateEnabled
}

// GetUserUpdateEnabledOk returns a tuple with the UserUpdateEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOpenIdIdpConfigRequest) GetUserUpdateEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.UserUpdateEnabled) {
		return nil, false
	}
	return o.UserUpdateEnabled, true
}

// HasUserUpdateEnabled returns a boolean if a field has been set.
func (o *CreateOpenIdIdpConfigRequest) HasUserUpdateEnabled() bool {
	if o != nil && !IsNil(o.UserUpdateEnabled) {
		return true
	}

	return false
}

// SetUserUpdateEnabled gets a reference to the given bool and assigns it to the UserUpdateEnabled field.
func (o *CreateOpenIdIdpConfigRequest) SetUserUpdateEnabled(v bool) {
	o.UserUpdateEnabled = &v
}

// GetUserManagementUrl returns the UserManagementUrl field value if set, zero value otherwise.
func (o *CreateOpenIdIdpConfigRequest) GetUserManagementUrl() string {
	if o == nil || IsNil(o.UserManagementUrl) {
		var ret string
		return ret
	}
	return *o.UserManagementUrl
}

// GetUserManagementUrlOk returns a tuple with the UserManagementUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOpenIdIdpConfigRequest) GetUserManagementUrlOk() (*string, bool) {
	if o == nil || IsNil(o.UserManagementUrl) {
		return nil, false
	}
	return o.UserManagementUrl, true
}

// HasUserManagementUrl returns a boolean if a field has been set.
func (o *CreateOpenIdIdpConfigRequest) HasUserManagementUrl() bool {
	if o != nil && !IsNil(o.UserManagementUrl) {
		return true
	}

	return false
}

// SetUserManagementUrl gets a reference to the given string and assigns it to the UserManagementUrl field.
func (o *CreateOpenIdIdpConfigRequest) SetUserManagementUrl(v string) {
	o.UserManagementUrl = &v
}

func (o CreateOpenIdIdpConfigRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateOpenIdIdpConfigRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["issuer"] = o.Issuer
	toSerialize["authorizationEndPointUrl"] = o.AuthorizationEndPointUrl
	toSerialize["tokenEndPointUrl"] = o.TokenEndPointUrl
	toSerialize["userInfoEndPointUrl"] = o.UserInfoEndPointUrl
	toSerialize["jwksEndPointUrl"] = o.JwksEndPointUrl
	toSerialize["clientId"] = o.ClientId
	toSerialize["clientSecret"] = o.ClientSecret
	toSerialize["scopes"] = o.Scopes
	toSerialize["redirectUris"] = o.RedirectUris
	toSerialize["mappingClaim"] = o.MappingClaim
	if !IsNil(o.Flow) {
		toSerialize["flow"] = o.Flow
	}
	if !IsNil(o.PkceEnabled) {
		toSerialize["pkceEnabled"] = o.PkceEnabled
	}
	if !IsNil(o.PkceChallengeMethod) {
		toSerialize["pkceChallengeMethod"] = o.PkceChallengeMethod
	}
	if !IsNil(o.FallbackMappingClaim) {
		toSerialize["fallbackMappingClaim"] = o.FallbackMappingClaim
	}
	if !IsNil(o.UserInfoSource) {
		toSerialize["userInfoSource"] = o.UserInfoSource
	}
	if !IsNil(o.UserImportEnabled) {
		toSerialize["userImportEnabled"] = o.UserImportEnabled
	}
	if !IsNil(o.UserImportGroup) {
		toSerialize["userImportGroup"] = o.UserImportGroup
	}
	if !IsNil(o.UserUpdateEnabled) {
		toSerialize["userUpdateEnabled"] = o.UserUpdateEnabled
	}
	if !IsNil(o.UserManagementUrl) {
		toSerialize["userManagementUrl"] = o.UserManagementUrl
	}
	return toSerialize, nil
}

func (o *CreateOpenIdIdpConfigRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"issuer",
		"authorizationEndPointUrl",
		"tokenEndPointUrl",
		"userInfoEndPointUrl",
		"jwksEndPointUrl",
		"clientId",
		"clientSecret",
		"scopes",
		"redirectUris",
		"mappingClaim",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateOpenIdIdpConfigRequest := _CreateOpenIdIdpConfigRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateOpenIdIdpConfigRequest)

	if err != nil {
		return err
	}

	*o = CreateOpenIdIdpConfigRequest(varCreateOpenIdIdpConfigRequest)

	return err
}

type NullableCreateOpenIdIdpConfigRequest struct {
	value *CreateOpenIdIdpConfigRequest
	isSet bool
}

func (v NullableCreateOpenIdIdpConfigRequest) Get() *CreateOpenIdIdpConfigRequest {
	return v.value
}

func (v *NullableCreateOpenIdIdpConfigRequest) Set(val *CreateOpenIdIdpConfigRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateOpenIdIdpConfigRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateOpenIdIdpConfigRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateOpenIdIdpConfigRequest(val *CreateOpenIdIdpConfigRequest) *NullableCreateOpenIdIdpConfigRequest {
	return &NullableCreateOpenIdIdpConfigRequest{value: val, isSet: true}
}

func (v NullableCreateOpenIdIdpConfigRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateOpenIdIdpConfigRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
