/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the AuditNodeResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditNodeResponse{}

// AuditNodeResponse Audit node report
type AuditNodeResponse struct {
	// Node ID
	NodeId int64 `json:"nodeId"`
	// Node name
	NodeName string `json:"nodeName"`
	// Parent node path  `/` if node is a root node (room)
	NodeParentPath string `json:"nodeParentPath"`
	// Number of direct children  (no recursion; for rooms only)
	NodeCntChildren int32 `json:"nodeCntChildren"`
	// List of assigned users with permissions
	AuditUserPermissionList []AuditUserPermission `json:"auditUserPermissionList"`
	// Parent node ID (room or folder)
	NodeParentId *int64 `json:"nodeParentId,omitempty"`
	// Node size in byte
	NodeSize *int64 `json:"nodeSize,omitempty"`
	// Retention period for deleted nodes in days
	NodeRecycleBinRetentionPeriod *int32 `json:"nodeRecycleBinRetentionPeriod,omitempty"`
	// Quota in byte
	NodeQuota *int64 `json:"nodeQuota,omitempty"`
	// Encryption state
	NodeIsEncrypted *bool `json:"nodeIsEncrypted,omitempty"`
	// Is activities log active (for rooms only)
	NodeHasActivitiesLog *bool `json:"nodeHasActivitiesLog,omitempty"`
	// Creation date
	NodeCreatedAt *time.Time `json:"nodeCreatedAt,omitempty"`
	NodeCreatedBy *UserInfo  `json:"nodeCreatedBy,omitempty"`
	// Modification date
	NodeUpdatedAt *time.Time `json:"nodeUpdatedAt,omitempty"`
	NodeUpdatedBy *UserInfo  `json:"nodeUpdatedBy,omitempty"`
	// &#128679; Deprecated since v4.10.0  Is recycle bin active (for rooms only)  Recycle bin is always on (disabling is not possible).
	// Deprecated
	NodeHasRecycleBin *bool `json:"nodeHasRecycleBin,omitempty"`
}

type _AuditNodeResponse AuditNodeResponse

// NewAuditNodeResponse instantiates a new AuditNodeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditNodeResponse(nodeId int64, nodeName string, nodeParentPath string, nodeCntChildren int32, auditUserPermissionList []AuditUserPermission) *AuditNodeResponse {
	this := AuditNodeResponse{}
	this.NodeId = nodeId
	this.NodeName = nodeName
	this.NodeParentPath = nodeParentPath
	this.NodeCntChildren = nodeCntChildren
	this.AuditUserPermissionList = auditUserPermissionList
	var nodeHasActivitiesLog bool = true
	this.NodeHasActivitiesLog = &nodeHasActivitiesLog
	return &this
}

// NewAuditNodeResponseWithDefaults instantiates a new AuditNodeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditNodeResponseWithDefaults() *AuditNodeResponse {
	this := AuditNodeResponse{}
	var nodeHasActivitiesLog bool = true
	this.NodeHasActivitiesLog = &nodeHasActivitiesLog
	return &this
}

// GetNodeId returns the NodeId field value
func (o *AuditNodeResponse) GetNodeId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value
// and a boolean to check if the value has been set.
func (o *AuditNodeResponse) GetNodeIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeId, true
}

// SetNodeId sets field value
func (o *AuditNodeResponse) SetNodeId(v int64) {
	o.NodeId = v
}

// GetNodeName returns the NodeName field value
func (o *AuditNodeResponse) GetNodeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeName
}

// GetNodeNameOk returns a tuple with the NodeName field value
// and a boolean to check if the value has been set.
func (o *AuditNodeResponse) GetNodeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeName, true
}

// SetNodeName sets field value
func (o *AuditNodeResponse) SetNodeName(v string) {
	o.NodeName = v
}

// GetNodeParentPath returns the NodeParentPath field value
func (o *AuditNodeResponse) GetNodeParentPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeParentPath
}

// GetNodeParentPathOk returns a tuple with the NodeParentPath field value
// and a boolean to check if the value has been set.
func (o *AuditNodeResponse) GetNodeParentPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeParentPath, true
}

// SetNodeParentPath sets field value
func (o *AuditNodeResponse) SetNodeParentPath(v string) {
	o.NodeParentPath = v
}

// GetNodeCntChildren returns the NodeCntChildren field value
func (o *AuditNodeResponse) GetNodeCntChildren() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NodeCntChildren
}

// GetNodeCntChildrenOk returns a tuple with the NodeCntChildren field value
// and a boolean to check if the value has been set.
func (o *AuditNodeResponse) GetNodeCntChildrenOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeCntChildren, true
}

// SetNodeCntChildren sets field value
func (o *AuditNodeResponse) SetNodeCntChildren(v int32) {
	o.NodeCntChildren = v
}

// GetAuditUserPermissionList returns the AuditUserPermissionList field value
func (o *AuditNodeResponse) GetAuditUserPermissionList() []AuditUserPermission {
	if o == nil {
		var ret []AuditUserPermission
		return ret
	}

	return o.AuditUserPermissionList
}

// GetAuditUserPermissionListOk returns a tuple with the AuditUserPermissionList field value
// and a boolean to check if the value has been set.
func (o *AuditNodeResponse) GetAuditUserPermissionListOk() ([]AuditUserPermission, bool) {
	if o == nil {
		return nil, false
	}
	return o.AuditUserPermissionList, true
}

// SetAuditUserPermissionList sets field value
func (o *AuditNodeResponse) SetAuditUserPermissionList(v []AuditUserPermission) {
	o.AuditUserPermissionList = v
}

// GetNodeParentId returns the NodeParentId field value if set, zero value otherwise.
func (o *AuditNodeResponse) GetNodeParentId() int64 {
	if o == nil || IsNil(o.NodeParentId) {
		var ret int64
		return ret
	}
	return *o.NodeParentId
}

// GetNodeParentIdOk returns a tuple with the NodeParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditNodeResponse) GetNodeParentIdOk() (*int64, bool) {
	if o == nil || IsNil(o.NodeParentId) {
		return nil, false
	}
	return o.NodeParentId, true
}

// HasNodeParentId returns a boolean if a field has been set.
func (o *AuditNodeResponse) HasNodeParentId() bool {
	if o != nil && !IsNil(o.NodeParentId) {
		return true
	}

	return false
}

// SetNodeParentId gets a reference to the given int64 and assigns it to the NodeParentId field.
func (o *AuditNodeResponse) SetNodeParentId(v int64) {
	o.NodeParentId = &v
}

// GetNodeSize returns the NodeSize field value if set, zero value otherwise.
func (o *AuditNodeResponse) GetNodeSize() int64 {
	if o == nil || IsNil(o.NodeSize) {
		var ret int64
		return ret
	}
	return *o.NodeSize
}

// GetNodeSizeOk returns a tuple with the NodeSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditNodeResponse) GetNodeSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.NodeSize) {
		return nil, false
	}
	return o.NodeSize, true
}

// HasNodeSize returns a boolean if a field has been set.
func (o *AuditNodeResponse) HasNodeSize() bool {
	if o != nil && !IsNil(o.NodeSize) {
		return true
	}

	return false
}

// SetNodeSize gets a reference to the given int64 and assigns it to the NodeSize field.
func (o *AuditNodeResponse) SetNodeSize(v int64) {
	o.NodeSize = &v
}

// GetNodeRecycleBinRetentionPeriod returns the NodeRecycleBinRetentionPeriod field value if set, zero value otherwise.
func (o *AuditNodeResponse) GetNodeRecycleBinRetentionPeriod() int32 {
	if o == nil || IsNil(o.NodeRecycleBinRetentionPeriod) {
		var ret int32
		return ret
	}
	return *o.NodeRecycleBinRetentionPeriod
}

// GetNodeRecycleBinRetentionPeriodOk returns a tuple with the NodeRecycleBinRetentionPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditNodeResponse) GetNodeRecycleBinRetentionPeriodOk() (*int32, bool) {
	if o == nil || IsNil(o.NodeRecycleBinRetentionPeriod) {
		return nil, false
	}
	return o.NodeRecycleBinRetentionPeriod, true
}

// HasNodeRecycleBinRetentionPeriod returns a boolean if a field has been set.
func (o *AuditNodeResponse) HasNodeRecycleBinRetentionPeriod() bool {
	if o != nil && !IsNil(o.NodeRecycleBinRetentionPeriod) {
		return true
	}

	return false
}

// SetNodeRecycleBinRetentionPeriod gets a reference to the given int32 and assigns it to the NodeRecycleBinRetentionPeriod field.
func (o *AuditNodeResponse) SetNodeRecycleBinRetentionPeriod(v int32) {
	o.NodeRecycleBinRetentionPeriod = &v
}

// GetNodeQuota returns the NodeQuota field value if set, zero value otherwise.
func (o *AuditNodeResponse) GetNodeQuota() int64 {
	if o == nil || IsNil(o.NodeQuota) {
		var ret int64
		return ret
	}
	return *o.NodeQuota
}

// GetNodeQuotaOk returns a tuple with the NodeQuota field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditNodeResponse) GetNodeQuotaOk() (*int64, bool) {
	if o == nil || IsNil(o.NodeQuota) {
		return nil, false
	}
	return o.NodeQuota, true
}

// HasNodeQuota returns a boolean if a field has been set.
func (o *AuditNodeResponse) HasNodeQuota() bool {
	if o != nil && !IsNil(o.NodeQuota) {
		return true
	}

	return false
}

// SetNodeQuota gets a reference to the given int64 and assigns it to the NodeQuota field.
func (o *AuditNodeResponse) SetNodeQuota(v int64) {
	o.NodeQuota = &v
}

// GetNodeIsEncrypted returns the NodeIsEncrypted field value if set, zero value otherwise.
func (o *AuditNodeResponse) GetNodeIsEncrypted() bool {
	if o == nil || IsNil(o.NodeIsEncrypted) {
		var ret bool
		return ret
	}
	return *o.NodeIsEncrypted
}

// GetNodeIsEncryptedOk returns a tuple with the NodeIsEncrypted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditNodeResponse) GetNodeIsEncryptedOk() (*bool, bool) {
	if o == nil || IsNil(o.NodeIsEncrypted) {
		return nil, false
	}
	return o.NodeIsEncrypted, true
}

// HasNodeIsEncrypted returns a boolean if a field has been set.
func (o *AuditNodeResponse) HasNodeIsEncrypted() bool {
	if o != nil && !IsNil(o.NodeIsEncrypted) {
		return true
	}

	return false
}

// SetNodeIsEncrypted gets a reference to the given bool and assigns it to the NodeIsEncrypted field.
func (o *AuditNodeResponse) SetNodeIsEncrypted(v bool) {
	o.NodeIsEncrypted = &v
}

// GetNodeHasActivitiesLog returns the NodeHasActivitiesLog field value if set, zero value otherwise.
func (o *AuditNodeResponse) GetNodeHasActivitiesLog() bool {
	if o == nil || IsNil(o.NodeHasActivitiesLog) {
		var ret bool
		return ret
	}
	return *o.NodeHasActivitiesLog
}

// GetNodeHasActivitiesLogOk returns a tuple with the NodeHasActivitiesLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditNodeResponse) GetNodeHasActivitiesLogOk() (*bool, bool) {
	if o == nil || IsNil(o.NodeHasActivitiesLog) {
		return nil, false
	}
	return o.NodeHasActivitiesLog, true
}

// HasNodeHasActivitiesLog returns a boolean if a field has been set.
func (o *AuditNodeResponse) HasNodeHasActivitiesLog() bool {
	if o != nil && !IsNil(o.NodeHasActivitiesLog) {
		return true
	}

	return false
}

// SetNodeHasActivitiesLog gets a reference to the given bool and assigns it to the NodeHasActivitiesLog field.
func (o *AuditNodeResponse) SetNodeHasActivitiesLog(v bool) {
	o.NodeHasActivitiesLog = &v
}

// GetNodeCreatedAt returns the NodeCreatedAt field value if set, zero value otherwise.
func (o *AuditNodeResponse) GetNodeCreatedAt() time.Time {
	if o == nil || IsNil(o.NodeCreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.NodeCreatedAt
}

// GetNodeCreatedAtOk returns a tuple with the NodeCreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditNodeResponse) GetNodeCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.NodeCreatedAt) {
		return nil, false
	}
	return o.NodeCreatedAt, true
}

// HasNodeCreatedAt returns a boolean if a field has been set.
func (o *AuditNodeResponse) HasNodeCreatedAt() bool {
	if o != nil && !IsNil(o.NodeCreatedAt) {
		return true
	}

	return false
}

// SetNodeCreatedAt gets a reference to the given time.Time and assigns it to the NodeCreatedAt field.
func (o *AuditNodeResponse) SetNodeCreatedAt(v time.Time) {
	o.NodeCreatedAt = &v
}

// GetNodeCreatedBy returns the NodeCreatedBy field value if set, zero value otherwise.
func (o *AuditNodeResponse) GetNodeCreatedBy() UserInfo {
	if o == nil || IsNil(o.NodeCreatedBy) {
		var ret UserInfo
		return ret
	}
	return *o.NodeCreatedBy
}

// GetNodeCreatedByOk returns a tuple with the NodeCreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditNodeResponse) GetNodeCreatedByOk() (*UserInfo, bool) {
	if o == nil || IsNil(o.NodeCreatedBy) {
		return nil, false
	}
	return o.NodeCreatedBy, true
}

// HasNodeCreatedBy returns a boolean if a field has been set.
func (o *AuditNodeResponse) HasNodeCreatedBy() bool {
	if o != nil && !IsNil(o.NodeCreatedBy) {
		return true
	}

	return false
}

// SetNodeCreatedBy gets a reference to the given UserInfo and assigns it to the NodeCreatedBy field.
func (o *AuditNodeResponse) SetNodeCreatedBy(v UserInfo) {
	o.NodeCreatedBy = &v
}

// GetNodeUpdatedAt returns the NodeUpdatedAt field value if set, zero value otherwise.
func (o *AuditNodeResponse) GetNodeUpdatedAt() time.Time {
	if o == nil || IsNil(o.NodeUpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.NodeUpdatedAt
}

// GetNodeUpdatedAtOk returns a tuple with the NodeUpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditNodeResponse) GetNodeUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.NodeUpdatedAt) {
		return nil, false
	}
	return o.NodeUpdatedAt, true
}

// HasNodeUpdatedAt returns a boolean if a field has been set.
func (o *AuditNodeResponse) HasNodeUpdatedAt() bool {
	if o != nil && !IsNil(o.NodeUpdatedAt) {
		return true
	}

	return false
}

// SetNodeUpdatedAt gets a reference to the given time.Time and assigns it to the NodeUpdatedAt field.
func (o *AuditNodeResponse) SetNodeUpdatedAt(v time.Time) {
	o.NodeUpdatedAt = &v
}

// GetNodeUpdatedBy returns the NodeUpdatedBy field value if set, zero value otherwise.
func (o *AuditNodeResponse) GetNodeUpdatedBy() UserInfo {
	if o == nil || IsNil(o.NodeUpdatedBy) {
		var ret UserInfo
		return ret
	}
	return *o.NodeUpdatedBy
}

// GetNodeUpdatedByOk returns a tuple with the NodeUpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditNodeResponse) GetNodeUpdatedByOk() (*UserInfo, bool) {
	if o == nil || IsNil(o.NodeUpdatedBy) {
		return nil, false
	}
	return o.NodeUpdatedBy, true
}

// HasNodeUpdatedBy returns a boolean if a field has been set.
func (o *AuditNodeResponse) HasNodeUpdatedBy() bool {
	if o != nil && !IsNil(o.NodeUpdatedBy) {
		return true
	}

	return false
}

// SetNodeUpdatedBy gets a reference to the given UserInfo and assigns it to the NodeUpdatedBy field.
func (o *AuditNodeResponse) SetNodeUpdatedBy(v UserInfo) {
	o.NodeUpdatedBy = &v
}

// GetNodeHasRecycleBin returns the NodeHasRecycleBin field value if set, zero value otherwise.
// Deprecated
func (o *AuditNodeResponse) GetNodeHasRecycleBin() bool {
	if o == nil || IsNil(o.NodeHasRecycleBin) {
		var ret bool
		return ret
	}
	return *o.NodeHasRecycleBin
}

// GetNodeHasRecycleBinOk returns a tuple with the NodeHasRecycleBin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *AuditNodeResponse) GetNodeHasRecycleBinOk() (*bool, bool) {
	if o == nil || IsNil(o.NodeHasRecycleBin) {
		return nil, false
	}
	return o.NodeHasRecycleBin, true
}

// HasNodeHasRecycleBin returns a boolean if a field has been set.
func (o *AuditNodeResponse) HasNodeHasRecycleBin() bool {
	if o != nil && !IsNil(o.NodeHasRecycleBin) {
		return true
	}

	return false
}

// SetNodeHasRecycleBin gets a reference to the given bool and assigns it to the NodeHasRecycleBin field.
// Deprecated
func (o *AuditNodeResponse) SetNodeHasRecycleBin(v bool) {
	o.NodeHasRecycleBin = &v
}

func (o AuditNodeResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditNodeResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["nodeId"] = o.NodeId
	toSerialize["nodeName"] = o.NodeName
	toSerialize["nodeParentPath"] = o.NodeParentPath
	toSerialize["nodeCntChildren"] = o.NodeCntChildren
	toSerialize["auditUserPermissionList"] = o.AuditUserPermissionList
	if !IsNil(o.NodeParentId) {
		toSerialize["nodeParentId"] = o.NodeParentId
	}
	if !IsNil(o.NodeSize) {
		toSerialize["nodeSize"] = o.NodeSize
	}
	if !IsNil(o.NodeRecycleBinRetentionPeriod) {
		toSerialize["nodeRecycleBinRetentionPeriod"] = o.NodeRecycleBinRetentionPeriod
	}
	if !IsNil(o.NodeQuota) {
		toSerialize["nodeQuota"] = o.NodeQuota
	}
	if !IsNil(o.NodeIsEncrypted) {
		toSerialize["nodeIsEncrypted"] = o.NodeIsEncrypted
	}
	if !IsNil(o.NodeHasActivitiesLog) {
		toSerialize["nodeHasActivitiesLog"] = o.NodeHasActivitiesLog
	}
	if !IsNil(o.NodeCreatedAt) {
		toSerialize["nodeCreatedAt"] = o.NodeCreatedAt
	}
	if !IsNil(o.NodeCreatedBy) {
		toSerialize["nodeCreatedBy"] = o.NodeCreatedBy
	}
	if !IsNil(o.NodeUpdatedAt) {
		toSerialize["nodeUpdatedAt"] = o.NodeUpdatedAt
	}
	if !IsNil(o.NodeUpdatedBy) {
		toSerialize["nodeUpdatedBy"] = o.NodeUpdatedBy
	}
	if !IsNil(o.NodeHasRecycleBin) {
		toSerialize["nodeHasRecycleBin"] = o.NodeHasRecycleBin
	}
	return toSerialize, nil
}

func (o *AuditNodeResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"nodeId",
		"nodeName",
		"nodeParentPath",
		"nodeCntChildren",
		"auditUserPermissionList",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuditNodeResponse := _AuditNodeResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAuditNodeResponse)

	if err != nil {
		return err
	}

	*o = AuditNodeResponse(varAuditNodeResponse)

	return err
}

type NullableAuditNodeResponse struct {
	value *AuditNodeResponse
	isSet bool
}

func (v NullableAuditNodeResponse) Get() *AuditNodeResponse {
	return v.value
}

func (v *NullableAuditNodeResponse) Set(val *AuditNodeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditNodeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditNodeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditNodeResponse(val *AuditNodeResponse) *NullableAuditNodeResponse {
	return &NullableAuditNodeResponse{value: val, isSet: true}
}

func (v NullableAuditNodeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditNodeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
