/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UserLockout type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserLockout{}

// UserLockout User lockout information
type UserLockout struct {
	// Determines whether user lockout is enabled
	Enabled bool `json:"enabled"`
	// Maximum allowed number of failed login attempts
	MaxNumberOfLoginFailures *int32 `json:"maxNumberOfLoginFailures,omitempty"`
	// Amount of minutes a user has to wait to make another login attempt after `maxNumberOfLoginFailures` has been exceeded
	LockoutPeriod *int32 `json:"lockoutPeriod,omitempty"`
}

type _UserLockout UserLockout

// NewUserLockout instantiates a new UserLockout object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserLockout(enabled bool) *UserLockout {
	this := UserLockout{}
	this.Enabled = enabled
	return &this
}

// NewUserLockoutWithDefaults instantiates a new UserLockout object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserLockoutWithDefaults() *UserLockout {
	this := UserLockout{}
	return &this
}

// GetEnabled returns the Enabled field value
func (o *UserLockout) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *UserLockout) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *UserLockout) SetEnabled(v bool) {
	o.Enabled = v
}

// GetMaxNumberOfLoginFailures returns the MaxNumberOfLoginFailures field value if set, zero value otherwise.
func (o *UserLockout) GetMaxNumberOfLoginFailures() int32 {
	if o == nil || IsNil(o.MaxNumberOfLoginFailures) {
		var ret int32
		return ret
	}
	return *o.MaxNumberOfLoginFailures
}

// GetMaxNumberOfLoginFailuresOk returns a tuple with the MaxNumberOfLoginFailures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLockout) GetMaxNumberOfLoginFailuresOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxNumberOfLoginFailures) {
		return nil, false
	}
	return o.MaxNumberOfLoginFailures, true
}

// HasMaxNumberOfLoginFailures returns a boolean if a field has been set.
func (o *UserLockout) HasMaxNumberOfLoginFailures() bool {
	if o != nil && !IsNil(o.MaxNumberOfLoginFailures) {
		return true
	}

	return false
}

// SetMaxNumberOfLoginFailures gets a reference to the given int32 and assigns it to the MaxNumberOfLoginFailures field.
func (o *UserLockout) SetMaxNumberOfLoginFailures(v int32) {
	o.MaxNumberOfLoginFailures = &v
}

// GetLockoutPeriod returns the LockoutPeriod field value if set, zero value otherwise.
func (o *UserLockout) GetLockoutPeriod() int32 {
	if o == nil || IsNil(o.LockoutPeriod) {
		var ret int32
		return ret
	}
	return *o.LockoutPeriod
}

// GetLockoutPeriodOk returns a tuple with the LockoutPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLockout) GetLockoutPeriodOk() (*int32, bool) {
	if o == nil || IsNil(o.LockoutPeriod) {
		return nil, false
	}
	return o.LockoutPeriod, true
}

// HasLockoutPeriod returns a boolean if a field has been set.
func (o *UserLockout) HasLockoutPeriod() bool {
	if o != nil && !IsNil(o.LockoutPeriod) {
		return true
	}

	return false
}

// SetLockoutPeriod gets a reference to the given int32 and assigns it to the LockoutPeriod field.
func (o *UserLockout) SetLockoutPeriod(v int32) {
	o.LockoutPeriod = &v
}

func (o UserLockout) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserLockout) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled
	if !IsNil(o.MaxNumberOfLoginFailures) {
		toSerialize["maxNumberOfLoginFailures"] = o.MaxNumberOfLoginFailures
	}
	if !IsNil(o.LockoutPeriod) {
		toSerialize["lockoutPeriod"] = o.LockoutPeriod
	}
	return toSerialize, nil
}

func (o *UserLockout) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserLockout := _UserLockout{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserLockout)

	if err != nil {
		return err
	}

	*o = UserLockout(varUserLockout)

	return err
}

type NullableUserLockout struct {
	value *UserLockout
	isSet bool
}

func (v NullableUserLockout) Get() *UserLockout {
	return v.value
}

func (v *NullableUserLockout) Set(val *UserLockout) {
	v.value = val
	v.isSet = true
}

func (v NullableUserLockout) IsSet() bool {
	return v.isSet
}

func (v *NullableUserLockout) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserLockout(val *UserLockout) *NullableUserLockout {
	return &NullableUserLockout{value: val, isSet: true}
}

func (v NullableUserLockout) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserLockout) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
