/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the S3TagCreateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &S3TagCreateRequest{}

// S3TagCreateRequest Request model for creating a S3 tag
type S3TagCreateRequest struct {
	// S3 tag key
	Key string `json:"key"`
	// S3 tag value
	Value string `json:"value"`
	// Determines whether S3 is mandatory or not
	IsMandatory *bool `json:"isMandatory,omitempty"`
}

type _S3TagCreateRequest S3TagCreateRequest

// NewS3TagCreateRequest instantiates a new S3TagCreateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3TagCreateRequest(key string, value string) *S3TagCreateRequest {
	this := S3TagCreateRequest{}
	this.Key = key
	this.Value = value
	var isMandatory bool = false
	this.IsMandatory = &isMandatory
	return &this
}

// NewS3TagCreateRequestWithDefaults instantiates a new S3TagCreateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3TagCreateRequestWithDefaults() *S3TagCreateRequest {
	this := S3TagCreateRequest{}
	var isMandatory bool = false
	this.IsMandatory = &isMandatory
	return &this
}

// GetKey returns the Key field value
func (o *S3TagCreateRequest) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *S3TagCreateRequest) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *S3TagCreateRequest) SetKey(v string) {
	o.Key = v
}

// GetValue returns the Value field value
func (o *S3TagCreateRequest) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *S3TagCreateRequest) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *S3TagCreateRequest) SetValue(v string) {
	o.Value = v
}

// GetIsMandatory returns the IsMandatory field value if set, zero value otherwise.
func (o *S3TagCreateRequest) GetIsMandatory() bool {
	if o == nil || IsNil(o.IsMandatory) {
		var ret bool
		return ret
	}
	return *o.IsMandatory
}

// GetIsMandatoryOk returns a tuple with the IsMandatory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3TagCreateRequest) GetIsMandatoryOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMandatory) {
		return nil, false
	}
	return o.IsMandatory, true
}

// HasIsMandatory returns a boolean if a field has been set.
func (o *S3TagCreateRequest) HasIsMandatory() bool {
	if o != nil && !IsNil(o.IsMandatory) {
		return true
	}

	return false
}

// SetIsMandatory gets a reference to the given bool and assigns it to the IsMandatory field.
func (o *S3TagCreateRequest) SetIsMandatory(v bool) {
	o.IsMandatory = &v
}

func (o S3TagCreateRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o S3TagCreateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	toSerialize["value"] = o.Value
	if !IsNil(o.IsMandatory) {
		toSerialize["isMandatory"] = o.IsMandatory
	}
	return toSerialize, nil
}

func (o *S3TagCreateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varS3TagCreateRequest := _S3TagCreateRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varS3TagCreateRequest)

	if err != nil {
		return err
	}

	*o = S3TagCreateRequest(varS3TagCreateRequest)

	return err
}

type NullableS3TagCreateRequest struct {
	value *S3TagCreateRequest
	isSet bool
}

func (v NullableS3TagCreateRequest) Get() *S3TagCreateRequest {
	return v.value
}

func (v *NullableS3TagCreateRequest) Set(val *S3TagCreateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableS3TagCreateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableS3TagCreateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3TagCreateRequest(val *S3TagCreateRequest) *NullableS3TagCreateRequest {
	return &NullableS3TagCreateRequest{value: val, isSet: true}
}

func (v NullableS3TagCreateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3TagCreateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
