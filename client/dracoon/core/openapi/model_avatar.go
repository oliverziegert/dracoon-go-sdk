/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Avatar type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Avatar{}

// Avatar User avatar information
type Avatar struct {
	// Avatar URI
	AvatarUri string `json:"avatarUri"`
	// Avatar UUID
	AvatarUuid string `json:"avatarUuid"`
	// Determines whether user updated his / her avatar with own image
	IsCustomAvatar bool `json:"isCustomAvatar"`
}

type _Avatar Avatar

// NewAvatar instantiates a new Avatar object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAvatar(avatarUri string, avatarUuid string, isCustomAvatar bool) *Avatar {
	this := Avatar{}
	this.AvatarUri = avatarUri
	this.AvatarUuid = avatarUuid
	this.IsCustomAvatar = isCustomAvatar
	return &this
}

// NewAvatarWithDefaults instantiates a new Avatar object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAvatarWithDefaults() *Avatar {
	this := Avatar{}
	return &this
}

// GetAvatarUri returns the AvatarUri field value
func (o *Avatar) GetAvatarUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AvatarUri
}

// GetAvatarUriOk returns a tuple with the AvatarUri field value
// and a boolean to check if the value has been set.
func (o *Avatar) GetAvatarUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvatarUri, true
}

// SetAvatarUri sets field value
func (o *Avatar) SetAvatarUri(v string) {
	o.AvatarUri = v
}

// GetAvatarUuid returns the AvatarUuid field value
func (o *Avatar) GetAvatarUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AvatarUuid
}

// GetAvatarUuidOk returns a tuple with the AvatarUuid field value
// and a boolean to check if the value has been set.
func (o *Avatar) GetAvatarUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvatarUuid, true
}

// SetAvatarUuid sets field value
func (o *Avatar) SetAvatarUuid(v string) {
	o.AvatarUuid = v
}

// GetIsCustomAvatar returns the IsCustomAvatar field value
func (o *Avatar) GetIsCustomAvatar() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsCustomAvatar
}

// GetIsCustomAvatarOk returns a tuple with the IsCustomAvatar field value
// and a boolean to check if the value has been set.
func (o *Avatar) GetIsCustomAvatarOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsCustomAvatar, true
}

// SetIsCustomAvatar sets field value
func (o *Avatar) SetIsCustomAvatar(v bool) {
	o.IsCustomAvatar = v
}

func (o Avatar) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Avatar) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["avatarUri"] = o.AvatarUri
	toSerialize["avatarUuid"] = o.AvatarUuid
	toSerialize["isCustomAvatar"] = o.IsCustomAvatar
	return toSerialize, nil
}

func (o *Avatar) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"avatarUri",
		"avatarUuid",
		"isCustomAvatar",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAvatar := _Avatar{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAvatar)

	if err != nil {
		return err
	}

	*o = Avatar(varAvatar)

	return err
}

type NullableAvatar struct {
	value *Avatar
	isSet bool
}

func (v NullableAvatar) Get() *Avatar {
	return v.value
}

func (v *NullableAvatar) Set(val *Avatar) {
	v.value = val
	v.isSet = true
}

func (v NullableAvatar) IsSet() bool {
	return v.isSet
}

func (v *NullableAvatar) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvatar(val *Avatar) *NullableAvatar {
	return &NullableAvatar{value: val, isSet: true}
}

func (v NullableAvatar) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvatar) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
