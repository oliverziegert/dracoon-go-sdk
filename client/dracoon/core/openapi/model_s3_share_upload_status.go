/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the S3ShareUploadStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &S3ShareUploadStatus{}

// S3ShareUploadStatus S3 file upload status information
type S3ShareUploadStatus struct {
	// S3 file upload status:  * `transfer` - upload in progress  * `finishing` - completing file upload  * `done` - file upload successully done  * `error` - an error occurred while file upload
	Status string `json:"status"`
	// File name
	FileName string `json:"fileName"`
	// File size in byte
	Size         *int64         `json:"size,omitempty"`
	ErrorDetails *ErrorResponse `json:"errorDetails,omitempty"`
}

type _S3ShareUploadStatus S3ShareUploadStatus

// NewS3ShareUploadStatus instantiates a new S3ShareUploadStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3ShareUploadStatus(status string, fileName string) *S3ShareUploadStatus {
	this := S3ShareUploadStatus{}
	this.Status = status
	this.FileName = fileName
	return &this
}

// NewS3ShareUploadStatusWithDefaults instantiates a new S3ShareUploadStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3ShareUploadStatusWithDefaults() *S3ShareUploadStatus {
	this := S3ShareUploadStatus{}
	return &this
}

// GetStatus returns the Status field value
func (o *S3ShareUploadStatus) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *S3ShareUploadStatus) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *S3ShareUploadStatus) SetStatus(v string) {
	o.Status = v
}

// GetFileName returns the FileName field value
func (o *S3ShareUploadStatus) GetFileName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value
// and a boolean to check if the value has been set.
func (o *S3ShareUploadStatus) GetFileNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileName, true
}

// SetFileName sets field value
func (o *S3ShareUploadStatus) SetFileName(v string) {
	o.FileName = v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *S3ShareUploadStatus) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3ShareUploadStatus) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *S3ShareUploadStatus) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *S3ShareUploadStatus) SetSize(v int64) {
	o.Size = &v
}

// GetErrorDetails returns the ErrorDetails field value if set, zero value otherwise.
func (o *S3ShareUploadStatus) GetErrorDetails() ErrorResponse {
	if o == nil || IsNil(o.ErrorDetails) {
		var ret ErrorResponse
		return ret
	}
	return *o.ErrorDetails
}

// GetErrorDetailsOk returns a tuple with the ErrorDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3ShareUploadStatus) GetErrorDetailsOk() (*ErrorResponse, bool) {
	if o == nil || IsNil(o.ErrorDetails) {
		return nil, false
	}
	return o.ErrorDetails, true
}

// HasErrorDetails returns a boolean if a field has been set.
func (o *S3ShareUploadStatus) HasErrorDetails() bool {
	if o != nil && !IsNil(o.ErrorDetails) {
		return true
	}

	return false
}

// SetErrorDetails gets a reference to the given ErrorResponse and assigns it to the ErrorDetails field.
func (o *S3ShareUploadStatus) SetErrorDetails(v ErrorResponse) {
	o.ErrorDetails = &v
}

func (o S3ShareUploadStatus) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o S3ShareUploadStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["status"] = o.Status
	toSerialize["fileName"] = o.FileName
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.ErrorDetails) {
		toSerialize["errorDetails"] = o.ErrorDetails
	}
	return toSerialize, nil
}

func (o *S3ShareUploadStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
		"fileName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varS3ShareUploadStatus := _S3ShareUploadStatus{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varS3ShareUploadStatus)

	if err != nil {
		return err
	}

	*o = S3ShareUploadStatus(varS3ShareUploadStatus)

	return err
}

type NullableS3ShareUploadStatus struct {
	value *S3ShareUploadStatus
	isSet bool
}

func (v NullableS3ShareUploadStatus) Get() *S3ShareUploadStatus {
	return v.value
}

func (v *NullableS3ShareUploadStatus) Set(val *S3ShareUploadStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableS3ShareUploadStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableS3ShareUploadStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3ShareUploadStatus(val *S3ShareUploadStatus) *NullableS3ShareUploadStatus {
	return &NullableS3ShareUploadStatus{value: val, isSet: true}
}

func (v NullableS3ShareUploadStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3ShareUploadStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
