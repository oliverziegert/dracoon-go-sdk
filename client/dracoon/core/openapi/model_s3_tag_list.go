/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the S3TagList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &S3TagList{}

// S3TagList List of S3 tags
type S3TagList struct {
	// List of configured S3 tags
	Items []S3Tag `json:"items,omitempty"`
}

// NewS3TagList instantiates a new S3TagList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3TagList() *S3TagList {
	this := S3TagList{}
	return &this
}

// NewS3TagListWithDefaults instantiates a new S3TagList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3TagListWithDefaults() *S3TagList {
	this := S3TagList{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *S3TagList) GetItems() []S3Tag {
	if o == nil || IsNil(o.Items) {
		var ret []S3Tag
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3TagList) GetItemsOk() ([]S3Tag, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *S3TagList) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []S3Tag and assigns it to the Items field.
func (o *S3TagList) SetItems(v []S3Tag) {
	o.Items = v
}

func (o S3TagList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o S3TagList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	return toSerialize, nil
}

type NullableS3TagList struct {
	value *S3TagList
	isSet bool
}

func (v NullableS3TagList) Get() *S3TagList {
	return v.value
}

func (v *NullableS3TagList) Set(val *S3TagList) {
	v.value = val
	v.isSet = true
}

func (v NullableS3TagList) IsSet() bool {
	return v.isSet
}

func (v *NullableS3TagList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3TagList(val *S3TagList) *NullableS3TagList {
	return &NullableS3TagList{value: val, isSet: true}
}

func (v NullableS3TagList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3TagList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
