/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CompleteUploadRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompleteUploadRequest{}

// CompleteUploadRequest The body must be empty if public upload token is used.  The `resolutionStrategy` in that case will be always `autorename`
type CompleteUploadRequest struct {
	// Node conflict resolution strategy:  * `autorename`  * `overwrite`  * `fail`
	ResolutionStrategy *string `json:"resolutionStrategy,omitempty"`
	// Preserve Download Share Links and point them to the new node.
	KeepShareLinks *bool `json:"keepShareLinks,omitempty"`
	// New file name to store with
	FileName *string  `json:"fileName,omitempty"`
	FileKey  *FileKey `json:"fileKey,omitempty"`
	// Deprecated
	UserFileKeyList *UserFileKeyList `json:"userFileKeyList,omitempty"`
}

// NewCompleteUploadRequest instantiates a new CompleteUploadRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompleteUploadRequest() *CompleteUploadRequest {
	this := CompleteUploadRequest{}
	var resolutionStrategy string = "autorename"
	this.ResolutionStrategy = &resolutionStrategy
	var keepShareLinks bool = false
	this.KeepShareLinks = &keepShareLinks
	return &this
}

// NewCompleteUploadRequestWithDefaults instantiates a new CompleteUploadRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompleteUploadRequestWithDefaults() *CompleteUploadRequest {
	this := CompleteUploadRequest{}
	var resolutionStrategy string = "autorename"
	this.ResolutionStrategy = &resolutionStrategy
	var keepShareLinks bool = false
	this.KeepShareLinks = &keepShareLinks
	return &this
}

// GetResolutionStrategy returns the ResolutionStrategy field value if set, zero value otherwise.
func (o *CompleteUploadRequest) GetResolutionStrategy() string {
	if o == nil || IsNil(o.ResolutionStrategy) {
		var ret string
		return ret
	}
	return *o.ResolutionStrategy
}

// GetResolutionStrategyOk returns a tuple with the ResolutionStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompleteUploadRequest) GetResolutionStrategyOk() (*string, bool) {
	if o == nil || IsNil(o.ResolutionStrategy) {
		return nil, false
	}
	return o.ResolutionStrategy, true
}

// HasResolutionStrategy returns a boolean if a field has been set.
func (o *CompleteUploadRequest) HasResolutionStrategy() bool {
	if o != nil && !IsNil(o.ResolutionStrategy) {
		return true
	}

	return false
}

// SetResolutionStrategy gets a reference to the given string and assigns it to the ResolutionStrategy field.
func (o *CompleteUploadRequest) SetResolutionStrategy(v string) {
	o.ResolutionStrategy = &v
}

// GetKeepShareLinks returns the KeepShareLinks field value if set, zero value otherwise.
func (o *CompleteUploadRequest) GetKeepShareLinks() bool {
	if o == nil || IsNil(o.KeepShareLinks) {
		var ret bool
		return ret
	}
	return *o.KeepShareLinks
}

// GetKeepShareLinksOk returns a tuple with the KeepShareLinks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompleteUploadRequest) GetKeepShareLinksOk() (*bool, bool) {
	if o == nil || IsNil(o.KeepShareLinks) {
		return nil, false
	}
	return o.KeepShareLinks, true
}

// HasKeepShareLinks returns a boolean if a field has been set.
func (o *CompleteUploadRequest) HasKeepShareLinks() bool {
	if o != nil && !IsNil(o.KeepShareLinks) {
		return true
	}

	return false
}

// SetKeepShareLinks gets a reference to the given bool and assigns it to the KeepShareLinks field.
func (o *CompleteUploadRequest) SetKeepShareLinks(v bool) {
	o.KeepShareLinks = &v
}

// GetFileName returns the FileName field value if set, zero value otherwise.
func (o *CompleteUploadRequest) GetFileName() string {
	if o == nil || IsNil(o.FileName) {
		var ret string
		return ret
	}
	return *o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompleteUploadRequest) GetFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.FileName) {
		return nil, false
	}
	return o.FileName, true
}

// HasFileName returns a boolean if a field has been set.
func (o *CompleteUploadRequest) HasFileName() bool {
	if o != nil && !IsNil(o.FileName) {
		return true
	}

	return false
}

// SetFileName gets a reference to the given string and assigns it to the FileName field.
func (o *CompleteUploadRequest) SetFileName(v string) {
	o.FileName = &v
}

// GetFileKey returns the FileKey field value if set, zero value otherwise.
func (o *CompleteUploadRequest) GetFileKey() FileKey {
	if o == nil || IsNil(o.FileKey) {
		var ret FileKey
		return ret
	}
	return *o.FileKey
}

// GetFileKeyOk returns a tuple with the FileKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompleteUploadRequest) GetFileKeyOk() (*FileKey, bool) {
	if o == nil || IsNil(o.FileKey) {
		return nil, false
	}
	return o.FileKey, true
}

// HasFileKey returns a boolean if a field has been set.
func (o *CompleteUploadRequest) HasFileKey() bool {
	if o != nil && !IsNil(o.FileKey) {
		return true
	}

	return false
}

// SetFileKey gets a reference to the given FileKey and assigns it to the FileKey field.
func (o *CompleteUploadRequest) SetFileKey(v FileKey) {
	o.FileKey = &v
}

// GetUserFileKeyList returns the UserFileKeyList field value if set, zero value otherwise.
// Deprecated
func (o *CompleteUploadRequest) GetUserFileKeyList() UserFileKeyList {
	if o == nil || IsNil(o.UserFileKeyList) {
		var ret UserFileKeyList
		return ret
	}
	return *o.UserFileKeyList
}

// GetUserFileKeyListOk returns a tuple with the UserFileKeyList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *CompleteUploadRequest) GetUserFileKeyListOk() (*UserFileKeyList, bool) {
	if o == nil || IsNil(o.UserFileKeyList) {
		return nil, false
	}
	return o.UserFileKeyList, true
}

// HasUserFileKeyList returns a boolean if a field has been set.
func (o *CompleteUploadRequest) HasUserFileKeyList() bool {
	if o != nil && !IsNil(o.UserFileKeyList) {
		return true
	}

	return false
}

// SetUserFileKeyList gets a reference to the given UserFileKeyList and assigns it to the UserFileKeyList field.
// Deprecated
func (o *CompleteUploadRequest) SetUserFileKeyList(v UserFileKeyList) {
	o.UserFileKeyList = &v
}

func (o CompleteUploadRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompleteUploadRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ResolutionStrategy) {
		toSerialize["resolutionStrategy"] = o.ResolutionStrategy
	}
	if !IsNil(o.KeepShareLinks) {
		toSerialize["keepShareLinks"] = o.KeepShareLinks
	}
	if !IsNil(o.FileName) {
		toSerialize["fileName"] = o.FileName
	}
	if !IsNil(o.FileKey) {
		toSerialize["fileKey"] = o.FileKey
	}
	if !IsNil(o.UserFileKeyList) {
		toSerialize["userFileKeyList"] = o.UserFileKeyList
	}
	return toSerialize, nil
}

type NullableCompleteUploadRequest struct {
	value *CompleteUploadRequest
	isSet bool
}

func (v NullableCompleteUploadRequest) Get() *CompleteUploadRequest {
	return v.value
}

func (v *NullableCompleteUploadRequest) Set(val *CompleteUploadRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCompleteUploadRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCompleteUploadRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompleteUploadRequest(val *CompleteUploadRequest) *NullableCompleteUploadRequest {
	return &NullableCompleteUploadRequest{value: val, isSet: true}
}

func (v NullableCompleteUploadRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompleteUploadRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
