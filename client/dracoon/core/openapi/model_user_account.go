/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the UserAccount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserAccount{}

// UserAccount User information
type UserAccount struct {
	// Unique identifier for the user
	Id int64 `json:"id"`
	// &#128640; Since v4.13.0  Username
	UserName string `json:"userName"`
	// User first name
	FirstName string `json:"firstName"`
	// User last name
	LastName string `json:"lastName"`
	// User is locked:  * `false` - unlocked  * `true` - locked    User is locked and can not login anymore.
	IsLocked bool `json:"isLocked"`
	// User has manageable rooms
	HasManageableRooms bool     `json:"hasManageableRooms"`
	UserRoles          RoleList `json:"userRoles"`
	// &#128640; Since v4.20.0  IETF language tag
	Language string       `json:"language"`
	AuthData UserAuthData `json:"authData"`
	// &#128640; Since v4.13.0  If `true`, the user must set the `email` at the first login.
	MustSetEmail *bool `json:"mustSetEmail,omitempty"`
	// User has accepted EULA.  Present, if EULA is system global active.  cf. `GET system/config/settings/general` - `eulaEnabled`
	NeedsToAcceptEULA *bool `json:"needsToAcceptEULA,omitempty"`
	// Expiration date
	ExpireAt *time.Time `json:"expireAt,omitempty"`
	// User has generated private key.  Possible if client-side encryption is active for this customer
	IsEncryptionEnabled *bool `json:"isEncryptionEnabled,omitempty"`
	// Last successful logon date
	LastLoginSuccessAt *time.Time `json:"lastLoginSuccessAt,omitempty"`
	// Last failed logon date
	LastLoginFailAt *time.Time `json:"lastLoginFailAt,omitempty"`
	// Email
	Email *string `json:"email,omitempty"`
	// Phone number
	Phone *string `json:"phone,omitempty"`
	// Homeroom ID
	HomeRoomId *int64 `json:"homeRoomId,omitempty"`
	// All groups the user is member of
	UserGroups []UserGroup `json:"userGroups,omitempty"`
	// Deprecated
	UserAttributes *UserAttributes `json:"userAttributes,omitempty"`
	// &#128679; Deprecated since v4.18.0  Job title
	// Deprecated
	Title *string `json:"title,omitempty"`
	// &#128679; Deprecated since v4.6.0  Last successful logon IP address
	// Deprecated
	LastLoginSuccessIp *string `json:"lastLoginSuccessIp,omitempty"`
	// &#128679; Deprecated since v4.6.0  Last failed logon IP address
	// Deprecated
	LastLoginFailIp *string `json:"lastLoginFailIp,omitempty"`
	// &#128679; Deprecated since v4.12.0  Gender
	// Deprecated
	Gender *string `json:"gender,omitempty"`
	// &#128679; Deprecated since v4.13.0  If `true`, the user must change the `userName` at the first login.
	// Deprecated
	NeedsToChangeUserName *bool `json:"needsToChangeUserName,omitempty"`
	// &#128679; Deprecated since v4.13.0  Authentication methods:  * `sql`  * `active_directory`  * `openid`  use `authData` instead
	// Deprecated
	AuthMethods []UserAuthMethod `json:"authMethods,omitempty"`
	// &#128679; Deprecated since v4.13.0  User login name
	// Deprecated
	Login *string `json:"login,omitempty"`
	// &#128679; Deprecated since v4.7.0  User lock status:  * `0` - locked  * `1` - Web access allowed  * `2` - Web and mobile access allowed    Please use `isLocked` instead.
	// Deprecated
	LockStatus int32 `json:"lockStatus"`
	// &#128679; Deprecated since v4.13.0  Determines whether user has to change his / her password
	// Deprecated
	NeedsToChangePassword bool `json:"needsToChangePassword"`
}

type _UserAccount UserAccount

// NewUserAccount instantiates a new UserAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserAccount(id int64, userName string, firstName string, lastName string, isLocked bool, hasManageableRooms bool, userRoles RoleList, language string, authData UserAuthData, lockStatus int32, needsToChangePassword bool) *UserAccount {
	this := UserAccount{}
	this.Id = id
	this.UserName = userName
	this.FirstName = firstName
	this.LastName = lastName
	this.IsLocked = isLocked
	this.HasManageableRooms = hasManageableRooms
	this.UserRoles = userRoles
	this.Language = language
	this.AuthData = authData
	var mustSetEmail bool = false
	this.MustSetEmail = &mustSetEmail
	var gender string = "n"
	this.Gender = &gender
	var needsToChangeUserName bool = false
	this.NeedsToChangeUserName = &needsToChangeUserName
	this.LockStatus = lockStatus
	this.NeedsToChangePassword = needsToChangePassword
	return &this
}

// NewUserAccountWithDefaults instantiates a new UserAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserAccountWithDefaults() *UserAccount {
	this := UserAccount{}
	var isLocked bool = false
	this.IsLocked = isLocked
	var mustSetEmail bool = false
	this.MustSetEmail = &mustSetEmail
	var gender string = "n"
	this.Gender = &gender
	var needsToChangeUserName bool = false
	this.NeedsToChangeUserName = &needsToChangeUserName
	return &this
}

// GetId returns the Id field value
func (o *UserAccount) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UserAccount) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UserAccount) SetId(v int64) {
	o.Id = v
}

// GetUserName returns the UserName field value
func (o *UserAccount) GetUserName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value
// and a boolean to check if the value has been set.
func (o *UserAccount) GetUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserName, true
}

// SetUserName sets field value
func (o *UserAccount) SetUserName(v string) {
	o.UserName = v
}

// GetFirstName returns the FirstName field value
func (o *UserAccount) GetFirstName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value
// and a boolean to check if the value has been set.
func (o *UserAccount) GetFirstNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstName, true
}

// SetFirstName sets field value
func (o *UserAccount) SetFirstName(v string) {
	o.FirstName = v
}

// GetLastName returns the LastName field value
func (o *UserAccount) GetLastName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value
// and a boolean to check if the value has been set.
func (o *UserAccount) GetLastNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastName, true
}

// SetLastName sets field value
func (o *UserAccount) SetLastName(v string) {
	o.LastName = v
}

// GetIsLocked returns the IsLocked field value
func (o *UserAccount) GetIsLocked() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsLocked
}

// GetIsLockedOk returns a tuple with the IsLocked field value
// and a boolean to check if the value has been set.
func (o *UserAccount) GetIsLockedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsLocked, true
}

// SetIsLocked sets field value
func (o *UserAccount) SetIsLocked(v bool) {
	o.IsLocked = v
}

// GetHasManageableRooms returns the HasManageableRooms field value
func (o *UserAccount) GetHasManageableRooms() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasManageableRooms
}

// GetHasManageableRoomsOk returns a tuple with the HasManageableRooms field value
// and a boolean to check if the value has been set.
func (o *UserAccount) GetHasManageableRoomsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasManageableRooms, true
}

// SetHasManageableRooms sets field value
func (o *UserAccount) SetHasManageableRooms(v bool) {
	o.HasManageableRooms = v
}

// GetUserRoles returns the UserRoles field value
func (o *UserAccount) GetUserRoles() RoleList {
	if o == nil {
		var ret RoleList
		return ret
	}

	return o.UserRoles
}

// GetUserRolesOk returns a tuple with the UserRoles field value
// and a boolean to check if the value has been set.
func (o *UserAccount) GetUserRolesOk() (*RoleList, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserRoles, true
}

// SetUserRoles sets field value
func (o *UserAccount) SetUserRoles(v RoleList) {
	o.UserRoles = v
}

// GetLanguage returns the Language field value
func (o *UserAccount) GetLanguage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Language
}

// GetLanguageOk returns a tuple with the Language field value
// and a boolean to check if the value has been set.
func (o *UserAccount) GetLanguageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Language, true
}

// SetLanguage sets field value
func (o *UserAccount) SetLanguage(v string) {
	o.Language = v
}

// GetAuthData returns the AuthData field value
func (o *UserAccount) GetAuthData() UserAuthData {
	if o == nil {
		var ret UserAuthData
		return ret
	}

	return o.AuthData
}

// GetAuthDataOk returns a tuple with the AuthData field value
// and a boolean to check if the value has been set.
func (o *UserAccount) GetAuthDataOk() (*UserAuthData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthData, true
}

// SetAuthData sets field value
func (o *UserAccount) SetAuthData(v UserAuthData) {
	o.AuthData = v
}

// GetMustSetEmail returns the MustSetEmail field value if set, zero value otherwise.
func (o *UserAccount) GetMustSetEmail() bool {
	if o == nil || IsNil(o.MustSetEmail) {
		var ret bool
		return ret
	}
	return *o.MustSetEmail
}

// GetMustSetEmailOk returns a tuple with the MustSetEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccount) GetMustSetEmailOk() (*bool, bool) {
	if o == nil || IsNil(o.MustSetEmail) {
		return nil, false
	}
	return o.MustSetEmail, true
}

// HasMustSetEmail returns a boolean if a field has been set.
func (o *UserAccount) HasMustSetEmail() bool {
	if o != nil && !IsNil(o.MustSetEmail) {
		return true
	}

	return false
}

// SetMustSetEmail gets a reference to the given bool and assigns it to the MustSetEmail field.
func (o *UserAccount) SetMustSetEmail(v bool) {
	o.MustSetEmail = &v
}

// GetNeedsToAcceptEULA returns the NeedsToAcceptEULA field value if set, zero value otherwise.
func (o *UserAccount) GetNeedsToAcceptEULA() bool {
	if o == nil || IsNil(o.NeedsToAcceptEULA) {
		var ret bool
		return ret
	}
	return *o.NeedsToAcceptEULA
}

// GetNeedsToAcceptEULAOk returns a tuple with the NeedsToAcceptEULA field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccount) GetNeedsToAcceptEULAOk() (*bool, bool) {
	if o == nil || IsNil(o.NeedsToAcceptEULA) {
		return nil, false
	}
	return o.NeedsToAcceptEULA, true
}

// HasNeedsToAcceptEULA returns a boolean if a field has been set.
func (o *UserAccount) HasNeedsToAcceptEULA() bool {
	if o != nil && !IsNil(o.NeedsToAcceptEULA) {
		return true
	}

	return false
}

// SetNeedsToAcceptEULA gets a reference to the given bool and assigns it to the NeedsToAcceptEULA field.
func (o *UserAccount) SetNeedsToAcceptEULA(v bool) {
	o.NeedsToAcceptEULA = &v
}

// GetExpireAt returns the ExpireAt field value if set, zero value otherwise.
func (o *UserAccount) GetExpireAt() time.Time {
	if o == nil || IsNil(o.ExpireAt) {
		var ret time.Time
		return ret
	}
	return *o.ExpireAt
}

// GetExpireAtOk returns a tuple with the ExpireAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccount) GetExpireAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpireAt) {
		return nil, false
	}
	return o.ExpireAt, true
}

// HasExpireAt returns a boolean if a field has been set.
func (o *UserAccount) HasExpireAt() bool {
	if o != nil && !IsNil(o.ExpireAt) {
		return true
	}

	return false
}

// SetExpireAt gets a reference to the given time.Time and assigns it to the ExpireAt field.
func (o *UserAccount) SetExpireAt(v time.Time) {
	o.ExpireAt = &v
}

// GetIsEncryptionEnabled returns the IsEncryptionEnabled field value if set, zero value otherwise.
func (o *UserAccount) GetIsEncryptionEnabled() bool {
	if o == nil || IsNil(o.IsEncryptionEnabled) {
		var ret bool
		return ret
	}
	return *o.IsEncryptionEnabled
}

// GetIsEncryptionEnabledOk returns a tuple with the IsEncryptionEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccount) GetIsEncryptionEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEncryptionEnabled) {
		return nil, false
	}
	return o.IsEncryptionEnabled, true
}

// HasIsEncryptionEnabled returns a boolean if a field has been set.
func (o *UserAccount) HasIsEncryptionEnabled() bool {
	if o != nil && !IsNil(o.IsEncryptionEnabled) {
		return true
	}

	return false
}

// SetIsEncryptionEnabled gets a reference to the given bool and assigns it to the IsEncryptionEnabled field.
func (o *UserAccount) SetIsEncryptionEnabled(v bool) {
	o.IsEncryptionEnabled = &v
}

// GetLastLoginSuccessAt returns the LastLoginSuccessAt field value if set, zero value otherwise.
func (o *UserAccount) GetLastLoginSuccessAt() time.Time {
	if o == nil || IsNil(o.LastLoginSuccessAt) {
		var ret time.Time
		return ret
	}
	return *o.LastLoginSuccessAt
}

// GetLastLoginSuccessAtOk returns a tuple with the LastLoginSuccessAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccount) GetLastLoginSuccessAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastLoginSuccessAt) {
		return nil, false
	}
	return o.LastLoginSuccessAt, true
}

// HasLastLoginSuccessAt returns a boolean if a field has been set.
func (o *UserAccount) HasLastLoginSuccessAt() bool {
	if o != nil && !IsNil(o.LastLoginSuccessAt) {
		return true
	}

	return false
}

// SetLastLoginSuccessAt gets a reference to the given time.Time and assigns it to the LastLoginSuccessAt field.
func (o *UserAccount) SetLastLoginSuccessAt(v time.Time) {
	o.LastLoginSuccessAt = &v
}

// GetLastLoginFailAt returns the LastLoginFailAt field value if set, zero value otherwise.
func (o *UserAccount) GetLastLoginFailAt() time.Time {
	if o == nil || IsNil(o.LastLoginFailAt) {
		var ret time.Time
		return ret
	}
	return *o.LastLoginFailAt
}

// GetLastLoginFailAtOk returns a tuple with the LastLoginFailAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccount) GetLastLoginFailAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastLoginFailAt) {
		return nil, false
	}
	return o.LastLoginFailAt, true
}

// HasLastLoginFailAt returns a boolean if a field has been set.
func (o *UserAccount) HasLastLoginFailAt() bool {
	if o != nil && !IsNil(o.LastLoginFailAt) {
		return true
	}

	return false
}

// SetLastLoginFailAt gets a reference to the given time.Time and assigns it to the LastLoginFailAt field.
func (o *UserAccount) SetLastLoginFailAt(v time.Time) {
	o.LastLoginFailAt = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UserAccount) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccount) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UserAccount) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UserAccount) SetEmail(v string) {
	o.Email = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *UserAccount) GetPhone() string {
	if o == nil || IsNil(o.Phone) {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccount) GetPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.Phone) {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *UserAccount) HasPhone() bool {
	if o != nil && !IsNil(o.Phone) {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *UserAccount) SetPhone(v string) {
	o.Phone = &v
}

// GetHomeRoomId returns the HomeRoomId field value if set, zero value otherwise.
func (o *UserAccount) GetHomeRoomId() int64 {
	if o == nil || IsNil(o.HomeRoomId) {
		var ret int64
		return ret
	}
	return *o.HomeRoomId
}

// GetHomeRoomIdOk returns a tuple with the HomeRoomId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccount) GetHomeRoomIdOk() (*int64, bool) {
	if o == nil || IsNil(o.HomeRoomId) {
		return nil, false
	}
	return o.HomeRoomId, true
}

// HasHomeRoomId returns a boolean if a field has been set.
func (o *UserAccount) HasHomeRoomId() bool {
	if o != nil && !IsNil(o.HomeRoomId) {
		return true
	}

	return false
}

// SetHomeRoomId gets a reference to the given int64 and assigns it to the HomeRoomId field.
func (o *UserAccount) SetHomeRoomId(v int64) {
	o.HomeRoomId = &v
}

// GetUserGroups returns the UserGroups field value if set, zero value otherwise.
func (o *UserAccount) GetUserGroups() []UserGroup {
	if o == nil || IsNil(o.UserGroups) {
		var ret []UserGroup
		return ret
	}
	return o.UserGroups
}

// GetUserGroupsOk returns a tuple with the UserGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccount) GetUserGroupsOk() ([]UserGroup, bool) {
	if o == nil || IsNil(o.UserGroups) {
		return nil, false
	}
	return o.UserGroups, true
}

// HasUserGroups returns a boolean if a field has been set.
func (o *UserAccount) HasUserGroups() bool {
	if o != nil && !IsNil(o.UserGroups) {
		return true
	}

	return false
}

// SetUserGroups gets a reference to the given []UserGroup and assigns it to the UserGroups field.
func (o *UserAccount) SetUserGroups(v []UserGroup) {
	o.UserGroups = v
}

// GetUserAttributes returns the UserAttributes field value if set, zero value otherwise.
// Deprecated
func (o *UserAccount) GetUserAttributes() UserAttributes {
	if o == nil || IsNil(o.UserAttributes) {
		var ret UserAttributes
		return ret
	}
	return *o.UserAttributes
}

// GetUserAttributesOk returns a tuple with the UserAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *UserAccount) GetUserAttributesOk() (*UserAttributes, bool) {
	if o == nil || IsNil(o.UserAttributes) {
		return nil, false
	}
	return o.UserAttributes, true
}

// HasUserAttributes returns a boolean if a field has been set.
func (o *UserAccount) HasUserAttributes() bool {
	if o != nil && !IsNil(o.UserAttributes) {
		return true
	}

	return false
}

// SetUserAttributes gets a reference to the given UserAttributes and assigns it to the UserAttributes field.
// Deprecated
func (o *UserAccount) SetUserAttributes(v UserAttributes) {
	o.UserAttributes = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
// Deprecated
func (o *UserAccount) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *UserAccount) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *UserAccount) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
// Deprecated
func (o *UserAccount) SetTitle(v string) {
	o.Title = &v
}

// GetLastLoginSuccessIp returns the LastLoginSuccessIp field value if set, zero value otherwise.
// Deprecated
func (o *UserAccount) GetLastLoginSuccessIp() string {
	if o == nil || IsNil(o.LastLoginSuccessIp) {
		var ret string
		return ret
	}
	return *o.LastLoginSuccessIp
}

// GetLastLoginSuccessIpOk returns a tuple with the LastLoginSuccessIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *UserAccount) GetLastLoginSuccessIpOk() (*string, bool) {
	if o == nil || IsNil(o.LastLoginSuccessIp) {
		return nil, false
	}
	return o.LastLoginSuccessIp, true
}

// HasLastLoginSuccessIp returns a boolean if a field has been set.
func (o *UserAccount) HasLastLoginSuccessIp() bool {
	if o != nil && !IsNil(o.LastLoginSuccessIp) {
		return true
	}

	return false
}

// SetLastLoginSuccessIp gets a reference to the given string and assigns it to the LastLoginSuccessIp field.
// Deprecated
func (o *UserAccount) SetLastLoginSuccessIp(v string) {
	o.LastLoginSuccessIp = &v
}

// GetLastLoginFailIp returns the LastLoginFailIp field value if set, zero value otherwise.
// Deprecated
func (o *UserAccount) GetLastLoginFailIp() string {
	if o == nil || IsNil(o.LastLoginFailIp) {
		var ret string
		return ret
	}
	return *o.LastLoginFailIp
}

// GetLastLoginFailIpOk returns a tuple with the LastLoginFailIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *UserAccount) GetLastLoginFailIpOk() (*string, bool) {
	if o == nil || IsNil(o.LastLoginFailIp) {
		return nil, false
	}
	return o.LastLoginFailIp, true
}

// HasLastLoginFailIp returns a boolean if a field has been set.
func (o *UserAccount) HasLastLoginFailIp() bool {
	if o != nil && !IsNil(o.LastLoginFailIp) {
		return true
	}

	return false
}

// SetLastLoginFailIp gets a reference to the given string and assigns it to the LastLoginFailIp field.
// Deprecated
func (o *UserAccount) SetLastLoginFailIp(v string) {
	o.LastLoginFailIp = &v
}

// GetGender returns the Gender field value if set, zero value otherwise.
// Deprecated
func (o *UserAccount) GetGender() string {
	if o == nil || IsNil(o.Gender) {
		var ret string
		return ret
	}
	return *o.Gender
}

// GetGenderOk returns a tuple with the Gender field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *UserAccount) GetGenderOk() (*string, bool) {
	if o == nil || IsNil(o.Gender) {
		return nil, false
	}
	return o.Gender, true
}

// HasGender returns a boolean if a field has been set.
func (o *UserAccount) HasGender() bool {
	if o != nil && !IsNil(o.Gender) {
		return true
	}

	return false
}

// SetGender gets a reference to the given string and assigns it to the Gender field.
// Deprecated
func (o *UserAccount) SetGender(v string) {
	o.Gender = &v
}

// GetNeedsToChangeUserName returns the NeedsToChangeUserName field value if set, zero value otherwise.
// Deprecated
func (o *UserAccount) GetNeedsToChangeUserName() bool {
	if o == nil || IsNil(o.NeedsToChangeUserName) {
		var ret bool
		return ret
	}
	return *o.NeedsToChangeUserName
}

// GetNeedsToChangeUserNameOk returns a tuple with the NeedsToChangeUserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *UserAccount) GetNeedsToChangeUserNameOk() (*bool, bool) {
	if o == nil || IsNil(o.NeedsToChangeUserName) {
		return nil, false
	}
	return o.NeedsToChangeUserName, true
}

// HasNeedsToChangeUserName returns a boolean if a field has been set.
func (o *UserAccount) HasNeedsToChangeUserName() bool {
	if o != nil && !IsNil(o.NeedsToChangeUserName) {
		return true
	}

	return false
}

// SetNeedsToChangeUserName gets a reference to the given bool and assigns it to the NeedsToChangeUserName field.
// Deprecated
func (o *UserAccount) SetNeedsToChangeUserName(v bool) {
	o.NeedsToChangeUserName = &v
}

// GetAuthMethods returns the AuthMethods field value if set, zero value otherwise.
// Deprecated
func (o *UserAccount) GetAuthMethods() []UserAuthMethod {
	if o == nil || IsNil(o.AuthMethods) {
		var ret []UserAuthMethod
		return ret
	}
	return o.AuthMethods
}

// GetAuthMethodsOk returns a tuple with the AuthMethods field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *UserAccount) GetAuthMethodsOk() ([]UserAuthMethod, bool) {
	if o == nil || IsNil(o.AuthMethods) {
		return nil, false
	}
	return o.AuthMethods, true
}

// HasAuthMethods returns a boolean if a field has been set.
func (o *UserAccount) HasAuthMethods() bool {
	if o != nil && !IsNil(o.AuthMethods) {
		return true
	}

	return false
}

// SetAuthMethods gets a reference to the given []UserAuthMethod and assigns it to the AuthMethods field.
// Deprecated
func (o *UserAccount) SetAuthMethods(v []UserAuthMethod) {
	o.AuthMethods = v
}

// GetLogin returns the Login field value if set, zero value otherwise.
// Deprecated
func (o *UserAccount) GetLogin() string {
	if o == nil || IsNil(o.Login) {
		var ret string
		return ret
	}
	return *o.Login
}

// GetLoginOk returns a tuple with the Login field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *UserAccount) GetLoginOk() (*string, bool) {
	if o == nil || IsNil(o.Login) {
		return nil, false
	}
	return o.Login, true
}

// HasLogin returns a boolean if a field has been set.
func (o *UserAccount) HasLogin() bool {
	if o != nil && !IsNil(o.Login) {
		return true
	}

	return false
}

// SetLogin gets a reference to the given string and assigns it to the Login field.
// Deprecated
func (o *UserAccount) SetLogin(v string) {
	o.Login = &v
}

// GetLockStatus returns the LockStatus field value
// Deprecated
func (o *UserAccount) GetLockStatus() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LockStatus
}

// GetLockStatusOk returns a tuple with the LockStatus field value
// and a boolean to check if the value has been set.
// Deprecated
func (o *UserAccount) GetLockStatusOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LockStatus, true
}

// SetLockStatus sets field value
// Deprecated
func (o *UserAccount) SetLockStatus(v int32) {
	o.LockStatus = v
}

// GetNeedsToChangePassword returns the NeedsToChangePassword field value
// Deprecated
func (o *UserAccount) GetNeedsToChangePassword() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.NeedsToChangePassword
}

// GetNeedsToChangePasswordOk returns a tuple with the NeedsToChangePassword field value
// and a boolean to check if the value has been set.
// Deprecated
func (o *UserAccount) GetNeedsToChangePasswordOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NeedsToChangePassword, true
}

// SetNeedsToChangePassword sets field value
// Deprecated
func (o *UserAccount) SetNeedsToChangePassword(v bool) {
	o.NeedsToChangePassword = v
}

func (o UserAccount) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserAccount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["userName"] = o.UserName
	toSerialize["firstName"] = o.FirstName
	toSerialize["lastName"] = o.LastName
	toSerialize["isLocked"] = o.IsLocked
	toSerialize["hasManageableRooms"] = o.HasManageableRooms
	toSerialize["userRoles"] = o.UserRoles
	toSerialize["language"] = o.Language
	toSerialize["authData"] = o.AuthData
	if !IsNil(o.MustSetEmail) {
		toSerialize["mustSetEmail"] = o.MustSetEmail
	}
	if !IsNil(o.NeedsToAcceptEULA) {
		toSerialize["needsToAcceptEULA"] = o.NeedsToAcceptEULA
	}
	if !IsNil(o.ExpireAt) {
		toSerialize["expireAt"] = o.ExpireAt
	}
	if !IsNil(o.IsEncryptionEnabled) {
		toSerialize["isEncryptionEnabled"] = o.IsEncryptionEnabled
	}
	if !IsNil(o.LastLoginSuccessAt) {
		toSerialize["lastLoginSuccessAt"] = o.LastLoginSuccessAt
	}
	if !IsNil(o.LastLoginFailAt) {
		toSerialize["lastLoginFailAt"] = o.LastLoginFailAt
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Phone) {
		toSerialize["phone"] = o.Phone
	}
	if !IsNil(o.HomeRoomId) {
		toSerialize["homeRoomId"] = o.HomeRoomId
	}
	if !IsNil(o.UserGroups) {
		toSerialize["userGroups"] = o.UserGroups
	}
	if !IsNil(o.UserAttributes) {
		toSerialize["userAttributes"] = o.UserAttributes
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.LastLoginSuccessIp) {
		toSerialize["lastLoginSuccessIp"] = o.LastLoginSuccessIp
	}
	if !IsNil(o.LastLoginFailIp) {
		toSerialize["lastLoginFailIp"] = o.LastLoginFailIp
	}
	if !IsNil(o.Gender) {
		toSerialize["gender"] = o.Gender
	}
	if !IsNil(o.NeedsToChangeUserName) {
		toSerialize["needsToChangeUserName"] = o.NeedsToChangeUserName
	}
	if !IsNil(o.AuthMethods) {
		toSerialize["authMethods"] = o.AuthMethods
	}
	if !IsNil(o.Login) {
		toSerialize["login"] = o.Login
	}
	toSerialize["lockStatus"] = o.LockStatus
	toSerialize["needsToChangePassword"] = o.NeedsToChangePassword
	return toSerialize, nil
}

func (o *UserAccount) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"userName",
		"firstName",
		"lastName",
		"isLocked",
		"hasManageableRooms",
		"userRoles",
		"language",
		"authData",
		"lockStatus",
		"needsToChangePassword",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserAccount := _UserAccount{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserAccount)

	if err != nil {
		return err
	}

	*o = UserAccount(varUserAccount)

	return err
}

type NullableUserAccount struct {
	value *UserAccount
	isSet bool
}

func (v NullableUserAccount) Get() *UserAccount {
	return v.value
}

func (v *NullableUserAccount) Set(val *UserAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableUserAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableUserAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserAccount(val *UserAccount) *NullableUserAccount {
	return &NullableUserAccount{value: val, isSet: true}
}

func (v NullableUserAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
