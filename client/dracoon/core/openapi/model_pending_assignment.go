/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PendingAssignment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PendingAssignment{}

// PendingAssignment Pending assignment information
type PendingAssignment struct {
	// Unique identifier for the user
	UserId int64 `json:"userId"`
	// Unique identifier for the group
	GroupId int64 `json:"groupId"`
	// Room ID
	RoomId int64 `json:"roomId"`
	// Room name
	RoomName string `json:"roomName"`
	// Acceptance state:  * `ACCEPTED`  * `WAITING`  * `DENIED`
	State string `json:"state"`
}

type _PendingAssignment PendingAssignment

// NewPendingAssignment instantiates a new PendingAssignment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPendingAssignment(userId int64, groupId int64, roomId int64, roomName string, state string) *PendingAssignment {
	this := PendingAssignment{}
	this.UserId = userId
	this.GroupId = groupId
	this.RoomId = roomId
	this.RoomName = roomName
	this.State = state
	return &this
}

// NewPendingAssignmentWithDefaults instantiates a new PendingAssignment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPendingAssignmentWithDefaults() *PendingAssignment {
	this := PendingAssignment{}
	return &this
}

// GetUserId returns the UserId field value
func (o *PendingAssignment) GetUserId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *PendingAssignment) GetUserIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *PendingAssignment) SetUserId(v int64) {
	o.UserId = v
}

// GetGroupId returns the GroupId field value
func (o *PendingAssignment) GetGroupId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value
// and a boolean to check if the value has been set.
func (o *PendingAssignment) GetGroupIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupId, true
}

// SetGroupId sets field value
func (o *PendingAssignment) SetGroupId(v int64) {
	o.GroupId = v
}

// GetRoomId returns the RoomId field value
func (o *PendingAssignment) GetRoomId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.RoomId
}

// GetRoomIdOk returns a tuple with the RoomId field value
// and a boolean to check if the value has been set.
func (o *PendingAssignment) GetRoomIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RoomId, true
}

// SetRoomId sets field value
func (o *PendingAssignment) SetRoomId(v int64) {
	o.RoomId = v
}

// GetRoomName returns the RoomName field value
func (o *PendingAssignment) GetRoomName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RoomName
}

// GetRoomNameOk returns a tuple with the RoomName field value
// and a boolean to check if the value has been set.
func (o *PendingAssignment) GetRoomNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RoomName, true
}

// SetRoomName sets field value
func (o *PendingAssignment) SetRoomName(v string) {
	o.RoomName = v
}

// GetState returns the State field value
func (o *PendingAssignment) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *PendingAssignment) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *PendingAssignment) SetState(v string) {
	o.State = v
}

func (o PendingAssignment) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PendingAssignment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["userId"] = o.UserId
	toSerialize["groupId"] = o.GroupId
	toSerialize["roomId"] = o.RoomId
	toSerialize["roomName"] = o.RoomName
	toSerialize["state"] = o.State
	return toSerialize, nil
}

func (o *PendingAssignment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"userId",
		"groupId",
		"roomId",
		"roomName",
		"state",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPendingAssignment := _PendingAssignment{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPendingAssignment)

	if err != nil {
		return err
	}

	*o = PendingAssignment(varPendingAssignment)

	return err
}

type NullablePendingAssignment struct {
	value *PendingAssignment
	isSet bool
}

func (v NullablePendingAssignment) Get() *PendingAssignment {
	return v.value
}

func (v *NullablePendingAssignment) Set(val *PendingAssignment) {
	v.value = val
	v.isSet = true
}

func (v NullablePendingAssignment) IsSet() bool {
	return v.isSet
}

func (v *NullablePendingAssignment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePendingAssignment(val *PendingAssignment) *NullablePendingAssignment {
	return &NullablePendingAssignment{value: val, isSet: true}
}

func (v NullablePendingAssignment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePendingAssignment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
