/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Node type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Node{}

// Node Node information (Node can be a room, folder or file)
type Node struct {
	// Node ID
	Id int64 `json:"id"`
	// &#128640; Since v4.37.0  Reference ID. Identical across all versions of a file
	ReferenceId *int64 `json:"referenceId,omitempty"`
	// Node type
	Type string `json:"type"`
	// Name
	Name string `json:"name"`
	// &#128640; Since v4.22.0  Time the node was created on external file system
	TimestampCreation *time.Time `json:"timestampCreation,omitempty"`
	// &#128640; Since v4.22.0  Time the content of a node was last modified on external file system
	TimestampModification *time.Time `json:"timestampModification,omitempty"`
	// Parent node ID (room or folder)
	ParentId *int64 `json:"parentId,omitempty"`
	// Parent node path  `/` if node is a root node (room)
	ParentPath *string `json:"parentPath,omitempty"`
	// Creation date
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	CreatedBy *UserInfo  `json:"createdBy,omitempty"`
	// Modification date
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	UpdatedBy *UserInfo  `json:"updatedBy,omitempty"`
	// Expiration date
	ExpireAt *time.Time `json:"expireAt,omitempty"`
	// MD5 hash of file
	Hash *string `json:"hash,omitempty"`
	// File type / extension (for files only)
	FileType *string `json:"fileType,omitempty"`
	// File media type (for files only)
	MediaType *string `json:"mediaType,omitempty"`
	// Node size in byte
	Size *int64 `json:"size,omitempty"`
	// Classification ID:  * `1` - public  * `2` - internal  * `3` - confidential  * `4` - strictly confidential
	Classification *int32 `json:"classification,omitempty"`
	// User notes
	Notes       *string          `json:"notes,omitempty"`
	Permissions *NodePermissions `json:"permissions,omitempty"`
	// Inherit permissions from parent room  (default: `false` if `parentId` is `0`; otherwise: `true`)
	InheritPermissions *bool `json:"inheritPermissions,omitempty"`
	// Encryption state
	IsEncrypted    *bool           `json:"isEncrypted,omitempty"`
	EncryptionInfo *EncryptionInfo `json:"encryptionInfo,omitempty"`
	// Number of deleted versions of this file / folder  (for rooms / folders only)
	CntDeletedVersions *int32 `json:"cntDeletedVersions,omitempty"`
	// Returns the number of comments of this node.
	CntComments *int32 `json:"cntComments,omitempty"`
	// Returns the number of Download Shares of this node.
	CntDownloadShares *int32 `json:"cntDownloadShares,omitempty"`
	// Returns the number of Upload Shares of this node.
	CntUploadShares *int32 `json:"cntUploadShares,omitempty"`
	// Retention period for deleted nodes in days
	RecycleBinRetentionPeriod *int32 `json:"recycleBinRetentionPeriod,omitempty"`
	// Is activities log active (for rooms only)
	HasActivitiesLog *bool `json:"hasActivitiesLog,omitempty"`
	// Quota in byte
	Quota *int64 `json:"quota,omitempty"`
	// Node is marked as favorite (for rooms / folders only)
	IsFavorite *bool `json:"isFavorite,omitempty"`
	// Node is subscribed
	IsSubscribed *bool `json:"isSubscribed,omitempty"`
	// Version of last change in this node or a node further down the tree.
	BranchVersion *int64 `json:"branchVersion,omitempty"`
	// Media server media token
	MediaToken *string `json:"mediaToken,omitempty"`
	// &#128640; Since v4.11.0  Determines whether node is browsable by client (for rooms only)
	IsBrowsable *bool `json:"isBrowsable,omitempty"`
	// &#128640; Since v4.11.0  Amount of direct child rooms where this node is the parent node  (no recursion; for rooms only)
	CntRooms *int32 `json:"cntRooms,omitempty"`
	// &#128640; Since v4.11.0  Amount of direct child folders where this node is the parent node  (no recursion; for rooms / folders only)
	CntFolders *int32 `json:"cntFolders,omitempty"`
	// &#128640; Since v4.11.0  Amount of direct child files where this node is the parent node  (no recursion; for rooms / folders only)
	CntFiles *int32 `json:"cntFiles,omitempty"`
	// &#128640; Since v4.15.0  Auth parent room ID
	AuthParentId *int64 `json:"authParentId,omitempty"`
	// &#128679; Deprecated since v4.11.0  Number of direct children  (no recursion; for rooms / folders only)
	// Deprecated
	CntChildren *int32 `json:"cntChildren,omitempty"`
	// &#128679; Deprecated since v4.10.0  Child nodes list (if requested)  (for rooms / folders only)
	// Deprecated
	Children            []Node               `json:"children,omitempty"`
	VirusProtectionInfo *VirusProtectionInfo `json:"virusProtectionInfo,omitempty"`
}

type _Node Node

// NewNode instantiates a new Node object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNode(id int64, type_ string, name string) *Node {
	this := Node{}
	this.Id = id
	this.Type = type_
	this.Name = name
	var hasActivitiesLog bool = true
	this.HasActivitiesLog = &hasActivitiesLog
	return &this
}

// NewNodeWithDefaults instantiates a new Node object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeWithDefaults() *Node {
	this := Node{}
	var hasActivitiesLog bool = true
	this.HasActivitiesLog = &hasActivitiesLog
	return &this
}

// GetId returns the Id field value
func (o *Node) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Node) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Node) SetId(v int64) {
	o.Id = v
}

// GetReferenceId returns the ReferenceId field value if set, zero value otherwise.
func (o *Node) GetReferenceId() int64 {
	if o == nil || IsNil(o.ReferenceId) {
		var ret int64
		return ret
	}
	return *o.ReferenceId
}

// GetReferenceIdOk returns a tuple with the ReferenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetReferenceIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ReferenceId) {
		return nil, false
	}
	return o.ReferenceId, true
}

// HasReferenceId returns a boolean if a field has been set.
func (o *Node) HasReferenceId() bool {
	if o != nil && !IsNil(o.ReferenceId) {
		return true
	}

	return false
}

// SetReferenceId gets a reference to the given int64 and assigns it to the ReferenceId field.
func (o *Node) SetReferenceId(v int64) {
	o.ReferenceId = &v
}

// GetType returns the Type field value
func (o *Node) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Node) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Node) SetType(v string) {
	o.Type = v
}

// GetName returns the Name field value
func (o *Node) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Node) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Node) SetName(v string) {
	o.Name = v
}

// GetTimestampCreation returns the TimestampCreation field value if set, zero value otherwise.
func (o *Node) GetTimestampCreation() time.Time {
	if o == nil || IsNil(o.TimestampCreation) {
		var ret time.Time
		return ret
	}
	return *o.TimestampCreation
}

// GetTimestampCreationOk returns a tuple with the TimestampCreation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetTimestampCreationOk() (*time.Time, bool) {
	if o == nil || IsNil(o.TimestampCreation) {
		return nil, false
	}
	return o.TimestampCreation, true
}

// HasTimestampCreation returns a boolean if a field has been set.
func (o *Node) HasTimestampCreation() bool {
	if o != nil && !IsNil(o.TimestampCreation) {
		return true
	}

	return false
}

// SetTimestampCreation gets a reference to the given time.Time and assigns it to the TimestampCreation field.
func (o *Node) SetTimestampCreation(v time.Time) {
	o.TimestampCreation = &v
}

// GetTimestampModification returns the TimestampModification field value if set, zero value otherwise.
func (o *Node) GetTimestampModification() time.Time {
	if o == nil || IsNil(o.TimestampModification) {
		var ret time.Time
		return ret
	}
	return *o.TimestampModification
}

// GetTimestampModificationOk returns a tuple with the TimestampModification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetTimestampModificationOk() (*time.Time, bool) {
	if o == nil || IsNil(o.TimestampModification) {
		return nil, false
	}
	return o.TimestampModification, true
}

// HasTimestampModification returns a boolean if a field has been set.
func (o *Node) HasTimestampModification() bool {
	if o != nil && !IsNil(o.TimestampModification) {
		return true
	}

	return false
}

// SetTimestampModification gets a reference to the given time.Time and assigns it to the TimestampModification field.
func (o *Node) SetTimestampModification(v time.Time) {
	o.TimestampModification = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *Node) GetParentId() int64 {
	if o == nil || IsNil(o.ParentId) {
		var ret int64
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetParentIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ParentId) {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *Node) HasParentId() bool {
	if o != nil && !IsNil(o.ParentId) {
		return true
	}

	return false
}

// SetParentId gets a reference to the given int64 and assigns it to the ParentId field.
func (o *Node) SetParentId(v int64) {
	o.ParentId = &v
}

// GetParentPath returns the ParentPath field value if set, zero value otherwise.
func (o *Node) GetParentPath() string {
	if o == nil || IsNil(o.ParentPath) {
		var ret string
		return ret
	}
	return *o.ParentPath
}

// GetParentPathOk returns a tuple with the ParentPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetParentPathOk() (*string, bool) {
	if o == nil || IsNil(o.ParentPath) {
		return nil, false
	}
	return o.ParentPath, true
}

// HasParentPath returns a boolean if a field has been set.
func (o *Node) HasParentPath() bool {
	if o != nil && !IsNil(o.ParentPath) {
		return true
	}

	return false
}

// SetParentPath gets a reference to the given string and assigns it to the ParentPath field.
func (o *Node) SetParentPath(v string) {
	o.ParentPath = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Node) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Node) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Node) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *Node) GetCreatedBy() UserInfo {
	if o == nil || IsNil(o.CreatedBy) {
		var ret UserInfo
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetCreatedByOk() (*UserInfo, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *Node) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given UserInfo and assigns it to the CreatedBy field.
func (o *Node) SetCreatedBy(v UserInfo) {
	o.CreatedBy = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Node) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Node) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *Node) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *Node) GetUpdatedBy() UserInfo {
	if o == nil || IsNil(o.UpdatedBy) {
		var ret UserInfo
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetUpdatedByOk() (*UserInfo, bool) {
	if o == nil || IsNil(o.UpdatedBy) {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *Node) HasUpdatedBy() bool {
	if o != nil && !IsNil(o.UpdatedBy) {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given UserInfo and assigns it to the UpdatedBy field.
func (o *Node) SetUpdatedBy(v UserInfo) {
	o.UpdatedBy = &v
}

// GetExpireAt returns the ExpireAt field value if set, zero value otherwise.
func (o *Node) GetExpireAt() time.Time {
	if o == nil || IsNil(o.ExpireAt) {
		var ret time.Time
		return ret
	}
	return *o.ExpireAt
}

// GetExpireAtOk returns a tuple with the ExpireAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetExpireAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpireAt) {
		return nil, false
	}
	return o.ExpireAt, true
}

// HasExpireAt returns a boolean if a field has been set.
func (o *Node) HasExpireAt() bool {
	if o != nil && !IsNil(o.ExpireAt) {
		return true
	}

	return false
}

// SetExpireAt gets a reference to the given time.Time and assigns it to the ExpireAt field.
func (o *Node) SetExpireAt(v time.Time) {
	o.ExpireAt = &v
}

// GetHash returns the Hash field value if set, zero value otherwise.
func (o *Node) GetHash() string {
	if o == nil || IsNil(o.Hash) {
		var ret string
		return ret
	}
	return *o.Hash
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetHashOk() (*string, bool) {
	if o == nil || IsNil(o.Hash) {
		return nil, false
	}
	return o.Hash, true
}

// HasHash returns a boolean if a field has been set.
func (o *Node) HasHash() bool {
	if o != nil && !IsNil(o.Hash) {
		return true
	}

	return false
}

// SetHash gets a reference to the given string and assigns it to the Hash field.
func (o *Node) SetHash(v string) {
	o.Hash = &v
}

// GetFileType returns the FileType field value if set, zero value otherwise.
func (o *Node) GetFileType() string {
	if o == nil || IsNil(o.FileType) {
		var ret string
		return ret
	}
	return *o.FileType
}

// GetFileTypeOk returns a tuple with the FileType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetFileTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FileType) {
		return nil, false
	}
	return o.FileType, true
}

// HasFileType returns a boolean if a field has been set.
func (o *Node) HasFileType() bool {
	if o != nil && !IsNil(o.FileType) {
		return true
	}

	return false
}

// SetFileType gets a reference to the given string and assigns it to the FileType field.
func (o *Node) SetFileType(v string) {
	o.FileType = &v
}

// GetMediaType returns the MediaType field value if set, zero value otherwise.
func (o *Node) GetMediaType() string {
	if o == nil || IsNil(o.MediaType) {
		var ret string
		return ret
	}
	return *o.MediaType
}

// GetMediaTypeOk returns a tuple with the MediaType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetMediaTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MediaType) {
		return nil, false
	}
	return o.MediaType, true
}

// HasMediaType returns a boolean if a field has been set.
func (o *Node) HasMediaType() bool {
	if o != nil && !IsNil(o.MediaType) {
		return true
	}

	return false
}

// SetMediaType gets a reference to the given string and assigns it to the MediaType field.
func (o *Node) SetMediaType(v string) {
	o.MediaType = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *Node) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *Node) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *Node) SetSize(v int64) {
	o.Size = &v
}

// GetClassification returns the Classification field value if set, zero value otherwise.
func (o *Node) GetClassification() int32 {
	if o == nil || IsNil(o.Classification) {
		var ret int32
		return ret
	}
	return *o.Classification
}

// GetClassificationOk returns a tuple with the Classification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetClassificationOk() (*int32, bool) {
	if o == nil || IsNil(o.Classification) {
		return nil, false
	}
	return o.Classification, true
}

// HasClassification returns a boolean if a field has been set.
func (o *Node) HasClassification() bool {
	if o != nil && !IsNil(o.Classification) {
		return true
	}

	return false
}

// SetClassification gets a reference to the given int32 and assigns it to the Classification field.
func (o *Node) SetClassification(v int32) {
	o.Classification = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *Node) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *Node) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *Node) SetNotes(v string) {
	o.Notes = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *Node) GetPermissions() NodePermissions {
	if o == nil || IsNil(o.Permissions) {
		var ret NodePermissions
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetPermissionsOk() (*NodePermissions, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *Node) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given NodePermissions and assigns it to the Permissions field.
func (o *Node) SetPermissions(v NodePermissions) {
	o.Permissions = &v
}

// GetInheritPermissions returns the InheritPermissions field value if set, zero value otherwise.
func (o *Node) GetInheritPermissions() bool {
	if o == nil || IsNil(o.InheritPermissions) {
		var ret bool
		return ret
	}
	return *o.InheritPermissions
}

// GetInheritPermissionsOk returns a tuple with the InheritPermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetInheritPermissionsOk() (*bool, bool) {
	if o == nil || IsNil(o.InheritPermissions) {
		return nil, false
	}
	return o.InheritPermissions, true
}

// HasInheritPermissions returns a boolean if a field has been set.
func (o *Node) HasInheritPermissions() bool {
	if o != nil && !IsNil(o.InheritPermissions) {
		return true
	}

	return false
}

// SetInheritPermissions gets a reference to the given bool and assigns it to the InheritPermissions field.
func (o *Node) SetInheritPermissions(v bool) {
	o.InheritPermissions = &v
}

// GetIsEncrypted returns the IsEncrypted field value if set, zero value otherwise.
func (o *Node) GetIsEncrypted() bool {
	if o == nil || IsNil(o.IsEncrypted) {
		var ret bool
		return ret
	}
	return *o.IsEncrypted
}

// GetIsEncryptedOk returns a tuple with the IsEncrypted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetIsEncryptedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEncrypted) {
		return nil, false
	}
	return o.IsEncrypted, true
}

// HasIsEncrypted returns a boolean if a field has been set.
func (o *Node) HasIsEncrypted() bool {
	if o != nil && !IsNil(o.IsEncrypted) {
		return true
	}

	return false
}

// SetIsEncrypted gets a reference to the given bool and assigns it to the IsEncrypted field.
func (o *Node) SetIsEncrypted(v bool) {
	o.IsEncrypted = &v
}

// GetEncryptionInfo returns the EncryptionInfo field value if set, zero value otherwise.
func (o *Node) GetEncryptionInfo() EncryptionInfo {
	if o == nil || IsNil(o.EncryptionInfo) {
		var ret EncryptionInfo
		return ret
	}
	return *o.EncryptionInfo
}

// GetEncryptionInfoOk returns a tuple with the EncryptionInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetEncryptionInfoOk() (*EncryptionInfo, bool) {
	if o == nil || IsNil(o.EncryptionInfo) {
		return nil, false
	}
	return o.EncryptionInfo, true
}

// HasEncryptionInfo returns a boolean if a field has been set.
func (o *Node) HasEncryptionInfo() bool {
	if o != nil && !IsNil(o.EncryptionInfo) {
		return true
	}

	return false
}

// SetEncryptionInfo gets a reference to the given EncryptionInfo and assigns it to the EncryptionInfo field.
func (o *Node) SetEncryptionInfo(v EncryptionInfo) {
	o.EncryptionInfo = &v
}

// GetCntDeletedVersions returns the CntDeletedVersions field value if set, zero value otherwise.
func (o *Node) GetCntDeletedVersions() int32 {
	if o == nil || IsNil(o.CntDeletedVersions) {
		var ret int32
		return ret
	}
	return *o.CntDeletedVersions
}

// GetCntDeletedVersionsOk returns a tuple with the CntDeletedVersions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetCntDeletedVersionsOk() (*int32, bool) {
	if o == nil || IsNil(o.CntDeletedVersions) {
		return nil, false
	}
	return o.CntDeletedVersions, true
}

// HasCntDeletedVersions returns a boolean if a field has been set.
func (o *Node) HasCntDeletedVersions() bool {
	if o != nil && !IsNil(o.CntDeletedVersions) {
		return true
	}

	return false
}

// SetCntDeletedVersions gets a reference to the given int32 and assigns it to the CntDeletedVersions field.
func (o *Node) SetCntDeletedVersions(v int32) {
	o.CntDeletedVersions = &v
}

// GetCntComments returns the CntComments field value if set, zero value otherwise.
func (o *Node) GetCntComments() int32 {
	if o == nil || IsNil(o.CntComments) {
		var ret int32
		return ret
	}
	return *o.CntComments
}

// GetCntCommentsOk returns a tuple with the CntComments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetCntCommentsOk() (*int32, bool) {
	if o == nil || IsNil(o.CntComments) {
		return nil, false
	}
	return o.CntComments, true
}

// HasCntComments returns a boolean if a field has been set.
func (o *Node) HasCntComments() bool {
	if o != nil && !IsNil(o.CntComments) {
		return true
	}

	return false
}

// SetCntComments gets a reference to the given int32 and assigns it to the CntComments field.
func (o *Node) SetCntComments(v int32) {
	o.CntComments = &v
}

// GetCntDownloadShares returns the CntDownloadShares field value if set, zero value otherwise.
func (o *Node) GetCntDownloadShares() int32 {
	if o == nil || IsNil(o.CntDownloadShares) {
		var ret int32
		return ret
	}
	return *o.CntDownloadShares
}

// GetCntDownloadSharesOk returns a tuple with the CntDownloadShares field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetCntDownloadSharesOk() (*int32, bool) {
	if o == nil || IsNil(o.CntDownloadShares) {
		return nil, false
	}
	return o.CntDownloadShares, true
}

// HasCntDownloadShares returns a boolean if a field has been set.
func (o *Node) HasCntDownloadShares() bool {
	if o != nil && !IsNil(o.CntDownloadShares) {
		return true
	}

	return false
}

// SetCntDownloadShares gets a reference to the given int32 and assigns it to the CntDownloadShares field.
func (o *Node) SetCntDownloadShares(v int32) {
	o.CntDownloadShares = &v
}

// GetCntUploadShares returns the CntUploadShares field value if set, zero value otherwise.
func (o *Node) GetCntUploadShares() int32 {
	if o == nil || IsNil(o.CntUploadShares) {
		var ret int32
		return ret
	}
	return *o.CntUploadShares
}

// GetCntUploadSharesOk returns a tuple with the CntUploadShares field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetCntUploadSharesOk() (*int32, bool) {
	if o == nil || IsNil(o.CntUploadShares) {
		return nil, false
	}
	return o.CntUploadShares, true
}

// HasCntUploadShares returns a boolean if a field has been set.
func (o *Node) HasCntUploadShares() bool {
	if o != nil && !IsNil(o.CntUploadShares) {
		return true
	}

	return false
}

// SetCntUploadShares gets a reference to the given int32 and assigns it to the CntUploadShares field.
func (o *Node) SetCntUploadShares(v int32) {
	o.CntUploadShares = &v
}

// GetRecycleBinRetentionPeriod returns the RecycleBinRetentionPeriod field value if set, zero value otherwise.
func (o *Node) GetRecycleBinRetentionPeriod() int32 {
	if o == nil || IsNil(o.RecycleBinRetentionPeriod) {
		var ret int32
		return ret
	}
	return *o.RecycleBinRetentionPeriod
}

// GetRecycleBinRetentionPeriodOk returns a tuple with the RecycleBinRetentionPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetRecycleBinRetentionPeriodOk() (*int32, bool) {
	if o == nil || IsNil(o.RecycleBinRetentionPeriod) {
		return nil, false
	}
	return o.RecycleBinRetentionPeriod, true
}

// HasRecycleBinRetentionPeriod returns a boolean if a field has been set.
func (o *Node) HasRecycleBinRetentionPeriod() bool {
	if o != nil && !IsNil(o.RecycleBinRetentionPeriod) {
		return true
	}

	return false
}

// SetRecycleBinRetentionPeriod gets a reference to the given int32 and assigns it to the RecycleBinRetentionPeriod field.
func (o *Node) SetRecycleBinRetentionPeriod(v int32) {
	o.RecycleBinRetentionPeriod = &v
}

// GetHasActivitiesLog returns the HasActivitiesLog field value if set, zero value otherwise.
func (o *Node) GetHasActivitiesLog() bool {
	if o == nil || IsNil(o.HasActivitiesLog) {
		var ret bool
		return ret
	}
	return *o.HasActivitiesLog
}

// GetHasActivitiesLogOk returns a tuple with the HasActivitiesLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetHasActivitiesLogOk() (*bool, bool) {
	if o == nil || IsNil(o.HasActivitiesLog) {
		return nil, false
	}
	return o.HasActivitiesLog, true
}

// HasHasActivitiesLog returns a boolean if a field has been set.
func (o *Node) HasHasActivitiesLog() bool {
	if o != nil && !IsNil(o.HasActivitiesLog) {
		return true
	}

	return false
}

// SetHasActivitiesLog gets a reference to the given bool and assigns it to the HasActivitiesLog field.
func (o *Node) SetHasActivitiesLog(v bool) {
	o.HasActivitiesLog = &v
}

// GetQuota returns the Quota field value if set, zero value otherwise.
func (o *Node) GetQuota() int64 {
	if o == nil || IsNil(o.Quota) {
		var ret int64
		return ret
	}
	return *o.Quota
}

// GetQuotaOk returns a tuple with the Quota field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetQuotaOk() (*int64, bool) {
	if o == nil || IsNil(o.Quota) {
		return nil, false
	}
	return o.Quota, true
}

// HasQuota returns a boolean if a field has been set.
func (o *Node) HasQuota() bool {
	if o != nil && !IsNil(o.Quota) {
		return true
	}

	return false
}

// SetQuota gets a reference to the given int64 and assigns it to the Quota field.
func (o *Node) SetQuota(v int64) {
	o.Quota = &v
}

// GetIsFavorite returns the IsFavorite field value if set, zero value otherwise.
func (o *Node) GetIsFavorite() bool {
	if o == nil || IsNil(o.IsFavorite) {
		var ret bool
		return ret
	}
	return *o.IsFavorite
}

// GetIsFavoriteOk returns a tuple with the IsFavorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetIsFavoriteOk() (*bool, bool) {
	if o == nil || IsNil(o.IsFavorite) {
		return nil, false
	}
	return o.IsFavorite, true
}

// HasIsFavorite returns a boolean if a field has been set.
func (o *Node) HasIsFavorite() bool {
	if o != nil && !IsNil(o.IsFavorite) {
		return true
	}

	return false
}

// SetIsFavorite gets a reference to the given bool and assigns it to the IsFavorite field.
func (o *Node) SetIsFavorite(v bool) {
	o.IsFavorite = &v
}

// GetIsSubscribed returns the IsSubscribed field value if set, zero value otherwise.
func (o *Node) GetIsSubscribed() bool {
	if o == nil || IsNil(o.IsSubscribed) {
		var ret bool
		return ret
	}
	return *o.IsSubscribed
}

// GetIsSubscribedOk returns a tuple with the IsSubscribed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetIsSubscribedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSubscribed) {
		return nil, false
	}
	return o.IsSubscribed, true
}

// HasIsSubscribed returns a boolean if a field has been set.
func (o *Node) HasIsSubscribed() bool {
	if o != nil && !IsNil(o.IsSubscribed) {
		return true
	}

	return false
}

// SetIsSubscribed gets a reference to the given bool and assigns it to the IsSubscribed field.
func (o *Node) SetIsSubscribed(v bool) {
	o.IsSubscribed = &v
}

// GetBranchVersion returns the BranchVersion field value if set, zero value otherwise.
func (o *Node) GetBranchVersion() int64 {
	if o == nil || IsNil(o.BranchVersion) {
		var ret int64
		return ret
	}
	return *o.BranchVersion
}

// GetBranchVersionOk returns a tuple with the BranchVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetBranchVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.BranchVersion) {
		return nil, false
	}
	return o.BranchVersion, true
}

// HasBranchVersion returns a boolean if a field has been set.
func (o *Node) HasBranchVersion() bool {
	if o != nil && !IsNil(o.BranchVersion) {
		return true
	}

	return false
}

// SetBranchVersion gets a reference to the given int64 and assigns it to the BranchVersion field.
func (o *Node) SetBranchVersion(v int64) {
	o.BranchVersion = &v
}

// GetMediaToken returns the MediaToken field value if set, zero value otherwise.
func (o *Node) GetMediaToken() string {
	if o == nil || IsNil(o.MediaToken) {
		var ret string
		return ret
	}
	return *o.MediaToken
}

// GetMediaTokenOk returns a tuple with the MediaToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetMediaTokenOk() (*string, bool) {
	if o == nil || IsNil(o.MediaToken) {
		return nil, false
	}
	return o.MediaToken, true
}

// HasMediaToken returns a boolean if a field has been set.
func (o *Node) HasMediaToken() bool {
	if o != nil && !IsNil(o.MediaToken) {
		return true
	}

	return false
}

// SetMediaToken gets a reference to the given string and assigns it to the MediaToken field.
func (o *Node) SetMediaToken(v string) {
	o.MediaToken = &v
}

// GetIsBrowsable returns the IsBrowsable field value if set, zero value otherwise.
func (o *Node) GetIsBrowsable() bool {
	if o == nil || IsNil(o.IsBrowsable) {
		var ret bool
		return ret
	}
	return *o.IsBrowsable
}

// GetIsBrowsableOk returns a tuple with the IsBrowsable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetIsBrowsableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsBrowsable) {
		return nil, false
	}
	return o.IsBrowsable, true
}

// HasIsBrowsable returns a boolean if a field has been set.
func (o *Node) HasIsBrowsable() bool {
	if o != nil && !IsNil(o.IsBrowsable) {
		return true
	}

	return false
}

// SetIsBrowsable gets a reference to the given bool and assigns it to the IsBrowsable field.
func (o *Node) SetIsBrowsable(v bool) {
	o.IsBrowsable = &v
}

// GetCntRooms returns the CntRooms field value if set, zero value otherwise.
func (o *Node) GetCntRooms() int32 {
	if o == nil || IsNil(o.CntRooms) {
		var ret int32
		return ret
	}
	return *o.CntRooms
}

// GetCntRoomsOk returns a tuple with the CntRooms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetCntRoomsOk() (*int32, bool) {
	if o == nil || IsNil(o.CntRooms) {
		return nil, false
	}
	return o.CntRooms, true
}

// HasCntRooms returns a boolean if a field has been set.
func (o *Node) HasCntRooms() bool {
	if o != nil && !IsNil(o.CntRooms) {
		return true
	}

	return false
}

// SetCntRooms gets a reference to the given int32 and assigns it to the CntRooms field.
func (o *Node) SetCntRooms(v int32) {
	o.CntRooms = &v
}

// GetCntFolders returns the CntFolders field value if set, zero value otherwise.
func (o *Node) GetCntFolders() int32 {
	if o == nil || IsNil(o.CntFolders) {
		var ret int32
		return ret
	}
	return *o.CntFolders
}

// GetCntFoldersOk returns a tuple with the CntFolders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetCntFoldersOk() (*int32, bool) {
	if o == nil || IsNil(o.CntFolders) {
		return nil, false
	}
	return o.CntFolders, true
}

// HasCntFolders returns a boolean if a field has been set.
func (o *Node) HasCntFolders() bool {
	if o != nil && !IsNil(o.CntFolders) {
		return true
	}

	return false
}

// SetCntFolders gets a reference to the given int32 and assigns it to the CntFolders field.
func (o *Node) SetCntFolders(v int32) {
	o.CntFolders = &v
}

// GetCntFiles returns the CntFiles field value if set, zero value otherwise.
func (o *Node) GetCntFiles() int32 {
	if o == nil || IsNil(o.CntFiles) {
		var ret int32
		return ret
	}
	return *o.CntFiles
}

// GetCntFilesOk returns a tuple with the CntFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetCntFilesOk() (*int32, bool) {
	if o == nil || IsNil(o.CntFiles) {
		return nil, false
	}
	return o.CntFiles, true
}

// HasCntFiles returns a boolean if a field has been set.
func (o *Node) HasCntFiles() bool {
	if o != nil && !IsNil(o.CntFiles) {
		return true
	}

	return false
}

// SetCntFiles gets a reference to the given int32 and assigns it to the CntFiles field.
func (o *Node) SetCntFiles(v int32) {
	o.CntFiles = &v
}

// GetAuthParentId returns the AuthParentId field value if set, zero value otherwise.
func (o *Node) GetAuthParentId() int64 {
	if o == nil || IsNil(o.AuthParentId) {
		var ret int64
		return ret
	}
	return *o.AuthParentId
}

// GetAuthParentIdOk returns a tuple with the AuthParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetAuthParentIdOk() (*int64, bool) {
	if o == nil || IsNil(o.AuthParentId) {
		return nil, false
	}
	return o.AuthParentId, true
}

// HasAuthParentId returns a boolean if a field has been set.
func (o *Node) HasAuthParentId() bool {
	if o != nil && !IsNil(o.AuthParentId) {
		return true
	}

	return false
}

// SetAuthParentId gets a reference to the given int64 and assigns it to the AuthParentId field.
func (o *Node) SetAuthParentId(v int64) {
	o.AuthParentId = &v
}

// GetCntChildren returns the CntChildren field value if set, zero value otherwise.
// Deprecated
func (o *Node) GetCntChildren() int32 {
	if o == nil || IsNil(o.CntChildren) {
		var ret int32
		return ret
	}
	return *o.CntChildren
}

// GetCntChildrenOk returns a tuple with the CntChildren field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *Node) GetCntChildrenOk() (*int32, bool) {
	if o == nil || IsNil(o.CntChildren) {
		return nil, false
	}
	return o.CntChildren, true
}

// HasCntChildren returns a boolean if a field has been set.
func (o *Node) HasCntChildren() bool {
	if o != nil && !IsNil(o.CntChildren) {
		return true
	}

	return false
}

// SetCntChildren gets a reference to the given int32 and assigns it to the CntChildren field.
// Deprecated
func (o *Node) SetCntChildren(v int32) {
	o.CntChildren = &v
}

// GetChildren returns the Children field value if set, zero value otherwise.
// Deprecated
func (o *Node) GetChildren() []Node {
	if o == nil || IsNil(o.Children) {
		var ret []Node
		return ret
	}
	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *Node) GetChildrenOk() ([]Node, bool) {
	if o == nil || IsNil(o.Children) {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *Node) HasChildren() bool {
	if o != nil && !IsNil(o.Children) {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []Node and assigns it to the Children field.
// Deprecated
func (o *Node) SetChildren(v []Node) {
	o.Children = v
}

// GetVirusProtectionInfo returns the VirusProtectionInfo field value if set, zero value otherwise.
func (o *Node) GetVirusProtectionInfo() VirusProtectionInfo {
	if o == nil || IsNil(o.VirusProtectionInfo) {
		var ret VirusProtectionInfo
		return ret
	}
	return *o.VirusProtectionInfo
}

// GetVirusProtectionInfoOk returns a tuple with the VirusProtectionInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetVirusProtectionInfoOk() (*VirusProtectionInfo, bool) {
	if o == nil || IsNil(o.VirusProtectionInfo) {
		return nil, false
	}
	return o.VirusProtectionInfo, true
}

// HasVirusProtectionInfo returns a boolean if a field has been set.
func (o *Node) HasVirusProtectionInfo() bool {
	if o != nil && !IsNil(o.VirusProtectionInfo) {
		return true
	}

	return false
}

// SetVirusProtectionInfo gets a reference to the given VirusProtectionInfo and assigns it to the VirusProtectionInfo field.
func (o *Node) SetVirusProtectionInfo(v VirusProtectionInfo) {
	o.VirusProtectionInfo = &v
}

func (o Node) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Node) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.ReferenceId) {
		toSerialize["referenceId"] = o.ReferenceId
	}
	toSerialize["type"] = o.Type
	toSerialize["name"] = o.Name
	if !IsNil(o.TimestampCreation) {
		toSerialize["timestampCreation"] = o.TimestampCreation
	}
	if !IsNil(o.TimestampModification) {
		toSerialize["timestampModification"] = o.TimestampModification
	}
	if !IsNil(o.ParentId) {
		toSerialize["parentId"] = o.ParentId
	}
	if !IsNil(o.ParentPath) {
		toSerialize["parentPath"] = o.ParentPath
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !IsNil(o.UpdatedBy) {
		toSerialize["updatedBy"] = o.UpdatedBy
	}
	if !IsNil(o.ExpireAt) {
		toSerialize["expireAt"] = o.ExpireAt
	}
	if !IsNil(o.Hash) {
		toSerialize["hash"] = o.Hash
	}
	if !IsNil(o.FileType) {
		toSerialize["fileType"] = o.FileType
	}
	if !IsNil(o.MediaType) {
		toSerialize["mediaType"] = o.MediaType
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Classification) {
		toSerialize["classification"] = o.Classification
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	if !IsNil(o.InheritPermissions) {
		toSerialize["inheritPermissions"] = o.InheritPermissions
	}
	if !IsNil(o.IsEncrypted) {
		toSerialize["isEncrypted"] = o.IsEncrypted
	}
	if !IsNil(o.EncryptionInfo) {
		toSerialize["encryptionInfo"] = o.EncryptionInfo
	}
	if !IsNil(o.CntDeletedVersions) {
		toSerialize["cntDeletedVersions"] = o.CntDeletedVersions
	}
	if !IsNil(o.CntComments) {
		toSerialize["cntComments"] = o.CntComments
	}
	if !IsNil(o.CntDownloadShares) {
		toSerialize["cntDownloadShares"] = o.CntDownloadShares
	}
	if !IsNil(o.CntUploadShares) {
		toSerialize["cntUploadShares"] = o.CntUploadShares
	}
	if !IsNil(o.RecycleBinRetentionPeriod) {
		toSerialize["recycleBinRetentionPeriod"] = o.RecycleBinRetentionPeriod
	}
	if !IsNil(o.HasActivitiesLog) {
		toSerialize["hasActivitiesLog"] = o.HasActivitiesLog
	}
	if !IsNil(o.Quota) {
		toSerialize["quota"] = o.Quota
	}
	if !IsNil(o.IsFavorite) {
		toSerialize["isFavorite"] = o.IsFavorite
	}
	if !IsNil(o.IsSubscribed) {
		toSerialize["isSubscribed"] = o.IsSubscribed
	}
	if !IsNil(o.BranchVersion) {
		toSerialize["branchVersion"] = o.BranchVersion
	}
	if !IsNil(o.MediaToken) {
		toSerialize["mediaToken"] = o.MediaToken
	}
	if !IsNil(o.IsBrowsable) {
		toSerialize["isBrowsable"] = o.IsBrowsable
	}
	if !IsNil(o.CntRooms) {
		toSerialize["cntRooms"] = o.CntRooms
	}
	if !IsNil(o.CntFolders) {
		toSerialize["cntFolders"] = o.CntFolders
	}
	if !IsNil(o.CntFiles) {
		toSerialize["cntFiles"] = o.CntFiles
	}
	if !IsNil(o.AuthParentId) {
		toSerialize["authParentId"] = o.AuthParentId
	}
	if !IsNil(o.CntChildren) {
		toSerialize["cntChildren"] = o.CntChildren
	}
	if !IsNil(o.Children) {
		toSerialize["children"] = o.Children
	}
	if !IsNil(o.VirusProtectionInfo) {
		toSerialize["virusProtectionInfo"] = o.VirusProtectionInfo
	}
	return toSerialize, nil
}

func (o *Node) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"type",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNode := _Node{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNode)

	if err != nil {
		return err
	}

	*o = Node(varNode)

	return err
}

type NullableNode struct {
	value *Node
	isSet bool
}

func (v NullableNode) Get() *Node {
	return v.value
}

func (v *NullableNode) Set(val *Node) {
	v.value = val
	v.isSet = true
}

func (v NullableNode) IsSet() bool {
	return v.isSet
}

func (v *NullableNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNode(val *Node) *NullableNode {
	return &NullableNode{value: val, isSet: true}
}

func (v NullableNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
