/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AuditNodeInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditNodeInfo{}

// AuditNodeInfo Audit node info
type AuditNodeInfo struct {
	// Node ID
	NodeId int64 `json:"nodeId"`
	// Node name
	NodeName string `json:"nodeName"`
	// Parent node path  `/` if node is a root node (room)
	NodeParentPath string `json:"nodeParentPath"`
	// Parent room ID
	NodeParentId *int64 `json:"nodeParentId,omitempty"`
	// Encryption state
	NodeIsEncrypted *bool `json:"nodeIsEncrypted,omitempty"`
	// Number of direct children  (no recursion; for rooms only)
	CountChildren *int64 `json:"countChildren,omitempty"`
}

type _AuditNodeInfo AuditNodeInfo

// NewAuditNodeInfo instantiates a new AuditNodeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditNodeInfo(nodeId int64, nodeName string, nodeParentPath string) *AuditNodeInfo {
	this := AuditNodeInfo{}
	this.NodeId = nodeId
	this.NodeName = nodeName
	this.NodeParentPath = nodeParentPath
	return &this
}

// NewAuditNodeInfoWithDefaults instantiates a new AuditNodeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditNodeInfoWithDefaults() *AuditNodeInfo {
	this := AuditNodeInfo{}
	return &this
}

// GetNodeId returns the NodeId field value
func (o *AuditNodeInfo) GetNodeId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value
// and a boolean to check if the value has been set.
func (o *AuditNodeInfo) GetNodeIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeId, true
}

// SetNodeId sets field value
func (o *AuditNodeInfo) SetNodeId(v int64) {
	o.NodeId = v
}

// GetNodeName returns the NodeName field value
func (o *AuditNodeInfo) GetNodeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeName
}

// GetNodeNameOk returns a tuple with the NodeName field value
// and a boolean to check if the value has been set.
func (o *AuditNodeInfo) GetNodeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeName, true
}

// SetNodeName sets field value
func (o *AuditNodeInfo) SetNodeName(v string) {
	o.NodeName = v
}

// GetNodeParentPath returns the NodeParentPath field value
func (o *AuditNodeInfo) GetNodeParentPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeParentPath
}

// GetNodeParentPathOk returns a tuple with the NodeParentPath field value
// and a boolean to check if the value has been set.
func (o *AuditNodeInfo) GetNodeParentPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeParentPath, true
}

// SetNodeParentPath sets field value
func (o *AuditNodeInfo) SetNodeParentPath(v string) {
	o.NodeParentPath = v
}

// GetNodeParentId returns the NodeParentId field value if set, zero value otherwise.
func (o *AuditNodeInfo) GetNodeParentId() int64 {
	if o == nil || IsNil(o.NodeParentId) {
		var ret int64
		return ret
	}
	return *o.NodeParentId
}

// GetNodeParentIdOk returns a tuple with the NodeParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditNodeInfo) GetNodeParentIdOk() (*int64, bool) {
	if o == nil || IsNil(o.NodeParentId) {
		return nil, false
	}
	return o.NodeParentId, true
}

// HasNodeParentId returns a boolean if a field has been set.
func (o *AuditNodeInfo) HasNodeParentId() bool {
	if o != nil && !IsNil(o.NodeParentId) {
		return true
	}

	return false
}

// SetNodeParentId gets a reference to the given int64 and assigns it to the NodeParentId field.
func (o *AuditNodeInfo) SetNodeParentId(v int64) {
	o.NodeParentId = &v
}

// GetNodeIsEncrypted returns the NodeIsEncrypted field value if set, zero value otherwise.
func (o *AuditNodeInfo) GetNodeIsEncrypted() bool {
	if o == nil || IsNil(o.NodeIsEncrypted) {
		var ret bool
		return ret
	}
	return *o.NodeIsEncrypted
}

// GetNodeIsEncryptedOk returns a tuple with the NodeIsEncrypted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditNodeInfo) GetNodeIsEncryptedOk() (*bool, bool) {
	if o == nil || IsNil(o.NodeIsEncrypted) {
		return nil, false
	}
	return o.NodeIsEncrypted, true
}

// HasNodeIsEncrypted returns a boolean if a field has been set.
func (o *AuditNodeInfo) HasNodeIsEncrypted() bool {
	if o != nil && !IsNil(o.NodeIsEncrypted) {
		return true
	}

	return false
}

// SetNodeIsEncrypted gets a reference to the given bool and assigns it to the NodeIsEncrypted field.
func (o *AuditNodeInfo) SetNodeIsEncrypted(v bool) {
	o.NodeIsEncrypted = &v
}

// GetCountChildren returns the CountChildren field value if set, zero value otherwise.
func (o *AuditNodeInfo) GetCountChildren() int64 {
	if o == nil || IsNil(o.CountChildren) {
		var ret int64
		return ret
	}
	return *o.CountChildren
}

// GetCountChildrenOk returns a tuple with the CountChildren field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditNodeInfo) GetCountChildrenOk() (*int64, bool) {
	if o == nil || IsNil(o.CountChildren) {
		return nil, false
	}
	return o.CountChildren, true
}

// HasCountChildren returns a boolean if a field has been set.
func (o *AuditNodeInfo) HasCountChildren() bool {
	if o != nil && !IsNil(o.CountChildren) {
		return true
	}

	return false
}

// SetCountChildren gets a reference to the given int64 and assigns it to the CountChildren field.
func (o *AuditNodeInfo) SetCountChildren(v int64) {
	o.CountChildren = &v
}

func (o AuditNodeInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditNodeInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["nodeId"] = o.NodeId
	toSerialize["nodeName"] = o.NodeName
	toSerialize["nodeParentPath"] = o.NodeParentPath
	if !IsNil(o.NodeParentId) {
		toSerialize["nodeParentId"] = o.NodeParentId
	}
	if !IsNil(o.NodeIsEncrypted) {
		toSerialize["nodeIsEncrypted"] = o.NodeIsEncrypted
	}
	if !IsNil(o.CountChildren) {
		toSerialize["countChildren"] = o.CountChildren
	}
	return toSerialize, nil
}

func (o *AuditNodeInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"nodeId",
		"nodeName",
		"nodeParentPath",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuditNodeInfo := _AuditNodeInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAuditNodeInfo)

	if err != nil {
		return err
	}

	*o = AuditNodeInfo(varAuditNodeInfo)

	return err
}

type NullableAuditNodeInfo struct {
	value *AuditNodeInfo
	isSet bool
}

func (v NullableAuditNodeInfo) Get() *AuditNodeInfo {
	return v.value
}

func (v *NullableAuditNodeInfo) Set(val *AuditNodeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditNodeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditNodeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditNodeInfo(val *AuditNodeInfo) *NullableAuditNodeInfo {
	return &NullableAuditNodeInfo{value: val, isSet: true}
}

func (v NullableAuditNodeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditNodeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
