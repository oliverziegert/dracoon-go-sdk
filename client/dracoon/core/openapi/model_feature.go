/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Feature type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Feature{}

// Feature Feature
type Feature struct {
	// ID
	FeatureId int32 `json:"featureId"`
	// Name
	FeatureName string `json:"featureName"`
	// Is Available
	IsAvailable bool `json:"isAvailable"`
}

type _Feature Feature

// NewFeature instantiates a new Feature object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeature(featureId int32, featureName string, isAvailable bool) *Feature {
	this := Feature{}
	this.FeatureId = featureId
	this.FeatureName = featureName
	this.IsAvailable = isAvailable
	return &this
}

// NewFeatureWithDefaults instantiates a new Feature object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeatureWithDefaults() *Feature {
	this := Feature{}
	return &this
}

// GetFeatureId returns the FeatureId field value
func (o *Feature) GetFeatureId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FeatureId
}

// GetFeatureIdOk returns a tuple with the FeatureId field value
// and a boolean to check if the value has been set.
func (o *Feature) GetFeatureIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeatureId, true
}

// SetFeatureId sets field value
func (o *Feature) SetFeatureId(v int32) {
	o.FeatureId = v
}

// GetFeatureName returns the FeatureName field value
func (o *Feature) GetFeatureName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FeatureName
}

// GetFeatureNameOk returns a tuple with the FeatureName field value
// and a boolean to check if the value has been set.
func (o *Feature) GetFeatureNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeatureName, true
}

// SetFeatureName sets field value
func (o *Feature) SetFeatureName(v string) {
	o.FeatureName = v
}

// GetIsAvailable returns the IsAvailable field value
func (o *Feature) GetIsAvailable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsAvailable
}

// GetIsAvailableOk returns a tuple with the IsAvailable field value
// and a boolean to check if the value has been set.
func (o *Feature) GetIsAvailableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsAvailable, true
}

// SetIsAvailable sets field value
func (o *Feature) SetIsAvailable(v bool) {
	o.IsAvailable = v
}

func (o Feature) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Feature) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["featureId"] = o.FeatureId
	toSerialize["featureName"] = o.FeatureName
	toSerialize["isAvailable"] = o.IsAvailable
	return toSerialize, nil
}

func (o *Feature) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"featureId",
		"featureName",
		"isAvailable",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFeature := _Feature{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFeature)

	if err != nil {
		return err
	}

	*o = Feature(varFeature)

	return err
}

type NullableFeature struct {
	value *Feature
	isSet bool
}

func (v NullableFeature) Get() *Feature {
	return v.value
}

func (v *NullableFeature) Set(val *Feature) {
	v.value = val
	v.isSet = true
}

func (v NullableFeature) IsSet() bool {
	return v.isSet
}

func (v *NullableFeature) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeature(val *Feature) *NullableFeature {
	return &NullableFeature{value: val, isSet: true}
}

func (v NullableFeature) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeature) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
