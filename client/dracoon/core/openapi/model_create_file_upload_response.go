/*
DRACOON API

REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateFileUploadResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateFileUploadResponse{}

// CreateFileUploadResponse Upload channel information
type CreateFileUploadResponse struct {
	// (public) Upload URL
	UploadUrl string `json:"uploadUrl"`
	// Upload (channel) ID
	UploadId string `json:"uploadId"`
	// Upload token
	Token string `json:"token"`
}

type _CreateFileUploadResponse CreateFileUploadResponse

// NewCreateFileUploadResponse instantiates a new CreateFileUploadResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateFileUploadResponse(uploadUrl string, uploadId string, token string) *CreateFileUploadResponse {
	this := CreateFileUploadResponse{}
	this.UploadUrl = uploadUrl
	this.UploadId = uploadId
	this.Token = token
	return &this
}

// NewCreateFileUploadResponseWithDefaults instantiates a new CreateFileUploadResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateFileUploadResponseWithDefaults() *CreateFileUploadResponse {
	this := CreateFileUploadResponse{}
	return &this
}

// GetUploadUrl returns the UploadUrl field value
func (o *CreateFileUploadResponse) GetUploadUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UploadUrl
}

// GetUploadUrlOk returns a tuple with the UploadUrl field value
// and a boolean to check if the value has been set.
func (o *CreateFileUploadResponse) GetUploadUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UploadUrl, true
}

// SetUploadUrl sets field value
func (o *CreateFileUploadResponse) SetUploadUrl(v string) {
	o.UploadUrl = v
}

// GetUploadId returns the UploadId field value
func (o *CreateFileUploadResponse) GetUploadId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UploadId
}

// GetUploadIdOk returns a tuple with the UploadId field value
// and a boolean to check if the value has been set.
func (o *CreateFileUploadResponse) GetUploadIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UploadId, true
}

// SetUploadId sets field value
func (o *CreateFileUploadResponse) SetUploadId(v string) {
	o.UploadId = v
}

// GetToken returns the Token field value
func (o *CreateFileUploadResponse) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *CreateFileUploadResponse) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *CreateFileUploadResponse) SetToken(v string) {
	o.Token = v
}

func (o CreateFileUploadResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateFileUploadResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uploadUrl"] = o.UploadUrl
	toSerialize["uploadId"] = o.UploadId
	toSerialize["token"] = o.Token
	return toSerialize, nil
}

func (o *CreateFileUploadResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uploadUrl",
		"uploadId",
		"token",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateFileUploadResponse := _CreateFileUploadResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateFileUploadResponse)

	if err != nil {
		return err
	}

	*o = CreateFileUploadResponse(varCreateFileUploadResponse)

	return err
}

type NullableCreateFileUploadResponse struct {
	value *CreateFileUploadResponse
	isSet bool
}

func (v NullableCreateFileUploadResponse) Get() *CreateFileUploadResponse {
	return v.value
}

func (v *NullableCreateFileUploadResponse) Set(val *CreateFileUploadResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateFileUploadResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateFileUploadResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateFileUploadResponse(val *CreateFileUploadResponse) *NullableCreateFileUploadResponse {
	return &NullableCreateFileUploadResponse{value: val, isSet: true}
}

func (v NullableCreateFileUploadResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateFileUploadResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
